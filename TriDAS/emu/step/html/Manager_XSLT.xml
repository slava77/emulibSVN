<?xml version="1.0"?>

<xsl:transform 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:es="http://cms.cern.ch/emu/step" 
    version="1.0">

  <xsl:output method="html" indent="yes"/>

  <!-- xpath to attribute within the es namespace from the es:configuration element-->
  <xsl:template name="attributeXPath">    
    <xsl:for-each select="ancestor::es:*[not(child::es:configuration)]"><xsl:variable name="NAME" select="name()"/>/<xsl:value-of select="name()"/>[<xsl:value-of select="1+count(preceding-sibling::es:*[name()=$NAME])"/>]</xsl:for-each>/@<xsl:value-of select="name()"/>
  </xsl:template>

  <xsl:template match="/es:Manager">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
	<meta http-equiv="cache-control" content="no-cache"/>
	<xsl:if test="es:application/@state='Enabled'">
	  <meta http-equiv="refresh" content="6" />
	</xsl:if>
        <title>Emu STEP <xsl:value-of select="es:application/@state"/></title>
	<link rel="stylesheet" type="text/css" href="{@htmlDir}/Manager.css"/>
	<script type="text/javascript">
	  function selectNone( event ){
	      var inputs=event.target.parentNode.parentNode.parentNode.getElementsByTagName('input');
	      //alert( event.target.parentNode.parentNode.parentNode+' '+inputs.length );
	      for (i=0; i&lt;inputs.length; i++) if ( inputs.item(i).type == 'checkbox' ) inputs.item(i).checked = '';
	  }
	  function selectAll( event ){
	      var inputs=event.target.parentNode.parentNode.parentNode.getElementsByTagName('input');
	      //alert( event.target.parentNode.parentNode.parentNode+' '+inputs.length );
	      for (i=0; i&lt;inputs.length; i++) if ( inputs.item(i).type == 'checkbox' ) inputs.item(i).checked = 'checked';
	  }
	</script>
      </head>
      <body>
        <form action="{es:application/@urlPath}/control" method="post">
	  <xsl:apply-templates select="es:application"/>
	  <hr/>
	  <xsl:apply-templates select="es:configuration"/>
	</form>
	<hr/>
	<p style="text-align:center;">Emu STEP version  <xsl:value-of select="@softwareVersion"/></p>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="es:application">
    <table class="layout">
      <tr>
	<td>
	  Emu STEP <span class="{@state}"><xsl:value-of select="@state"/></span>
	  <xsl:if test="@state='Failed'"><br/><br/><input type="submit" name="fsm" value="Reset" class="submit" title="Reset application."/></xsl:if>
	</td>
	<td><xsl:copy-of select="es:message"/></td>
	<td><xsl:value-of select="@dateTime"/></td>
      </tr>
      <tr>
	<td colspan="3"><hr/></td>
      </tr>
      <tr>
	<td>
	  <input type="submit" name="fsm" value="Configure" class="submit" title="Configure for the selected mode.">
	    <xsl:if test="@state!='Halted'"><xsl:attribute name="disabled">disabled</xsl:attribute></xsl:if>
	  </input>
	</td>
	<td>
	  <input type="submit" name="fsm" value="Enable" class="submit" title="Start the tests.">
	    <xsl:if test="@state!='Configured'"><xsl:attribute name="disabled">disabled</xsl:attribute></xsl:if>
	  </input>
	</td>
	<td>
	  <input type="submit" name="fsm" value="Halt" class="submit" title="Halt the tests.">
	    <xsl:if test="@state='Halted' or @state='Failed'"><xsl:attribute name="disabled">disabled</xsl:attribute></xsl:if>
	  </input>
	</td>
      </tr>
    </table>
  </xsl:template>

  <xsl:template match="es:configuration">
    <input type="hidden" name="modificationTime" value="{@modificationTime}"/>
    <table class="layout">
      <tr>
	<td>
	  <xsl:apply-templates select="es:testSequence"/>
	</td>
	<td>
	  <xsl:if test="/es:Manager/es:application/@state='Halted'"><xsl:apply-templates mode="control" select="es:peripheralCrates"/></xsl:if>
	  <xsl:if test="/es:Manager/es:application/@state!='Halted'"><xsl:apply-templates mode="display" select="es:peripheralCrates"/></xsl:if>
	</td>
      </tr>
    </table>
  </xsl:template>

  <xsl:template match="es:testSequence">
    <table class="testSequence">
      <tr>
	<th colspan="3">Sequence of Tests</th>
      </tr>
      <tr>
	<th>
	  <xsl:if test="/es:Manager/es:application/@state='Halted'">select [<span class="select" title="Click to select none." onclick="selectNone( event )">none</span>|<span class="select" title="Click to select all." onclick="selectAll( event )">all</span>]</xsl:if>
	  <xsl:if test="/es:Manager/es:application/@state!='Halted'">status</xsl:if>
	</th>
	<th>id</th>
	<th>description</th>
      </tr>
      <xsl:if test="/es:Manager/es:application/@state='Halted'"><xsl:apply-templates select="es:test"/></xsl:if>
      <xsl:if test="/es:Manager/es:application/@state!='Halted'"><xsl:apply-templates select="es:test[@selected='yes']"/></xsl:if>
    </table>
  </xsl:template>

  <xsl:template match="es:test">
    <tr>
      <td>
	<xsl:choose> 
	  <xsl:when test="/es:Manager/es:application/@state='Halted'">
	    <input type="checkbox" title="Check to perform this test." value="yes">
	      <!-- for-each: just to set the current node for the templates called by name: -->
	      <xsl:for-each select="@selected">
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
	      </xsl:for-each>
	      <xsl:if test="@selected='yes'"><xsl:attribute name="checked">checked</xsl:attribute></xsl:if>
	    </input>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:attribute name="class"><xsl:value-of select="@status"/></xsl:attribute>
	    <xsl:if test="@status='done'">&#xa0;&#xa0;&#xa0;done&#xa0;&#xa0;&#xa0;</xsl:if>
	    <xsl:if test="@status='running'">running</xsl:if>
	  </xsl:otherwise>
	</xsl:choose>
      </td>
      <td>
	<xsl:value-of select="@id"/>
      </td>
      <td class="text">
	<xsl:value-of select="@description"/>
      </td>
    </tr>
  </xsl:template>

  <xsl:template mode="control" match="es:peripheralCrates">
    <table class="peripheralCrates">
      <tr>
	<th colspan="4">Peripheral Crates (<xsl:value-of select="@group"/>)</th>
      </tr>
      <tr>
	<th>select [<span class="select" title="Click to select none." onclick="selectNone( event )">none</span>|<span class="select" title="Click to select all." onclick="selectAll( event )">all</span>]</th>
	<th>id</th>
	<th>name</th>
	<th>chambers</th>
      </tr>
      <xsl:apply-templates select="es:peripheralCrate">
	<xsl:sort data-type="number" select="@id"/>
      </xsl:apply-templates>
    </table>
  </xsl:template>

  <xsl:template mode="display" match="es:peripheralCrates">
    <table class="peripheralCrates">
      <tr>
	<th colspan="3">
	  Peripheral Crates (<xsl:value-of select="@group"/>)
	  <xsl:if test="/es:Manager/es:configuration/es:testSequence/es:test/@status='running'">
	    <div class="progressbox">
	      <div class="progressbar">
		<xsl:attribute name="style">width:<xsl:value-of select="@progress"/>%;</xsl:attribute>
		<div style="text-align:center;"><xsl:value-of select="@progress"/>%</div>
	      </div>
	    </div>
	  </xsl:if>
	</th>
      </tr>
      <tr>
	<th>id</th>
	<th>name</th>
	<th>chambers</th>
      </tr>
      <xsl:apply-templates select="es:peripheralCrate[@selected='yes']">
	<xsl:sort data-type="number" select="@id"/>
      </xsl:apply-templates>
    </table>
  </xsl:template>

  <xsl:template match="es:peripheralCrate">
    <tr>
      <xsl:if test="/es:Manager/es:application/@state='Halted'">
	<td>
	  <input type="checkbox" title="Check to include this crate in the test(s)." value="yes">
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@selected">
	      <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
	    </xsl:for-each>
	    <xsl:if test="@selected='yes'"><xsl:attribute name="checked">checked</xsl:attribute></xsl:if>
	  </input>
	</td>
      </xsl:if>
      <td class="number">
	<xsl:value-of select="@id"/>
      </td>
      <td class="text">
	<xsl:value-of select="@label"/>
      </td>
      <td class="text">
	<xsl:apply-templates select="es:chamber">
	  <xsl:sort select="@label"/>
	</xsl:apply-templates>
      </td>
    </tr>
  </xsl:template>

  <xsl:template match="es:chamber">
    <xsl:value-of select="@label"/><xsl:text> </xsl:text>
  </xsl:template>

</xsl:transform>
