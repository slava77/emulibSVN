V 11
1
LANG:1 0 
PANEL,-1 -1 404 367 N "_3DFace" 1
"$deviceParams"
"main()
{
  dyn_string ex;
  deviceParams = emuui_parseParameterString($deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  getValue(\"refPoint\", \"position\", posX, posY);
  // must be exactly at the same order as they are connected to the updateWarningsCB function!!!
  allWarningShapes = makeDynString(\"warnNoCommunication\",
                                   \"warnInhibit\",
                                   \"warnSensorFailure\",
                                   \"warnSystemFailure\",
                                   \"warnInputFailure\",
                                   \"warnOutputFailure\");
  
  // Get the FSM state colors and connect the FSM state
  fsmStateColors = emuui_getMapping(\"fsmStateColors\", ex);
  if (emu_checkException(ex)) { return; }
  fsmStateColors[\"OK\"] = \"FwStateOKPhysics\"; // a little enhancement for channel statuses :)
  string fsmNode = emuui_getFsmNode(\"maraton_general\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // Get the channel DPs
  channelVMonDps = emuui_getDpNames(\"maraton_channelVMon\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  channelIMonDps = emuui_getDpNames(\"maraton_channelIMon\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string channelVSetDps = emuui_getDpNames(\"maraton_channelVSet\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // Get various trip DPs
  dyn_string channelOverTempDps = emuui_getDpNames(\"maraton_channelOverTemperatureTrip\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string channelOverCurrentDps = emuui_getDpNames(\"maraton_channelOverCurrentTrip\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string channelOverVoltageDps = emuui_getDpNames(\"maraton_channelOverVoltageTrip\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string channelTerminalOverVoltageDps = emuui_getDpNames(\"maraton_channelTerminalOverVoltageTrip\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string tripDps;
  dynAppend(tripDps, channelOverTempDps);
  dynAppend(tripDps, channelOverCurrentDps);
  dynAppend(tripDps, channelOverVoltageDps);
  dynAppend(tripDps, channelTerminalOverVoltageDps);
  
  // Get the \"disconnected\" DP
  string maratonUpTime = emuui_getDpName(\"maraton_upTime\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string maratonDisconnectedDp = maratonUpTime + \":_online.._invalid\";
  
  // Get the Maraton problems DPS
  string inhibitDp = emuui_getDpName(\"maraton_inhibit\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string sensorFailureDp = emuui_getDpName(\"maraton_sensorFailure\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string systemFailureDp = emuui_getDpName(\"maraton_systemFailure\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string inputFailureDp = emuui_getDpName(\"maraton_inputFailure\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string outputFailureDp = emuui_getDpName(\"maraton_outputFailure\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  dyn_string maratonProblemDps;
  dynAppend(maratonProblemDps, maratonDisconnectedDp);
  dynAppend(maratonProblemDps, inhibitDp);
  dynAppend(maratonProblemDps, sensorFailureDp);
  dynAppend(maratonProblemDps, systemFailureDp);
  dynAppend(maratonProblemDps, inputFailureDp);
  dynAppend(maratonProblemDps, outputFailureDp);
  
  fwCU_connectState(\"updateFSMStateCB\", fsmNode);
  dpConnect(\"updateWarningsCB\", true, maratonProblemDps);
  dpConnect(\"updateChannelStateCB\", true, tripDps);
  dpConnect(\"updateVMonCB\", false, channelVMonDps);
  dpConnect(\"updateIMonCB\", false, channelIMonDps);
  dpConnect(\"updateVSetCB\", true, channelVSetDps);
  
  //Show which crates are supplied by this Maraton
  mapping maratonToPCrates = emuui_getMaratonToPcmbsMap(ex);
  if (emu_checkException(ex)) { return; }
  if (mappingHasKey(maratonToPCrates, deviceParams[\"id\"])) {
    dyn_string pcrates = maratonToPCrates[deviceParams[\"id\"]];
    string pcratesStr;
    for (int i=1; i <= dynlen(pcrates); i++) {
      if (i != 1) {
        pcratesStr += \", \";
      }
      pcratesStr += emuui_getPCrateNameId(pcrates[i], ex);
      if (emu_checkException(ex)) { return; }
    }
    lblPCrates.text = pcratesStr;
  } else {
    lblPCrates.text = \"none\";
  }
}
" 0
 "main()
{
  emuui_destroyReferences(references);
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "//some panel-wide constants
mapping deviceParams;
int posX, posY;
mapping fsmStateColors;
dyn_string references;
dyn_string channelStates;
dyn_string allWarningShapes; // must be exactly at the same order as they are connected to the updateWarningsCB function!!!
dyn_string channelVMonDps, channelIMonDps;

// current status variables
string currentState;

/** Update voltage reading */
void updateVMonCB(dyn_string dpList, dyn_float voltages){
  for (int i=1; i <= dynlen(voltages); i++) {
    string strVoltage;
    sprintf(strVoltage, \"%.2f V\", voltages[i]);
    tableChannels.cellValueRC(1, i - 1, strVoltage);
    
    string color;
    if (!mappingHasKey(fsmStateColors, channelStates[i])) {
      color = fsmStateColors[\"ERROR\"];
    } else {
      color = fsmStateColors[channelStates[i]];
    }
    tableChannels.cellBackColRC(1, i - 1, color);
  }
  
  lblLastUpdate.text = emuui_getLastUpdateTimeOfDpList(dpList);
}

/** Update current reading */
void updateIMonCB(dyn_string dpList, dyn_float currents){
  for (int i=1; i <= dynlen(currents); i++) {
    string strCurrent;
    sprintf(strCurrent, \"%.2f A\", currents[i]);
    tableChannels.cellValueRC(2, i - 1, strCurrent);
    
    string color;
    if (!mappingHasKey(fsmStateColors, channelStates[i])) {
      color = fsmStateColors[\"ERROR\"];
    } else {
      color = fsmStateColors[channelStates[i]];
    }
    tableChannels.cellBackColRC(2, i - 1, color);
  }
  
  lblLastUpdate.text = emuui_getLastUpdateTimeOfDpList(dpList);
}

/** Update voltage setting */
void updateVSetCB(dyn_string dpList, dyn_float voltages){
  for (int i=1; i <= dynlen(voltages); i++) {
    string strVoltage;
    sprintf(strVoltage, \"%.2f V\", voltages[i]);
    tableChannels.cellValueRC(3, i - 1, strVoltage);
  }
  
  lblLastUpdate.text = emuui_getLastUpdateTimeOfDpList(dpList);
}

void updateChannelStateCB(dyn_string tripDps, dyn_bool trips) {
  dyn_bool ovt, ovc, ovv, tovv; // overtemperature, overcurrent, overvoltage, terminal overvoltage
  int channels = dynlen(trips) / 4;
  for (int i=1; i <= channels; i++) {
    ovt[i] = trips[i];
    ovc[i] = trips[i + channels];
    ovv[i] = trips[i + channels * 2];
    tovv[i] = trips[i + channels * 3];
  }
       
  for (int i=1; i <= dynlen(ovc); i++) {
    bool isOk = !(ovt[i] || ovc[i] || ovv[i] || tovv[i]);
    string strState = currentState;
    if ((strState != \"ON\") && (strState != \"OFF\")) {
      strState = \"OK\";
    }
    string color = fsmStateColors[strState];
    if (!isOk) {
      if (ovc[i]) {
        strState = \"Trip\";
      } else if (ovt[i]) {
        strState = \"OverTemp.\";
      } else if (ovv[i]) {
        strState = \"OvV\";
      } else if (tovv[i]) {
        strState = \"Term.OvV\";
      }
      color = fsmStateColors[\"ERROR\"];
    }
    channelStates[i] = strState;
    tableChannels.cellValueRC(0, i - 1, strState);
    tableChannels.cellBackColRC(0, i - 1, color);
  }
  
  // update the VMons and IMons (to update color)
  dyn_float vmons, imons;
  for (int i=1; i <= dynlen(channelVMonDps); i++) {
    dpGet(channelVMonDps[i], vmons[i]);
    dpGet(channelIMonDps[i], imons[i]);
  }
  updateVMonCB(channelVMonDps, vmons);
  updateIMonCB(channelIMonDps, imons);
}
    
/** updates the currentPCrateStatus which is used to paint the table cell background. */
void updateFSMStateCB(string fsmNode, string state) {
  currentState = state;
}

/** Show/hide warnings about various problems. */
void updateWarningsCB(dyn_string dpList, dyn_bool problems) {
  for (int i=1; i <= dynlen(problems); i++) {
    if (problems[i]) {
      emuui_showTooltipWarning(getShape(\"refPoint\"),
                             getShape(allWarningShapes[i]), 
                             getShape(\"maraton_general_tooltipBack\"));
    } else {
      emuui_hideTooltipWarning(getShape(allWarningShapes[i]), 
                               getShape(\"maraton_general_tooltipBack\"),
                               allWarningShapes);
    }  
  }
}
" 0
 2
"CBRef" "1"
"EClose" "main()
{
  emuui_destroyReferences(references);
  PanelOff();
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 31
"maraton_general_tooltipBack"
""
1 400 40 E E E 1 E 1 E N {0,0,0} E N {255,255,225} E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 3.54545454545455 0 1.888888888888902 -1418.18181818182 -75.55555555555566 1 E 400 40 510 130
2 10
"warnNoCommunication"
""
1 10 180 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 180 379 194
1 2 2 "0s" 0 0 0 65 0 0  10 180 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 33 No Communication - CANbus problem
2 13
"lblLastUpdate"
""
1 280 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 280 10 339 26
0 2 2 "0s" 0 0 0 192 0 0  280 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 timestamp
2 14
"PRIMITIVE_TEXT6"
""
1 210 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 210 10 278 26
0 2 2 "0s" 0 0 0 192 0 0  210 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 12 Last update:
7 17
"refPoint"
""
1 140 110 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 -140 -110 1 E 140 110 10 10
2 46
"PRIMITIVE_TEXT10"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
70 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 10 64 26
0 2 2 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Channels
25 50
"tableChannels"
""
1 10 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
75 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  8 28 381 128
"main()
{
  this.appendLine(\"0\", \"loading\", \"1\", \"loading\", \"2\", \"loading\", 
                  \"3\", \"loading\", \"4\", \"loading\", \"5\", \"loading\");
  this.appendLine(\"0\", \"loading\", \"1\", \"loading\", \"2\", \"loading\", 
                  \"3\", \"loading\", \"4\", \"loading\", \"5\", \"loading\");
  this.appendLine(\"0\", \"loading\", \"1\", \"loading\", \"2\", \"loading\", 
                  \"3\", \"loading\", \"4\", \"loading\", \"5\", \"loading\");
  this.appendLine(\"0\", \"loading\", \"1\", \"loading\", \"2\", \"loading\", 
                  \"3\", \"loading\", \"4\", \"loading\", \"5\", \"loading\");
  this.rowHeader(0, \"Status\");
  this.rowHeader(1, \"Voltage\");
  this.rowHeader(2, \"Current\");
  this.rowHeader(3, \"V. Setting\");
}" 0
E 1 1 1 6 4 "0" 4 1 0 "s" 1
LANG:1 5 Ch. 0
E
1
LANG:1 0 

50 "1" 4 1 0 "s" 1
LANG:1 5 Ch. 1
E
1
LANG:1 0 

50 "2" 4 1 0 "s" 1
LANG:1 5 Ch. 3
E
1
LANG:1 0 

50 "3" 4 1 0 "s" 1
LANG:1 5 Ch. 4
E
1
LANG:1 0 

50 "4" 4 1 0 "s" 1
LANG:1 5 Ch. 5
E
1
LANG:1 0 

50 "5" 4 1 0 "s" 1
LANG:1 5 Ch. 7
E
1
LANG:1 0 

50 
18 18 "" 1 1
LANG:1 6 Status
"" 1 1
LANG:1 7 Voltage
"" 1 1
LANG:1 7 Current
"" 1 1
LANG:1 10 V. Setting
10 66
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 0 0 0 1 7
1 0
2 51
"warnInhibit"
""
1 10 210 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
77 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 210 379 224
1 2 2 "0s" 0 0 0 65 0 0  10 210 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 7 INHIBIT
2 52
"warnSensorFailure"
""
1 10 240 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
79 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 240 379 254
1 2 2 "0s" 0 0 0 65 0 0  10 240 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 22 Maraton Sensor Failure
2 53
"warnSystemFailure"
""
1 10 270 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
81 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 270 379 284
1 2 2 "0s" 0 0 0 65 0 0  10 270 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 22 Maraton System Failure
2 54
"warnInputFailure"
""
1 10 300 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
83 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 300 379 314
1 2 2 "0s" 0 0 0 65 0 0  10 300 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 21 Maraton Input Failure
2 55
"warnOutputFailure"
""
1 10 330 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
85 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 330 379 344
1 2 2 "0s" 0 0 0 65 0 0  10 330 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 22 Maraton Output Failure
2 56
"lblForPCrates"
""
1 10 130 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
86 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 130 269 146
0 2 2 "0s" 0 0 0 192 0 0  10 130 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 46 This Maraton supplies these Peripheral Crates:
2 57
"lblPCrates"
""
1 10 150 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
87 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 150 60 166
0 2 2 "0s" 0 0 0 192 0 0  10 150 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 loading...
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
