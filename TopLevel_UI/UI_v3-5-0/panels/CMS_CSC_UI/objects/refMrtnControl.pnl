V 11
1
LANG:1 0 
PANEL,-1 -1 649 555 N "_3DFace" 2
"$deviceParams"
"$mrtnDp"
"main()
{
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    if (emu_checkException(ex)) { return; }
    fwCU_connectOperationMode(\"accessPrivilegesChangedCB\", \"CMS_CSC::CMS_CSC\");
  }
  //=========================  
  
  dpConnect(\"mrtnStatusChangedCB\", true, $mrtnDp + \".Settings.OnOffCrate\");

  string maratonName = \"Maraton \" + $mrtnDp;
  if (isFunctionDefined(\"emuui_parseParameterString\") && (strlen($deviceParams) > 0)) {
    dyn_string ex;
    mapping deviceParams = emuui_parseParameterString($deviceParams, ex);
    if (emu_checkException(ex)) { return; }
    string strSide = \"+\";
    if (deviceParams[\"side\"] == \"M\") { strSide = \"-\"; }
    maratonName = \"Maraton \" + deviceParams[\"id\"] + 
                  \" (crate no. \" + deviceParams[\"crateNum\"] + \" on YE\" + strSide + deviceParams[\"disk\"] + \")\";
  }
  
  lblMrtnName.text = maratonName;
  
  string sys = dpSubStr($mrtnDp, DPSUB_SYS);
  string mrtnName = dpSubStr($mrtnDp, DPSUB_DP);
  dyn_string voltageDps = dpNames(sys + \"origVoltage_\" + mrtnName + \"/*\", \"MaratonChannelOriginalVoltage\");
  dyn_string channelDps = dpNames($mrtnDp + \"/*\", \"FwWienerMarathonChannel\");
  
  dyn_string channelVoltageDps;
  dyn_string channelCurrentDps;
  dyn_string channelVoltageCurrentDps;
  channelVoltageSettingDps;
  dyn_string channelVoltageSettingReadbackDps;
  channelOriginalVoltageDps;
  for (int i=1; i <= dynlen(voltageDps); i++) {
    channelOriginalVoltageDps[i] = voltageDps[i] + \".voltage\";
  }
  for (int i=1; i <= dynlen(channelDps); i++) {
    channelVoltageDps[i] = channelDps[i] + \".MeasurementSenseVoltage\";
    channelCurrentDps[i] = channelDps[i] + \".MeasurementCurrent\";
    dynAppend(channelVoltageCurrentDps, channelVoltageDps[i]);
    dynAppend(channelVoltageCurrentDps, channelCurrentDps[i]);
    channelVoltageSettingReadbackDps[i] = channelDps[i] + \".ReadbackSettings.Voltage\";
    channelVoltageSettingDps[i] = channelDps[i] + \".Settings.Voltage\";
    dyn_string split = strsplit(channelDps[i], \"/\");
    channelsTable.appendLine(\"channelNum\", split[dynlen(split)]);
    tableChannelControl.appendLine(\"channel\", split[dynlen(split)]);
    tableChannelControl.deleteSelection();
  }
  
  dpConnect(\"channelMeasurementChangedCB\", true, channelVoltageCurrentDps);
  dpConnect(\"channelVoltageSettingChangedCB\", true, channelVoltageSettingReadbackDps);
  dpConnect(\"channelOriginalVoltageChangedCB\", true, channelOriginalVoltageDps);
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString(\"btnMrtnOn\", \"btnMrtnOff\",                // Maraton on/off
                                 \"btnOffCh15\", \"btnOffCh03\", \"btnOffCh47\", // Individual channels off
                                 \"btnOnCh15\", \"btnOnCh03\", \"btnOnCh47\",    // Individual channels on
                                 \"btnOffAllCh\", \"btnOnAllCh\");             // All channels on
  expertControlButtons = makeDynString();
}
" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"CMS_CSC_common/emu_accessControl.ctl\"

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;

const int CHANNEL_ON_OFF_PANEL_WIDTH = 102;
const int TABLE_HEADER_HEIGHT = 21;
dyn_string channelVoltageSettingDps;
dyn_string channelOriginalVoltageDps;
  
void turnMrtn(bool onOff) {
  dpSet($mrtnDp + \".Settings.OnOffCrate\", onOff);
}

void turnChannel(int channelArrayIndex, bool onOff) {
  float voltage;
  if (onOff) { // turning ON
    dpGet(channelOriginalVoltageDps[channelArrayIndex], voltage);
  } else { // turning OFF
    voltage = 0;
  }
  dpSetWait(channelVoltageSettingDps[channelArrayIndex], voltage);
}

void mrtnStatusChangedCB(string dp, bool onOff) {
  btnMrtnOn.enabled = !onOff;
  btnMrtnOff.enabled = onOff;
  if (onOff) {
    lblMrtnStatus.text = \"ON\";
    lblMrtnStatus.backCol = \"FwStateOKPhysics\";
  } else {
    lblMrtnStatus.text = \"OFF\";
    lblMrtnStatus.backCol = \"FwStateOKNotPhysics\";
  }
}

void channelMeasurementChangedCB(dyn_string dps, dyn_float measurements) {
  for (int i=0; i < dynlen(measurements) / 2; i++) {
    float voltage = measurements[(i * 2) + 1];
    float current = measurements[(i * 2) + 2];
    string voltageStr;
    sprintf(voltageStr, \"%.2f\", voltage);
    string currentStr;
    sprintf(currentStr, \"%.2f\", current);
    channelsTable.cellValueRC(i, \"measurement\", voltageStr + \" V         \" + currentStr + \" A\");
    string color = \"FwStateOKPhysics\";
    if (voltage < 0.1) {
      color = \"FwStateOKNotPhysics\";
    }
    channelsTable.cellBackColRC(i, \"measurement\", color);
  }
}

void channelVoltageSettingChangedCB(dyn_string dps, dyn_float voltages) {
  for (int i=1; i <= dynlen(voltages); i++) {
    string voltageStr;
    sprintf(voltageStr, \"%.2f\", voltages[i]);
    channelsTable.cellValueRC(i - 1, \"voltageSetting\", voltageStr + \" V\");
    string color = \"FwStateOKPhysics\";
    bool isOn = true;
    if (voltages[i] < 0.1) {
      color = \"FwStateOKNotPhysics\";
      isOn = false;
    }
    channelsTable.cellBackColRC(i - 1, \"voltageSetting\", color);
    setValue(\"btnChannel\" + i + \"On\", \"enabled\", !isOn);
    setValue(\"btnChannel\" + i + \"Off\", \"enabled\", isOn);
  }
}

void channelOriginalVoltageChangedCB(dyn_string dps, dyn_float voltages) {
  for (int i=1; i <= dynlen(voltages); i++) {
    string voltageStr;
    sprintf(voltageStr, \"%.2f\", voltages[i]);
    channelsTable.cellValueRC(i - 1, \"originalVoltage\", voltageStr + \" V\");
  }
}

/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl(\"CMS_CSC::CMS_CSC\", controlButtons, false, \"lblNoControl\", expertControlButtons, false);
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"btnMrtnOn"
""
1 120 60 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0  118 58 242 82

T 
1
LANG:1 7 Turn ON
"main()
{
  turnMrtn(true);
}" 0
 E E E
2 2
"PRIMITIVE_TEXT2"
""
1 10 60 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 60 106 76
0 2 2 "0s" 0 0 0 192 0 0  10 60 1
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 16 Maraton Control:
13 3
"btnMrtnOff"
""
1 250 60 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0  248 58 372 82

T 
1
LANG:1 8 Turn OFF
"main()
{
  turnMrtn(false);
}" 0
 E E E
25 4
"channelsTable"
""
1 30 140 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0  28 138 532 277
EE 1 0 1 4 0 "channelNum" 5 1 0 "s" 1
LANG:1 9 Channel #
E
1
LANG:1 0 

72 "measurement" 13 1 0 "s" 1
LANG:1 20 Measurement Readback
E
1
LANG:1 0 

153 "voltageSetting" 14 1 0 "s" 1
LANG:1 24 Voltage Setting Readback
E
1
LANG:1 0 

164 "originalVoltage" 8 1 0 "s" 1
LANG:1 16 Original Voltage
E
1
LANG:1 0 

105 
18 18 10 10
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 6
"PRIMITIVE_TEXT4"
""
1 10 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 30 103 46
0 2 2 "0s" 0 0 0 192 0 0  10 30 1
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 15 Maraton Status:
2 7
"lblMrtnStatus"
""
1 120 30 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 120 30 236 44
1 2 2 "0s" 0 0 0 65 0 0  120 30 1
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 2 ON
30 25
"FRAME1"
""
1 10 74 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
25 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1.089285714285713 0 2.409638554216869 -0.8928571428571397 -88.31325301204821 0 E 10 74 571 241
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Channels
13 42
"btnOffAllCh"
""
1 30.00000000000002 419.9999999999999 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0  28 418 212 472

T 
1
LANG:1 21 Turn all channels OFF
"main()
{
  for (int i=1; i <= dynlen(channelVoltageSettingDps); i++) {
    turnChannel(i, false);
  }
}" 0
 E E E
13 45
"btnOnAllCh"
""
1 230 419.9999999999999 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0  228 418 412 472

T 
1
LANG:1 20 Turn all channels ON
"main()
{
  for (int i=1; i <= dynlen(channelVoltageSettingDps); i++) {
    turnChannel(i, true);
  }
}" 0
 E E E
2 46
"PRIMITIVE_TEXT5"
""
1 20 110 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
46 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 110 599 126
0 2 2 "0s" 0 0 0 192 0 0  20 110 1
1
LANG:1 26 Arial,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 97 Note: the readback values are read from hardware, so please be patient and push buttons only once
2 61
"lblMrtnName"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
61 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 10 98 26
0 2 2 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 12 Maraton name
13 62
"btnOnCh03"
""
1 230 330 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
62 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  228 328 412 362

T 
1
LANG:1 24 Turn ON channels 0 and 3
"main()
{
  turnChannel(1, true);
  turnChannel(3, true);
}" 0
 E E E
13 63
"btnOffCh03"
""
1 30 330 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
63 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 328 212 362

T 
1
LANG:1 25 Turn OFF channels 0 and 3
"main()
{
  turnChannel(1, false);
  turnChannel(3, false);
}" 0
 E E E
13 66
"btnOnCh15"
""
1 230 290 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
66 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  228 288 412 322

T 
1
LANG:1 24 Turn ON channels 1 and 5
"main()
{
  turnChannel(5, true);
  turnChannel(2, true);
}" 0
 E E E
13 67
"btnOffCh15"
""
1 30 290 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
67 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 288 212 322

T 
1
LANG:1 25 Turn OFF channels 1 and 5
"main()
{
  turnChannel(5, false);
  turnChannel(2, false);
}" 0
 E E E
13 68
"btnOnCh47"
""
1 230 370 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
68 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  228 368 412 402

T 
1
LANG:1 24 Turn ON channels 4 and 7
"main()
{
  turnChannel(4, true);
  turnChannel(6, true);
}" 0
 E E E
13 69
"btnOffCh47"
""
1 30 370 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
69 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 368 212 402

T 
1
LANG:1 25 Turn OFF channels 4 and 7
"main()
{
  turnChannel(4, false);
  turnChannel(6, false);
}" 0
 E E E
2 70
"lblNoControl"
""
1 788 -408 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
70 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 260 30 461 49
1 2 2 "0s" 0 0 0 192 0 0  260 30 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
