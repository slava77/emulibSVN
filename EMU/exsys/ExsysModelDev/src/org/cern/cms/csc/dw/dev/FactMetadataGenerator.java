/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.cern.cms.csc.dw.dev;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.Properties;
import javax.persistence.Entity;
import jsf.bean.gui.log.Logger;
import jsf.bean.gui.log.SimpleLogger;
import org.cern.cms.csc.dw.metadata.MetadataManager;
import org.cern.cms.csc.dw.model.annotation.FactAnn;
import org.cern.cms.csc.dw.model.base.EntityBase;
import org.cern.cms.csc.dw.model.fact.Fact;
import org.cern.cms.csc.dw.model.monitor.MonitorEntity;
import org.cern.cms.csc.dw.util.ClassFinder;

/**
 *
 * @author evka
 */
public class FactMetadataGenerator {

    private static Logger logger = SimpleLogger.getLogger(FactMetadataGenerator.class);

    public static void main(String[] args) {

        try {

            if (args.length < 1) {
                throw new IllegalArgumentException("Please supply base directory to store property file");
            }

            String baseDir = args[0];

            ClassList factList = new ClassList(baseDir, MetadataManager.FACTS_RESOURCE);
            ClassList mainEntitiesList = new ClassList(baseDir, MetadataManager.MAIN_ENTITIES_RESOURCE);
            ClassList monitorEntitiesList = new ClassList(baseDir, MetadataManager.MONITOR_ENTITIES_RESOURCE);

            ClassFinder classFinder = ClassFinder.getInstance();
            
            for (Class c : classFinder.findSubclassesInPackage(EntityBase.class, MetadataManager.CLASS_ROOT)) {
                if (c.isAnnotationPresent(Entity.class) &&
                    !Modifier.isAbstract(c.getModifiers())) {

                    if (Fact.class.isAssignableFrom(c) && c.isAnnotationPresent(FactAnn.class)) {
                        factList.add(c.getSimpleName(), c.getName());
                    }

                    if (c.getPackage().getName().equals(MetadataManager.MONITOR_PACKAGE) && c.getSuperclass().equals(MonitorEntity.class)) {
                        monitorEntitiesList.add(c.getSimpleName(), c.getName());
                    } else {
                        mainEntitiesList.add(c.getSimpleName(), c.getName());
                    }
                }
            }

            factList.store();
            mainEntitiesList.store();
            monitorEntitiesList.store();


        } catch (Exception ex) {
            logger.error(ex);
        }

    }

    public static class ClassList {

        private String fullFileName;
        private Properties properties;

        public ClassList(String baseDir, String fileName) {
            this.fullFileName = baseDir + MetadataManager.RESOURCE_BASE + fileName;
            this.properties = new Properties();
        }

        public void add(String key, String value) {
            properties.setProperty(key, value);
        }

        public void store() throws IOException {
            File f = new File(this.fullFileName);
            FileWriter fw = new FileWriter(f);
            properties.store(fw, "List of classes\nGenerated by " + MetadataManager.class.getName());
            logger.info("{0} classes saved to {1}", this.properties.size(), this.fullFileName);
        }

    }

}
