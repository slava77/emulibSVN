//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.cern.cms.csc.exsys.re.model;

import java.io.Serializable;
import java.util.List;
import java.util.Vector;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import jsf.bean.gui.annotation.ImmutableReference;
import jsf.bean.gui.annotation.Label;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;


/**
 * <p>Java class for relatedComponentFinderType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="relatedComponentFinderType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.cern.ch/cms/csc/exsys/re/model}componentFinderType">
 *       &lt;sequence>
 *         &lt;element name="linkClasses" type="{http://www.cern.ch/cms/csc/dw/ontology}componentLinkClassType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "relatedComponentFinderType", propOrder = {
    "linkClasses"
})
@Entity(name = "RelatedComponentFinder")
public class RelatedComponentFinder
    extends ComponentFinder
    implements Serializable
{

    @ImmutableReference
    @Label(description = "(At least one is mandaroty) These link classes will be used to find the related components.", name = "Link Classes")
    protected List<org.cern.cms.csc.dw.model.ontology.ComponentLinkClass> linkClasses = new Vector<org.cern.cms.csc.dw.model.ontology.ComponentLinkClass>();

    /**
     * Gets the value of the linkClasses property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the linkClasses property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLinkClasses().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link org.cern.cms.csc.dw.model.ontology.ComponentLinkClass }
     * 
     * 
     */
    @ManyToMany(targetEntity = org.cern.cms.csc.dw.model.ontology.ComponentLinkClass.class, fetch = FetchType.EAGER)
    @JoinTable(name = "RE_REL_CMP_FINDER_LINK_CLASSES", joinColumns = {
        @JoinColumn(name = "RECFL_RELATED_COMP_FINDER_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "RECFL_COMPONENT_LINK_CLASS_ID")
    })
    @Fetch(FetchMode.SUBSELECT)
    public List<org.cern.cms.csc.dw.model.ontology.ComponentLinkClass> getLinkClasses() {
        if (linkClasses == null) {
            linkClasses = new Vector<org.cern.cms.csc.dw.model.ontology.ComponentLinkClass>();
        }
        return this.linkClasses;
    }

    /**
     * 
     * 
     */
    public void setLinkClasses(List<org.cern.cms.csc.dw.model.ontology.ComponentLinkClass> linkClasses) {
        this.linkClasses = linkClasses;
    }

    @Transient
    public boolean isSetLinkClasses() {
        return ((this.linkClasses!= null)&&(!this.linkClasses.isEmpty()));
    }

    public void unsetLinkClasses() {
        this.linkClasses = null;
    }
    
//--simple--preserve

    @Override
    public String toString() {
        return getClass().getSimpleName() + " for " + getComponentClass() + " via " + (getLinkClasses().size() == 1 ? getLinkClasses().get(0) : getLinkClasses());
    }

//--simple--preserve

}
