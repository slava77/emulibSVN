V 11
1
LANG:1 0 
PANEL,-1 -1 790 648 N "_3DFace" 0
"main()
{
  fwDevice_initialize();
}" 0
 E E E E 1 -1 -1 0  30 40
""0  1
E "#uses \"CMS_CSC_MiddleLayer/emu_hv.ctl\"
#uses \"CMS_CSC_MiddleLayer/emu_x2p.ctl\"
#uses \"CMS_CSC_common/emu_common.ctl\"
#uses \"CMS_CSC_common/emu_util.ctl\"
#uses \"CMS_CSC_common/emu_deviceInfo.ctl\"

// ******************* DP ***********************************
const string HV_DP_TYPE = \"CscHvChamber\";
const string HV_FAST_MON_DP_TYPE = \"CscHvChamberFastMon\";
const string HV_SLOW_MON_DP_TYPE = \"CscHvChamberSlowMon\";
const string HV_SETTINGS_DP_TYPE = \"CscHvChamberSettings\";
const string HV_PRIMARY_DP_TYPE = \"CscHvPrimary\";
const string HV_PRIMARY_MON_DP_TYPE = \"CscHvPrimaryMon\";

const string LV_DP_TYPE = \"CscLvChamber\";
const string LV_MON_DP_TYPE = \"CscLvChamberMon\";
const string LV_ME11_MON_DP_TYPE = \"CscMe11LvChamberMon\";

const string TEMP_DP_TYPE = \"CscTempChamber\";
const string TEMP_MON_DP_TYPE = \"CscTempChamberMon\";
const string TEMP_ME11_MON_DP_TYPE = \"CscMe11TempChamberMon\";

const string DDU_DP_TYPE = \"CscFedDdu\";
const string DDU_MON_DP_TYPE = \"CscFedDduMon\";

// ****************** Device ********************************

const string DIM_DEVICE_PREFIX = \"DimConfig\";

// ****************** DIM **********************************

const string HV_DIM_COMMAND_SERVICE = \"HV_1_COMMAND\";
const string X2P_DIM_COMMAND_SERVICE = \"LV_1_COMMAND\";
const string COMMAND_DP_PREFIX = \"CscDimCommand/\";
const string X2P_REPLY_SERVICE = \"LV_CONFIRMATION_SERVICE\";
const string HV_SERVER_STATUS_DIM_SERVICE_PLUS = \"HV_DIM_SERVER_HID600/SERVER_STATUS\";
const string HV_SERVER_STATUS_DIM_SERVICE_MINUS = \"HV_DIM_SERVER_HID500/SERVER_STATUS\";

// ***************** DIM DNS ********************************

const string HV_DIM_DNS_PLUS = \"dcspcs1a11-01\"; // csc-dcs-hv1.cern.ch
const string HV_DIM_DNS_MINUS = \"dcspcs1a11-02\"; // csc-dcs-hv2.cern.ch
const string HV_DIM_DNS_ISR = \"ufcmshv1\";

const string X2P_DIM_DNS_PLUS = \"csc-dcs-pc1\"; // csc-dcs-hv1.cern.ch
const string X2P_DIM_DNS_MINUS = \"csc-dcs-pc2\"; // csc-dcs-hv2.cern.ch
const string X2P_DIM_DNS_ISR = \"emuslice12\";

// **********************************************************

// ***************** Misc ***********************************

const int DIM_MANAGER_NUM_START = 30;

// **********************************************************

/** @return chambers to be created. */
dyn_mapping getChambersToCreate() {
  mapping station = getStationToCreate();
  
  if (station[\"side\"] == \"ISR\") { // development area
    dyn_mapping ret;
    ret[1][\"side\"] = \"M\";
    ret[1][\"station\"] = \"1\";
    ret[1][\"ring\"] = \"3\";
    ret[1][\"chamberNumber\"] = \"10\";
    
    ret[2][\"side\"] = \"M\";
    ret[2][\"station\"] = \"1\";
    ret[2][\"ring\"] = \"3\";
    ret[2][\"chamberNumber\"] = \"11\";

    ret[3][\"side\"] = \"M\";
    ret[3][\"station\"] = \"2\";
    ret[3][\"ring\"] = \"2\";
    ret[3][\"chamberNumber\"] = \"10\";
    
    return ret;
  } else if (station[\"side\"] == \"SX5_STEP\") { // ME1/1 refurbishment area at SX5, STEP testing side
    dyn_mapping ret;
    
    // STEP testing area (we'll call it minus side, so ME-1/1)    
    for (int i=1; i <= 2; i++) {
      ret[i][\"side\"] = \"M\";
      ret[i][\"station\"] = \"1\";
      ret[i][\"ring\"] = \"1\";
      string chamberNumStr;
      sprintf(chamberNumStr, \"%.2d\", i);      
      ret[i][\"chamberNumber\"] = chamberNumStr;
    }
    
    return ret;
  } else if (station[\"side\"] == \"SX5_Long_Term_Test\") { // ME1/1 refurbishment area at SX5
    dyn_mapping ret;

    // Long term testing area (we'll call it plus side, so ME+1/1)        
    for (int i=1; i <= 6; i++) {
      ret[i][\"side\"] = \"P\";
      ret[i][\"station\"] = \"1\";
      ret[i][\"ring\"] = \"1\";
      string chamberNumStr;
      sprintf(chamberNumStr, \"%.2d\", i);      
      ret[i][\"chamberNumber\"] = chamberNumStr;
    }
    
    return ret;
  } else {
    dyn_mapping ret = emuDev_getAllChambersForStation(station[\"side\"], station[\"station\"]);
    return ret;
  }
  
}

/** @return station to be created. */
mapping getStationToCreate() {
  string stationStr = comboStation.text();
  mapping ret;
  emu_info(\"Selected station = \" + stationStr);

  // special case for dev area
  if (stationStr == \"ISR\") {
    ret[\"side\"] = \"ISR\";
    ret[\"station\"] = \"\";
    return ret;
  }
  
  // special case for ME1/1 refurbishment area at SX5
  if (strpos(stationStr, \"SX5\") == 0) {
    ret[\"side\"] = stationStr;
    ret[\"station\"] = \"\";
    return ret;
  }
  
  ret[\"side\"] = (stationStr[2] == '+' ? \"P\" : \"M\");
  ret[\"station\"] = (string) stationStr[3];
  
  return ret;
}

/** @return HV primary PSUs to be created. **/
dyn_mapping getHvPrimariesToCreate() {
  dyn_mapping ret;
  mapping station = getStationToCreate();
  
  // determine the host ID
  int hostId;
  if (station[\"side\"] == \"P\") {
    hostId = 600;
  } else if (station[\"side\"] == \"M\") {
    hostId = 500;
  } else if (station[\"side\"] == \"ISR\") {
    mapping primary;
    primary[\"hostId\"] = 500;
    primary[\"port\"] = 1;
    primary[\"address\"] = 1;
    dynAppend(ret, primary);
    return ret;
  }
  
  mapping primary;
  primary[\"hostId\"] = hostId;
  primary[\"port\"] = 1;
  // create all primaries (for one side) only when creating station 1 (easier to handle in FSM that way)
  if (station[\"station\"] == 1) {
    for (int i=1; i <= 4; i++) {
      primary[\"address\"] = i;
      dynAppend(ret, primary);
    }
  }

  // create primaries corresponding to the stations
//   if ((station[\"station\"] == 2) || (station[\"station\"] == 3)) { // stations 2 and 3 are each serviced by two primaries (2 and 3) which power -X and +X of both stations respectively
//     primary[\"address\"] = 2;
//     dynAppend(ret, primary);
//     primary[\"address\"] = 3;
//     dynAppend(ret, primary);
//   } else { // for other stations station number = primary address
//     primary[\"address\"] = station[\"station\"];
//     dynAppend(ret, primary);
//   }
   
  return ret;
}

/** @return HV LV PSUs to be created. **/
dyn_mapping getHvLvToCreate() {
  dyn_mapping ret;
  mapping station = getStationToCreate();
  if (station[\"station\"] == 1) {
    mapping psu;
    psu[\"side\"] = station[\"side\"];
    dynAppend(ret, psu);
  }
  
  return ret;
}

/** @return DDUs to be created. */
dyn_mapping getDdusToCreate() {
  dyn_mapping ret;
  mapping station = getStationToCreate();
  
  // only on station 1
  if (station[\"station\"] != 1) { 
    return ret;
  }
  
  int startId,
      count = 18;
  if (station[\"side\"] == \"P\") {
    startId = 1;
  } else if (station[\"side\"] == \"M\") {
    startId = 19;
  } else {
    return;
  }
  
  for (int i=startId; i < startId + count; i++) {
    mapping ddu;
    ddu[\"id\"] = i;
    dynAppend(ret, ddu);
  }
  
  return ret;
}



// *********************** Defining DP names ***********************

string getHvDimServiceName(mapping chamber, string serviceType) {
  return \"HV/\" + emu_getChamberName(chamber) + \"/\" + serviceType;
}

string getHvDimPrimaryServiceName(mapping primary) {
  return \"HV_PR_\" + primary[\"hostId\"] + \"_\" + primary[\"port\"] + \"_\" + primary[\"address\"];
}

string getHvLvDpName(mapping hvLvPsu) {
  return \"Wiener/HV_LV_\" + hvLvPsu[\"side\"];
}

string getLvDimServiceName(mapping chamber) {
  if ((chamber[\"station\"] == \"1\") && (chamber[\"ring\"] == \"1\")) { // ME1/1
    return \"LV_2_\" + emu_getChamberName(chamber, false);
  } else {
    return \"LV_1_\" + emu_getChamberName(chamber, false);
  }
}

string getTempDimServiceName(mapping chamber) {
  if ((chamber[\"station\"] == \"1\") && (chamber[\"ring\"] == \"1\")) { // ME1/1
    return \"TEMP_2_\" + emu_getChamberName(chamber, false);
  } else {
    return \"TEMP_1_\" + emu_getChamberName(chamber, false);
  }
}

string getDduDimServiceName(mapping ddu) {
  return \"FED_1_DDU\" + ddu[\"id\"];
}

// *********************** Creating the devices ***********************


void createHvDevices(dyn_string &ex) {
  dyn_mapping chambers = getChambersToCreate();
  
  for (int i=1; i <= dynlen(chambers); i++) {
    mapping chamber = chambers[i];
    
    if (emuDev_isMe11Chamber(chamber)) { continue; } // skip ME1/1 chambers
    
    emu_info(\"Creating HV device for chamber: \" + chamber);

    // crete main device
    
    dyn_string hvMainDevice = emu_createDevice(HV_DP_TYPE, emuhv_getDp(chamber, \"\", ex, false), ex);
    if (emu_checkException(ex)) { return; }
    
    // create FastMon
    
    emu_createDevice(HV_FAST_MON_DP_TYPE, \"FastMon\", ex, hvMainDevice);
    if (emu_checkException(ex)) { return; }
    
    // create SlowMon
    
    emu_createDevice(HV_SLOW_MON_DP_TYPE, \"SlowMon\", ex, hvMainDevice);
    if (emu_checkException(ex)) { return; }

    // create Settings
    
    emu_createDevice(HV_SETTINGS_DP_TYPE, \"Settings\", ex, hvMainDevice);
    if (emu_checkException(ex)) { return; }

  }
  
  // create primary PSUs
  
  dyn_mapping primaries = getHvPrimariesToCreate();
  for (int i=1; i <= dynlen(primaries); i++) {
    mapping primary = primaries[i];

    emu_info(\"Creating HV Primary PSU device for: \" + primary);
    
    // create main device
    
    dyn_string mainPrimaryDevice = emu_createDevice(HV_PRIMARY_DP_TYPE, emuhv_getPrimaryDp(primary, \"\", ex, false), ex);
    if (emu_checkException(ex)) { return; }
    
    // create the monitor device
    
    emu_createDevice(HV_PRIMARY_MON_DP_TYPE, \"Mon\", ex, mainPrimaryDevice);
    if (emu_checkException(ex)) { return; }

  }

  // create HV LV PSUs (Wiener PL512)
  
  dyn_mapping hvLvPsus = getHvLvToCreate();
  for (int i=1; i <= dynlen(hvLvPsus); i++) {
    mapping hvLvPsu = hvLvPsus[i];
    
    emu_info(\"Creating HV LV PSU is not implemented yet!!!!\");
  }
  
}

void createX2PDevices(dyn_string &ex) {
  dyn_mapping chambers = getChambersToCreate();
  
  for (int i=1; i <= dynlen(chambers); i++) {
    mapping chamber = chambers[i];
    emu_info(\"Creating LV & Temperature devices for chamber: \" + chamber);

    // crete main LV device

    dyn_string mainLvDevice = emu_createDevice(LV_DP_TYPE, emux2p_getLvDpName(chamber, ex), ex);
    if (emu_checkException(ex)) { return; }

    // create LV Mon
    
    string lvMonDpType = LV_MON_DP_TYPE;
    if ((chamber[\"station\"] == \"1\") && (chamber[\"ring\"] == \"1\")) { // ME1/1
      lvMonDpType = LV_ME11_MON_DP_TYPE;
    }
    emu_createDevice(lvMonDpType, \"Mon\", ex, mainLvDevice);
    if (emu_checkException(ex)) { return; }

    // create main Temperature device
    
    dyn_string mainTempDevice = emu_createDevice(TEMP_DP_TYPE, emux2p_getTempDpName(chamber, ex), ex);
    if (emu_checkException(ex)) { return; }

    // create Temperature Mon
    
    string tempMonDpType = TEMP_MON_DP_TYPE;
    if ((chamber[\"station\"] == \"1\") && (chamber[\"ring\"] == \"1\")) { // ME1/1
      tempMonDpType = TEMP_ME11_MON_DP_TYPE;
    }
    emu_createDevice(tempMonDpType, \"Mon\", ex, mainTempDevice);
    if (emu_checkException(ex)) { return; }

  }
  
  // create DDUs
  dyn_mapping ddus = getDdusToCreate();
  for (int i=1; i <= dynlen(ddus); i++) {
    emu_info(\"creating DDU: \" + ddus[i]);
    
    // create main DDU device
    
    dyn_string mainDduDevice = emu_createDevice(DDU_DP_TYPE, emux2p_getDduDpName(ddus[i], ex), ex);
    if (emu_checkException(ex)) { return; }

    // create Temperature Mon
    
    emu_createDevice(DDU_MON_DP_TYPE, \"Mon\", ex, mainDduDevice);
    if (emu_checkException(ex)) { return; }
    
  }
}


// *********************** Creating DIM configuration ***********************


void createHvDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  dyn_mapping chambers = getChambersToCreate();
  
  // create DIM config
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"HV_\" + station[\"side\"] + station[\"station\"];
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  // subscribe to services

  dyn_string serviceNames, dps;
  for (int i=1; i <= dynlen(chambers); i++) {
    if (emuDev_isMe11Chamber(chambers[i])) { continue; } // skip ME1/1 chambers
    
    string chamberDp = emuhv_getDp(chambers[i], \"\", ex, false);
    dynAppend(dps, chamberDp + fwDevice_HIERARCHY_SEPARATOR + \"FastMon\");
    dynAppend(dps, chamberDp + fwDevice_HIERARCHY_SEPARATOR + \"SlowMon\");
    dynAppend(serviceNames, getHvDimServiceName(chambers[i], \"FAST_MON\"));
    dynAppend(serviceNames, getHvDimServiceName(chambers[i], \"SLOW_MON\"));
  }
  fwDim_subscribeServices(dimConfigName, serviceNames, dps);
  
  // set DIM DNS and other standard settings
  setHvDimDnsNode(dimConfigName, station[\"side\"]);
}

void createHvDimConfig_splitSlowFast(dyn_string &ex) {
  mapping station = getStationToCreate();
  dyn_mapping chambers = getChambersToCreate();

  // create DIM configs

  string slowDimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                             \"HV_\" + station[\"side\"] + station[\"station\"] + \"_SLOW\";
  string fastDimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                             \"HV_\" + station[\"side\"] + station[\"station\"] + \"_FAST\";
  createDimConfigDevice(slowDimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  createDimConfigDevice(fastDimConfigName, ex);
  if (emu_checkException(ex)) { return; }

  // subscribe to services
  
  dyn_string slowServiceNames, slowDps,
             fastServiceNames, fastDps;
  for (int i=1; i <= dynlen(chambers); i++) {
    if (emuDev_isMe11Chamber(chambers[i])) { continue; } // skip ME1/1 chambers
    
    string chamberDp = emuhv_getDp(chambers[i], \"\", ex, false);
    dynAppend(fastDps, chamberDp + fwDevice_HIERARCHY_SEPARATOR + \"FastMon\");
    dynAppend(slowDps, chamberDp + fwDevice_HIERARCHY_SEPARATOR + \"SlowMon\");
    dynAppend(fastServiceNames, getHvDimServiceName(chambers[i], \"FAST_MON\"));
    dynAppend(slowServiceNames, getHvDimServiceName(chambers[i], \"SLOW_MON\"));
  }
  emu_info(\"fastMon subscribing to these services: \" + fastServiceNames + \" with these DPs: \" + fastDps);
  fwDim_subscribeServices(fastDimConfigName, fastServiceNames, fastDps);
  emu_info(\"slowMon subscribing to these services: \" + slowServiceNames + \" with these DPs: \" + slowDps);
  fwDim_subscribeServices(slowDimConfigName, slowServiceNames, slowDps);
  
  // set DIM DNS and other standard settings
  setHvDimDnsNode(fastDimConfigName, station[\"side\"]);
  setHvDimDnsNode(slowDimConfigName, station[\"side\"]);
}

void createHvPrimaryDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  dyn_mapping primaries = getHvPrimariesToCreate();
  if (dynlen(primaries) == 0) {
    return;
  }

  // create DIM config
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"HV_Primary_\" + station[\"side\"];
  createDimConfigDevice(dimConfigName, ex, false);
  if (emu_checkException(ex)) { return; }
  
  // subscribe to services
  
  dyn_string serviceNames, dps;
  for (int i=1; i <= dynlen(primaries); i++) {
    string primaryDp = emuhv_getPrimaryDp(primaries[i], \"\", ex, false);
    string primaryMonDp = primaryDp + fwDevice_HIERARCHY_SEPARATOR + \"Mon\";
    dynAppend(dps, primaryMonDp);
    dynAppend(serviceNames, getHvDimPrimaryServiceName(primaries[i]));
  }
  fwDim_subscribeServices(dimConfigName, serviceNames, dps);
  
  // set DIM DNS and other standard settings
  setHvDimDnsNode(dimConfigName, station[\"side\"]);
}

void createHvCommandDpAndDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  string side = station[\"side\"];
  
  string cmdDp = COMMAND_DP_PREFIX + \"HV_\" + side;
  if (side == \"ISR\") {
    cmdDp = COMMAND_DP_PREFIX + \"HV_\" + \"M\";
  }
  if (!dpExists(cmdDp)) {
    dpCreate(cmdDp, \"CscDimCommand\");
  }

  if (!dpExists(EMUHV_DP_SERVER_STATUS)) {
    dpCreate(EMUHV_DP_SERVER_STATUS, \"CscCommonString\");
  }

  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"HV_COMMAND_\" + side;
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  // subscribe the command
  fwDim_subscribeCommand(dimConfigName, HV_DIM_COMMAND_SERVICE, cmdDp);
  
  // subscribe to the server status DP
  if (side == \"P\") {
    fwDim_subscribeServices(dimConfigName, makeDynString(HV_SERVER_STATUS_DIM_SERVICE_PLUS), EMUHV_DP_SERVER_STATUS);
  } else if ((side == \"M\") || (side == \"ISR\")) {
    fwDim_subscribeServices(dimConfigName, makeDynString(HV_SERVER_STATUS_DIM_SERVICE_MINUS), EMUHV_DP_SERVER_STATUS);
  }
  
  setHvDimDnsNode(dimConfigName, side);
}

void setHvDimDnsNode(string configName, string side) {
  string dns;
  if (side == \"M\") {
    dns = HV_DIM_DNS_MINUS;
  } else if (side == \"P\") {
    dns = HV_DIM_DNS_PLUS;
  } else if (side == \"ISR\") {
    dns = HV_DIM_DNS_ISR;
  }
  fwDim_setDimDnsNode(configName, dns);
}

void setX2PDimDnsNode(string configName, string side) {
  string dns;
  if (side == \"M\") {
    dns = X2P_DIM_DNS_MINUS;
  } else if (side == \"P\") {
    dns = X2P_DIM_DNS_PLUS;
  } else if (side == \"ISR\") {
    dns = X2P_DIM_DNS_ISR;
  }
  fwDim_setDimDnsNode(configName, dns);
}

void createX2PDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  dyn_mapping chambers = getChambersToCreate();
  
  // create DIM config
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"X2P_\" + station[\"side\"] + station[\"station\"];
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  // subscribe to services

  dyn_string serviceNames, dps;
  for (int i=1; i <= dynlen(chambers); i++) {
    string lvDp = emux2p_getLvDpName(chambers[i], ex);
    if (emu_checkException(ex)) { return; }
    string tempDp = emux2p_getTempDpName(chambers[i], ex);
    if (emu_checkException(ex)) { return; }    
    dynAppend(dps, lvDp + fwDevice_HIERARCHY_SEPARATOR + \"Mon\");
    dynAppend(dps, tempDp + fwDevice_HIERARCHY_SEPARATOR + \"Mon\");
    dynAppend(serviceNames, getLvDimServiceName(chambers[i]));
    dynAppend(serviceNames, getTempDimServiceName(chambers[i]));
  }
  
  fwDim_subscribeServices(dimConfigName, serviceNames, dps);
  
  // set DIM DNS and other standard settings
  setX2PDimDnsNode(dimConfigName, station[\"side\"]);
}

void createX2PFedDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  dyn_mapping ddus = getDdusToCreate();

  if (dynlen(ddus) == 0) {
    return;
  }
  
  // create DIM config
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"X2P_FED_\" + station[\"side\"];
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  // subscribe to services

  dyn_string serviceNames, dps;
  for (int i=1; i <= dynlen(ddus); i++) {
    string dduDp = emux2p_getDduDpName(ddus[i], ex);
    if (emu_checkException(ex)) { return; }
    dynAppend(dps, dduDp + fwDevice_HIERARCHY_SEPARATOR + \"Mon\");
    dynAppend(serviceNames, getDduDimServiceName(ddus[i]));
  }
  
  fwDim_subscribeServices(dimConfigName, serviceNames, dps);
  
  // set DIM DNS and other standard settings
  setX2PDimDnsNode(dimConfigName, station[\"side\"]);
}

void createX2PCommandDpAndDimConfig(dyn_string &ex) {
  mapping station = getStationToCreate();
  string side = station[\"side\"];
  
  string cmdDp = COMMAND_DP_PREFIX + \"X2P_\" + side;
  if (side == \"ISR\") {
    cmdDp = COMMAND_DP_PREFIX + \"X2P_\" + \"M\";
  }
  if (!dpExists(cmdDp)) {
    dpCreate(cmdDp, \"CscDimCommand\");
  }
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"X2P_COMMAND_\" + side;
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  fwDim_subscribeCommand(dimConfigName, X2P_DIM_COMMAND_SERVICE, cmdDp);
  
  setX2PDimDnsNode(dimConfigName, side);
}

void createX2PReplyService(dyn_string &ex) {
  mapping station = getStationToCreate();
  string side = station[\"side\"];
  
  string dp = \"X2P_REPLY_\" + side;
  if (side == \"ISR\") {
    dp = COMMAND_DP_PREFIX + \"X2P_\" + \"M\";
  }
  if (!dpExists(dp)) {
    dpCreate(dp, \"CscCommonString\");
  }
  
  string dimConfigName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR +
                         \"X2P_REPLY_\" + side;
  createDimConfigDevice(dimConfigName, ex);
  if (emu_checkException(ex)) { return; }
  
  fwDim_subscribeServices(dimConfigName, makeDynString(X2P_REPLY_SERVICE), makeDynString(dp));
  
  setX2PDimDnsNode(dimConfigName, side);
}

void createAllDimManagers(dyn_string &ex) {
  emu_info(\"Creating DIM managers\");
  
  dyn_string configDps = dpNames(\"DimConfig/{HV,X2P}_*\", \"_FwDimConfig\");
  for (int i=1; i <= dynlen(configDps); i++) {
    string configDp = configDps[i];
    string dns;
    dpGet(configDp + \".ApiParams.dimDnsNode\", dns);
    string name = dpSubStr(configDp, DPSUB_DP);
    strreplace(name, \"DimConfig/\", \"\");
    int num = DIM_MANAGER_NUM_START + i;
    
    if (dns == \"\") {
      emu_addError(\"DIM config \" + configDp + \" doesn't have a valid DNS set\", ex);
      return;
    }
    
    emu_info(\"creating DIM manager for \" + name + \" with num=\" + num);
    fwInstallation_appendManager(TRUE, name, \"PVSS00dim\", 
                                 \"always\", 90, 2, 2,
                                 \"-num \" + num + \" -dim_dp_config \" + dpSubStr(configDp, DPSUB_DP) + 
                                 \" -dim_dns_node \" + dns);
  }
  
  emu_info(\"DONE\");
}

// *********************** General ***********************

/**
  * Creates a DIM config device.
  */
void createDimConfigDevice(string configName, dyn_string &ex, bool clearIfExists = true) {
  if (strpos(configName, DIM_DEVICE_PREFIX) < 0) {
    configName = DIM_DEVICE_PREFIX + fwDevice_HIERARCHY_SEPARATOR + configName;
  }
  
  emu_info(\"Creating DimConfig: \" + configName);
  
  emu_createDevice(\"_FwDimConfig\", configName, ex);
  if (emu_checkException(ex)) { return; }
  
  if (clearIfExists) {
    dpSetWait(configName + \".clientServices\", makeDynString(),
              configName + \".clientCommands\", makeDynString());
  }
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 0
"PRIMITIVE_TEXT1"
""
1 30 40 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 30 40 71 56
0 2 2 "0s" 0 0 0 192 0 0  30 40 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Station:
22 1
"comboStation"
""
1 80 40 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  78 38 202 66
0

"main()
{
  for (int station = -4; station <= 4; station++) {
    if (station == 0) {
      continue;
    }
    string stationStr = \"ME\";
    if (station > 0) {
      stationStr += \"+\";
    }
    stationStr += station;
    comboStation.appendItem(stationStr);
  }
  
  // add special values
  comboStation.appendItem(\"ISR\");
  comboStation.appendItem(\"SX5_STEP\");
  comboStation.appendItem(\"SX5_Long_Term_Test\");
}" 0

E
E
 0 0
13 2
"PUSH_BUTTON1"
""
1 20.00000000000003 120 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 118 382 147

T 
1
LANG:1 30 Create HV devices, DIM configs
"main()
{
  dyn_string ex;
  
  emu_info(\"Creating HV devices...\");
  createHvDevices(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"Creating HV DIM config...\");
  if (chkSplitSlowFastDim.state(0)) {
    createHvDimConfig_splitSlowFast(ex);
  } else {
    createHvDimConfig(ex);
  }
  if (emu_checkException(ex)) { return; }

  emu_info(\"Creating HV Primary DIM config...\");
  createHvPrimaryDimConfig(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"Creating HV DIM command config and DP...\");
  createHvCommandDpAndDimConfig(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"DONE\");
}" 0
 E E E
13 4
"PUSH_BUTTON3"
""
1 20 350 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 348 382 382

T 
1
LANG:1 17 Delete all HV DPs
"main()
{
  deleteAll(\"*\", \"CscHvChamber\");
  deleteAll(\"*\", \"CscHvChamberFastMon\");
  deleteAll(\"*\", \"CscHvChamberSlowMon\");
  deleteAll(\"*\", \"CscHvChamberSettings\");
  deleteAll(\"*\", \"CscHvPrimary\");
  deleteAll(\"*\", \"CscHvPrimaryMon\");
  
  emu_info(\"Done deleting\");
}

void deleteAll(string pattern, string dpType) {
  dyn_string dps = dpNames(pattern, dpType);
  for (int i=1; i <= dynlen(dps); i++) {
    dpDelete(dps[i]);
  }
}" 0
 E E E
13 5
"PUSH_BUTTON4"
""
1 20 160 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 158 382 192

T 
1
LANG:1 21 Create default alerts
"main()
{
  dyn_string ex;
  
  emu_info(\"creating summary alerts...\");
  setSummaryAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating LV alerts...\");
  setLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating interlock alerts...\");
  setInterlockAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating 'module type' alerts...\");
  setModuleTypeAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating module status alerts...\");
  setModuleStatusAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating channel status alerts...\");
  setChannelStatusAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating master channel status alerts...\");
  setMasterChannelStatusAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  // primary
  
  emu_info(\"creating primary PSU summary alerts...\");
  setPrimarySummaryAlerts(ex);
  if (emu_checkException(ex)) { return; }

  emu_info(\"creating primary PSU status alerts...\");
  setPrimaryStatusAlerts(ex);
  if (emu_checkException(ex)) { return; }

  // activate all the summary alerts
  emu_info(\"activating all summary alerts\");
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscHvChamberFastMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscHvChamberSlowMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscHvChamber\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscHvPrimaryMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscHvPrimary\"), ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"DONE\");
}

void setLvAlerts(dyn_string &ex) {
  dyn_string texts = makeDynString(\"HV LV problem: +5V is too low\", \"\", \"HV LV problem: +5V is too high\");
  dyn_float limits = makeDynFloat(2000, 4000);
  dyn_string classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  
  dyn_string dps = dpNames(\"*.pos5v\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps, DPCONFIG_ALERT_NONBINARYSIGNAL,
                    texts, limits, classes,
                    makeDynString(), \"\", makeDynString(), \"\",
                    ex,
                    false, false, \".\");
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
  
  texts = makeDynString(\"HV LV problem: -5V is too low\", \"\", \"HV LV problem: -5V is too high\");
  limits = makeDynFloat(1000, 4000);
  dps = dpNames(\"*.neg5v\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps, DPCONFIG_ALERT_NONBINARYSIGNAL,
                    texts, limits, classes,
                    makeDynString(), \"\", makeDynString(), \"\",
                    ex,
                    false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
}

void setInterlockAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.interlock\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"Interlock\", \"\"),
                            makeDynFloat(1),
                            makeDynString(\"_fwErrorNack\", \"\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
}

void setModuleTypeAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.{rdb,master}_type\", \"CscHvChamberSlowMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"Invalid module type - board problem\", \"\"),
                            makeDynFloat(1),
                            makeDynString(\"_fwErrorNack\", \"\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
}

void setModuleStatusAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.module_status\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"\", \"HV Module Error\"),
                            makeDynFloat(4),
                            makeDynString(\"\", \"_fwErrorNack\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }

  dps = dpNames(\"*.master_module_status\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"\", \"HV Master Module Error\"),
                            makeDynFloat(4),
                            makeDynString(\"\", \"_fwErrorNack\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
}

void setChannelStatusAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.channels.*.status\", \"CscHvChamberFastMon\");
  
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"\", \"HV Channel Error\"),
                            makeDynFloat(4),
                            makeDynString(\"\", \"_fwErrorNack\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }  
  // alert activation and inclusion to the summary alert will be done in the emuhv_checkIntegrity function (because that depends on conditions)
  
}

void setMasterChannelStatusAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.master_channel.status\", \"CscHvChamberFastMon\");
  
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"\", \"HV Master Channel Error\"),
                            makeDynFloat(4),
                            makeDynString(\"\", \"_fwErrorNack\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
  
}

void setSummaryAlerts(dyn_string &ex) {
  
  //FAST MON
  dyn_string dps = dpNames(\"*.\", \"CscHvChamberFastMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(\"HV OK\", \"HV Error\"),
                            makeDynFloat(),
                            makeDynString(\"_fwErrorNack\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }

  //SLOW MON
  dps = dpNames(\"*.\", \"CscHvChamberSlowMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(\"HV OK\", \"HV Error\"),
                            makeDynFloat(),
                            makeDynString(\"_fwErrorNack\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }

  //TOP
  dps = dpNames(\"*.\", \"CscHvChamber\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(\"HV OK\", \"HV Error\"),
                            makeDynFloat(),
                            makeDynString(\"_fwErrorNack\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }
  
  for (int i=1; i <= dynlen(dps); i++) {
    fwAlertConfig_addDpInAlertSummary(dps[i],
                                      dpSubStr(dps[i], DPSUB_SYS_DP) + \"/FastMon.\",
                                      ex,
                                      false);
    if (emu_checkException(ex)) { return; }
    fwAlertConfig_addDpInAlertSummary(dps[i],
                                      dpSubStr(dps[i], DPSUB_SYS_DP) + \"/SlowMon.\",
                                      ex,
                                      false);
    if (emu_checkException(ex)) { return; }
  }
}

// *********** PRIMARY ***********

void setPrimaryStatusAlerts(dyn_string &ex) {
  dyn_string dps = dpNames(\"*.status\", \"CscHvPrimaryMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_ALERT_NONBINARYSIGNAL,
                            makeDynString(\"No communication with HV Primary PSU!\", \"\", \"HV Primary PSU Error\"),
                            makeDynFloat(0, 4),
                            makeDynString(\"_fwFatalNack\", \"\", \"_fwFatalNack\"),
                            makeDynString(), \"\", makeDynString(), \"\",
                            ex,
                            false, false, \".\");
  if (emu_checkException(ex)) { return; }  
  fwAlertConfig_activateMultiple(dps, ex);
  if (emu_checkException(ex)) { return; }
}

void setPrimarySummaryAlerts(dyn_string &ex) {
  
  // Primary Mon
  dyn_string dps = dpNames(\"*.\", \"CscHvPrimaryMon\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(\"HV Primary PSU OK\", \"HV Primary PSU Error\"),
                            makeDynFloat(),
                            makeDynString(\"_fwFatalNack\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }

  // Primary
  dps = dpNames(\"*.\", \"CscHvPrimary\");
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(\"HV Primary PSU OK\", \"HV Primary PSU Error\"),
                            makeDynFloat(),
                            makeDynString(\"_fwFatalAck\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }
  
  // add the mon alerts into the primary alerts
  for (int i=1; i <= dynlen(dps); i++) {
    fwAlertConfig_addDpInAlertSummary(dps[i],
                                      dpSubStr(dps[i], DPSUB_SYS_DP) + \"/Mon.\",
                                      ex,
                                      false);
    if (emu_checkException(ex)) { return; }
  }
}
" 0
 E E E
20 6
"chkSplitSlowFastDim"
""
1 20 79.99999999999999 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 78 292 102
1
T 
1
LANG:1 35 Split slow and fast mon DIM configs

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
"main()
{
  this.state(0, true);
}" 0
E13 7
"PUSH_BUTTON5"
""
1 20 200 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 198 772 232

T 
1
LANG:1 10 Create FSM
"#uses \"CMS_CSC_MiddleLayer/setup/fsmCreate.ctl\"

main() {
  dyn_string ex;
  emuFsm_createMiddleLayerFsm(ex);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 9
"PUSH_BUTTON6"
""
1 20 240 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 238 382 272

T 
1
LANG:1 19 Run integrity check
"main()
{
  emu_info(\"running integrity check\");
  
  dyn_string ex;
  emuhv_checkIntegrity(ex);
  if (!emu_checkException(ex)) {
    emu_info(\"no critical errors found\");
  }
  
  emu_info(\"DONE\");
}" 0
 E E E
13 11
"PUSH_BUTTON8"
""
1 410 120 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  408 118 772 147

T 
1
LANG:1 54 Create X2P devices (LV, temperature, FED), DIM configs
"main()
{
  dyn_string ex;
  
  emu_info(\"Creating X2P devices...\");
  createX2PDevices(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"Creating X2P DIM config...\");
  createX2PDimConfig(ex);
  if (emu_checkException(ex)) { return; }

  emu_info(\"Creating X2P FED DIM config...\");
  createX2PFedDimConfig(ex);
  if (emu_checkException(ex)) { return; }

  emu_info(\"Creating X2P command DP and DIM config...\");
  createX2PCommandDpAndDimConfig(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"Creating X2P reply DP and DIM config...\");
  createX2PReplyService(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"DONE\");
}" 0
 E E E
13 12
"PUSH_BUTTON9"
""
1 20 280 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 278 382 312

T 
1
LANG:1 23 Create all DIM managers
"main()
{
  dyn_string ex;
  createAllDimManagers(ex);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 15
"PUSH_BUTTON11"
""
1 410 160 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  408 158 772 192

T 
1
LANG:1 21 Create default alerts
"const float EMU_ALERT_CFEB_VOLTAGE_DEVIATION_TOLERANCE = 0.2;
const float EMU_ALERT_DCFEB_VOLTAGE_DEVIATION_TOLERANCE = 0.1;
const float EMU_ALERT_ALCT_VOLTAGE_DEVIATION_TOLERANCE = 0.2;

main()
{
  dyn_string ex;

  // summary
  
  emu_info(\"creating LV summary alerts...\");
  setSummaryAlerts(\"CscMe11LvChamberMon\", \"LV OK\", \"LV Error\", ex);
  setSummaryAlerts(\"CscLvChamber\", \"LV OK\", \"LV Error\", ex);
  if (emu_checkException(ex)) { return; }

  emu_info(\"creating Temperature summary alerts...\");
  setSummaryAlerts(\"CscMe11TempChamberMon\", \"Temperature OK\", \"Temperature Error\", ex);
  setSummaryAlerts(\"CscTempChamber\", \"Temperature OK\", \"Temperature Error\", ex);
  if (emu_checkException(ex)) { return; }

  emu_info(\"creating DDU summary alerts...\");
  setSummaryAlerts(\"CscFedDdu\", \"DDU OK\", \"DDU Error\", ex);
  if (emu_checkException(ex)) { return; }

  // LV
  
  emu_info(\"creating CFEB LV alerts...\");
  setCfebLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating DCFEB LV alerts...\");
  setDcfebLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating ALCT LV alerts...\");
  setAlctLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating TMB LV alerts...\");
  setTmbLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating LVDB LV alerts...\");
  setLvdbLvAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"creating CCB bits alerts...\");
  setCcbBitsAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  // Temperature
  emu_info(\"creating temperature alerts...\");
  setTemperatureAlerts(ex);
  if (emu_checkException(ex)) { return; }

  // FED
  emu_info(\"creating FED alerts...\");
  setFedAlerts(ex);
  if (emu_checkException(ex)) { return; }
  
  // activate all the summary alerts

  emu_info(\"activating all summary alerts\");
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscLvChamberMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscMe11LvChamberMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscLvChamber\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscTempChamberMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscMe11TempChamberMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscTempChamber\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscFedDduMon\"), ex);
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpNames(\"*.\", \"CscFedDdu\"), ex);
  if (emu_checkException(ex)) { return; }
  
  emu_info(\"DONE\");
}

void setSummaryAlerts(string type, string okText, string badText, dyn_string &ex) {
  
  dyn_string dps;
  
  if (strpos(type, \"Mon\") < 0) {  
    dps = dpNames(\"*.\", type + \"Mon\");
    fwAlertConfig_setMultiple(dps,
                              DPCONFIG_SUM_ALERT,
                              makeDynString(okText, badText),
                              makeDynFloat(),
                              makeDynString(\"_fwErrorNack\"),
                              makeDynString(),
                              \"\", makeDynString(), \"\",
                              ex);
    if (emu_checkException(ex)) { return; }
  }
  
  dps = dpNames(\"*.\", type);
  fwAlertConfig_setMultiple(dps,
                            DPCONFIG_SUM_ALERT,
                            makeDynString(okText, badText),
                            makeDynFloat(),
                            makeDynString(\"_fwErrorNack\"),
                            makeDynString(),
                            \"\", makeDynString(), \"\",
                            ex);
  if (emu_checkException(ex)) { return; }

  if (strpos(type, \"Mon\") < 0) {  
    for (int i=1; i <= dynlen(dps); i++) {
      fwAlertConfig_addDpInAlertSummary(dps[i],
                                        dpSubStr(dps[i], DPSUB_SYS_DP) + \"/Mon.\",
                                        ex,
                                        false);
      if (emu_checkException(ex)) { return; }
    }
  }
}

// CFEB LV
void setCfebLvAlerts(dyn_string &ex) {
  dyn_string dpsToIgnore = dpNames(\"*CSC_ME_{P,M}13_*.cfeb.*.v5\", \"CscLvChamberMon\"); // ME1/3 only have 4 CFEBs - so ignore the 5th
  
  dyn_string dps, texts, classes;
  dyn_float limits;

  // 3.3V voltage
  dps = dpNames(\"*CSC_ME*.cfeb.v33.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 3.3V voltage is too low\", \"\", \"CFEB 3.3V voltage is too high\");
  limits = _getRange(3.3, EMU_ALERT_CFEB_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 3.3, dpsToIgnore);
    
  // 5V voltage
  dps = dpNames(\"*CSC_ME*.cfeb.v50.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 5V voltage is too low\", \"\", \"CFEB 5V voltage is too high\");
  limits = _getRange(5.0, EMU_ALERT_CFEB_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 5.0, dpsToIgnore);
  
  // 6V voltage
  dps = dpNames(\"*CSC_ME*.cfeb.v60.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 6V voltage is too low\", \"\", \"CFEB 6V voltage is too high\");
  limits = _getRange(6.0, EMU_ALERT_CFEB_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 6.0, dpsToIgnore);
  
  // 3.3V current
  dps = dpNames(\"*CSC_ME*.cfeb.c33.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 3.3V current is too low\", \"\", \"CFEB 3.3V current is too high\");
  limits = makeDynFloat(0.075, 1.1);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 0.5, dpsToIgnore);
    
  // 5V current
  dps = dpNames(\"*CSC_ME*.cfeb.c50.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 5V current is too low\", \"\", \"CFEB 5V current is too high\");
  limits = makeDynFloat(0, 2);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 1.0, dpsToIgnore);
  
  // 6V current
  dps = dpNames(\"*CSC_ME*.cfeb.c60.*\", \"CscLvChamberMon\");
  texts = makeDynString(\"CFEB 6V current is too low\", \"\", \"CFEB 6V current is too high\");
  limits = makeDynFloat(0, 6);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 3.0, dpsToIgnore);
}    

// DCFEB LV
void setDcfebLvAlerts(dyn_string &ex) {
  dyn_string dps, texts, classes;
  dyn_float limits;

  // 3.0V voltage
  dps = dpNames(\"*CSC_ME*.dcfeb.v30.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 3.0V voltage is too low\", \"\", \"DCFEB 3.0V voltage is too high\");
  //limits = _getRange(3.0, EMU_ALERT_DCFEB_VOLTAGE_DEVIATION_TOLERANCE);
  limits = makeDynFloat(0, 3.3);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 3.0);
    
  // 4.0V voltage
  dps = dpNames(\"*CSC_ME*.dcfeb.v40.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 4.0V voltage is too low\", \"\", \"DCFEB 4.0V voltage is too high\");
  //limits = _getRange(4.0, EMU_ALERT_DCFEB_VOLTAGE_DEVIATION_TOLERANCE);
  limits = makeDynFloat(0, 4.4);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 4.0);
  
  // 5.5V voltage
  dps = dpNames(\"*CSC_ME*.dcfeb.v55.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 5.5V voltage is too low\", \"\", \"DCFEB 5.5V voltage is too high\");
  //limits = _getRange(5.5, EMU_ALERT_DCFEB_VOLTAGE_DEVIATION_TOLERANCE);
  limits = makeDynFloat(0, 6.0);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 5.5);
  
  // 3.0V current
  dps = dpNames(\"*CSC_ME*.dcfeb.c30.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 3.0V current is too low\", \"\", \"DCFEB 3.0V current is too high\");
//  limits = makeDynFloat(0.5, 10);
  limits = makeDynFloat(0, 10);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 3.5);
    
  // 4.0V current
  dps = dpNames(\"*CSC_ME*.dcfeb.c40.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 4.0V current is too low\", \"\", \"DCFEB 4.0V current is too high\");
//  limits = makeDynFloat(0.1, 5);
  limits = makeDynFloat(0, 5);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 0.7);
  
  // 5.5V current
  dps = dpNames(\"*CSC_ME*.dcfeb.c55.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB 5.5V current is too low\", \"\", \"DCFEB 5.5V current is too high\");
//  limits = makeDynFloat(0.1, 10);
  limits = makeDynFloat(0, 10);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.0);
  
  // Vcore (1V) voltage
  dps = dpNames(\"*CSC_ME*.dcfeb_sysmon.vcore.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB Vcore (1V) voltage is too low\", \"\", \"DCFEB Vcore (1V) voltage is too high\");
//  limits = makeDynFloat(0.8, 1.2);
  limits = makeDynFloat(0, 1.2);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 1.0, makeDynString(), -1, 2.99);

  // Vaux1 (2.5V) voltage
  dps = dpNames(\"*CSC_ME*.dcfeb_sysmon.vaux1.*\", \"CscMe11LvChamberMon\");
  texts = makeDynString(\"DCFEB Vaux1 (2.5V) voltage is too low\", \"\", \"DCFEB Vaux1 (2.5V) voltage is too high\");
//  limits = makeDynFloat(2.2, 2.7);
  limits = makeDynFloat(0, 2.7);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.5, makeDynString(), -1, 2.99);  
}    

// ALCT LV
void setAlctLvAlerts(dyn_string &ex) {
  dyn_string dps, texts, classes;
  dyn_float limits;

  // 1.8V voltage
  dps = dpNames(\"*CSC_ME*.alct.v18\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.v18\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 1.8V voltage is too low\", \"\", \"ALCT 1.8V voltage is too high\");
  limits = _getRange(1.8, EMU_ALERT_ALCT_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 1.8);
  
  // 3.3V voltage
  dps = dpNames(\"*CSC_ME*.alct.v33\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.v33\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 3.3V voltage is too low\", \"\", \"ALCT 3.3V voltage is too high\");
  limits = _getRange(3.3, EMU_ALERT_ALCT_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 3.3);
  
  // 5.5V voltage
  dps = dpNames(\"*CSC_ME*.alct.v55\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.v55\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 5.5V voltage is too low\", \"\", \"ALCT 5.5V voltage is too high\");
  limits = _getRange(5.5, EMU_ALERT_ALCT_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 5.5);
  
  // 5.6V voltage
  dps = dpNames(\"*CSC_ME*.alct.v56\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.v56\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 5.6V voltage is too low\", \"\", \"ALCT 5.6V voltage is too high\");
  limits = _getRange(5.5, EMU_ALERT_ALCT_VOLTAGE_DEVIATION_TOLERANCE);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 5.5);
  
  // 1.8V current
  dps = dpNames(\"*CSC_ME*.alct.c18\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.c18\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 1.8V current is too low\", \"\", \"ALCT 1.8V current is too high\");
  limits = makeDynFloat(0, 4.2);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.1);
  
  // 3.3V current
  dps = dpNames(\"*CSC_ME*.alct.c33\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.c33\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 3.3V current is too low\", \"\", \"ALCT 3.3V current is too high\");
  limits = makeDynFloat(0, 5);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.5);
  
  // 5.5V current
  dps = dpNames(\"*CSC_ME*.alct.c55\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.c55\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 5.5V current is too low\", \"\", \"ALCT 5.5V current is too high\");
  limits = makeDynFloat(0, 4.2);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.1);
  
  // 5.6V current
  dps = dpNames(\"*CSC_ME*.alct.c56\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.c56\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT 5.6V current is too low\", \"\", \"ALCT 5.6V current is too high\");
  limits = makeDynFloat(0, 4.2);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 2.1);
}

// TMB & OTMB LV
void setTmbLvAlerts(dyn_string &ex) {
}

// LVDB LV
void setLvdbLvAlerts(dyn_string &ex) {
  dyn_string dps, texts, classes;
  dyn_float limits;

  // 7.5V analog
  dps = dpNames(\"*CSC_ME*.lvdb.v7Analog\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.lvdb.v7Analog\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"LVDB 7.5V analog voltage is too low\", \"\", \"LVDB 7.5V analog voltage is too high\");
  limits = makeDynFloat(3.5, 10.5);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 7.0);
  
  // 7.5V digital
  dps = dpNames(\"*CSC_ME*.lvdb.v7Digital\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.lvdb.v7Digital\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"LVDB 7.5V digital voltage is too low\", \"\", \"LVDB 7.5V digital voltage is too high\");
  limits = makeDynFloat(3.5, 10.5);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 7.0);
}

// Temperature
void setTemperatureAlerts(dyn_string &ex) {
  dyn_string dpsToIgnore = dpNames(\"*CSC_ME_{P,M}13_*.cfeb.v5\", \"CscTempChamberMon\"); // ME1/3 only have 4 CFEBs - so ignore the 5th
  
  dyn_string dps, texts, classes;
  dyn_float limits;

  // CFEB
  dps = dpNames(\"*CSC_ME*.cfeb.v*\", \"CscTempChamberMon\");
  texts = makeDynString(\"CFEB temperature is too low\", \"\", \"CFEB temperature is too high\");
  limits = makeDynFloat(10, 31);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25, dpsToIgnore);
  
  // ALCT
  dps = dpNames(\"*CSC_ME*.alct.v1\", \"CscTempChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.alct.v1\", \"CscMe11TempChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"ALCT temperature is too low\", \"\", \"ALCT temperature is too high\");
  limits = makeDynFloat(10, 31);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25);
  
  // DMB
  dps = dpNames(\"*CSC_ME*.dmb.v1\", \"CscTempChamberMon\");
  texts = makeDynString(\"DMB temperature is too low\", \"\", \"DMB temperature is too high\");
  limits = makeDynFloat(10, 30);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25);

// ME1/1 new electronics  
  
  // ODMB
  dps = dpNames(\"*CSC_ME*.odmb.v1\", \"CscMe11TempChamberMon\");
  texts = makeDynString(\"ODMB temperature is too low\", \"\", \"ODMB temperature is too high\");
  limits = makeDynFloat(0, 60);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25, dpsToIgnore, -1, 200);

  // OTMB temperature warning
  dps = dpNames(\"*CSC_ME*.otmb.v1\", \"CscMe11TempChamberMon\");
  texts = makeDynString(\"OTMB temperature is too low\", \"\", \"OTMB temperature is too high (warning level)\", \"OTMB temperature is too high (critical level)\");
  limits = makeDynFloat(10, 67, 72);
  classes = makeDynString(\"_fwWarningNack\", \"\", \"_fwWarningNack\", \"_fwFatalAck\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25);

  // DCFEB FPGA
  dps = dpNames(\"*CSC_ME*.dcfeb.fpga.v*\", \"CscMe11TempChamberMon\");
  texts = makeDynString(\"DCFEB FPGA temperature is too low\", \"\", \"DCFEB FPGA temperature is too high (warning level)\", \"DCFEB FPGA temperature is too high (critical level)\");
  limits = makeDynFloat(0, 70, 72);
  classes = makeDynString(\"_fwWarningNack\", \"\", \"_fwWarningNack\", \"_fwFatalNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25, dpsToIgnore, -1, 200);
  
  // LVDB
  dps = dpNames(\"*CSC_ME*.lvdb.v1\", \"CscMe11TempChamberMon\");
  texts = makeDynString(\"LVDB temperature is too low\", \"\", \"LVDB temperature is too high\");
  limits = makeDynFloat(10, 60);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex, dpsToIgnore);
  if (emu_checkException(ex)) { return; }
  setDefaultValueAndRange(dps, 25, dpsToIgnore);
  
}

// FED
void setFedAlerts(dyn_string &ex) {
  dyn_string dps, texts, classes;
  dyn_float limits;

  // temperature
  dps = dpNames(\"*DDU*.temp.*\", \"CscFedDduMon\");
  texts = makeDynString(\"DDU temperature is too low\", \"\", \"DDU temperature is too high\");
  limits = makeDynFloat(0, 35);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }

  // 1.5V voltage
  dps = dpNames(\"*DDU*.lv.v15\", \"CscFedDduMon\");
  texts = makeDynString(\"DDU 1.5V voltage is too low\", \"\", \"DDU 1.5V voltage is too high\");
  limits = makeDynFloat(1.2, 1.8);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }

  // 2.5V voltage (a & b)
  dps = dpNames(\"*DDU*.lv.v25*\", \"CscFedDduMon\");
  texts = makeDynString(\"DDU 2.5V voltage is too low\", \"\", \"DDU 2.5V voltage is too high\");
  limits = makeDynFloat(2, 3);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }

  // 3.3V voltage
  dps = dpNames(\"*DDU*.lv.v33*\", \"CscFedDduMon\");
  texts = makeDynString(\"DDU 3.3V voltage is too low\", \"\", \"DDU 3.3V voltage is too high\");
  limits = makeDynFloat(2.64, 3.96);
  classes = makeDynString(\"_fwErrorNack\", \"\", \"_fwErrorNack\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
}

// CCB bits
void setCcbBitsAlerts(dyn_string &ex) {
  dyn_string dps, texts, classes;
  dyn_float limits;

  dps = dpNames(\"*CSC_ME*.ccb_bits\", \"CscLvChamberMon\");
  emu_dynAppend(dps, dpNames(\"*CSC_ME*.ccb_bits\", \"CscMe11LvChamberMon\")); // Add the ME1/1 types as well
  texts = makeDynString(\"\", \"FPGA not configured\", \"CCB not configured\");
  limits = makeDynFloat(1, 128);
  classes = makeDynString(\"\", \"_fwErrorNack\", \"_fwErrorNack_70\");
  setAndActivateAnalogAlerts(dps, texts, limits, classes, ex);
  if (emu_checkException(ex)) { return; }
  
  
//   texts = makeDynString(\"ALCT not configured\",
//                         \"TMB not configured\",
//                         \"DMB / CFEB not configured\",
//                         \"CCB not configured\",
//                         \"\");
//   classes = makeDynString(\"_fwErrorNack_70\",
//                           \"_fwErrorNack_70\",
//                           \"_fwErrorNack_70\",
//                           \"_fwErrorNack_70\",
//                           \"\");
// 
//   fwAlertConfig_setMultiple(dps, DPCONFIG_ALERT_BINARYSIGNAL,
//                     texts, makeDynFloat(), classes,
//                     makeDynString(), \"\", makeDynString(), \"\",
//                     ex,
//                     false, false, \".\", true,
//                     true, false,
//                     \"1111\",
//                     makeDynString(\"\"));
//   if (emu_checkException(ex)) { return; }
//   fwAlertConfig_activateMultiple(dps, ex);
//   if (emu_checkException(ex)) { return; }
}

void setAndActivateAnalogAlerts(dyn_string dpes, dyn_string texts, dyn_string limits, dyn_string classes, 
                                dyn_string &ex, dyn_string dpesToIgnore = makeDynString()) {
  emu_dynRemove(dpes, dpesToIgnore);
  fwAlertConfig_setMultiple(dpes, DPCONFIG_ALERT_NONBINARYSIGNAL,
                    texts, limits, classes,
                    makeDynString(), \"\", makeDynString(), \"\",
                    ex,
                    false, false, \".\");
  if (emu_checkException(ex)) { return; }
  fwAlertConfig_activateMultiple(dpes, ex);
  if (emu_checkException(ex)) { return; }
}

void setDefaultValueAndRange(dyn_string dpes, float defaultValue, dyn_string dpesToIgnore = makeDynString(), float min = -1, float max = 999999999 /*maxFLOAT()*/) {
  emu_dynRemove(dpes, dpesToIgnore);
  for (int i=1; i <= dynlen(dpes); i++) {
   dpSetWait(dpes[i] + \":_pv_range.._type\", DPCONFIG_MINMAX_PVSS_RANGECHECK,
             dpes[i] + \":_pv_range.._min\", min,
             dpes[i] + \":_pv_range.._max\", max,
             dpes[i] + \":_default.._type\", DPCONFIG_DEFAULTVALUE,
             dpes[i] + \":_default.._value\", defaultValue,
             dpes[i] + \":_default.._set_pvrange\", true);                 
 }
}

dyn_float _getRange(float defaultValue, float deviationTolerance) {
  return makeDynFloat(defaultValue - defaultValue * deviationTolerance, defaultValue + defaultValue * deviationTolerance);
}" 0
 E E E
13 18
"PUSH_BUTTON14"
""
1 420 350 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  418 348 782 382

T 
1
LANG:1 18 Delete all X2P DPs
"main()
{
  deleteAll(\"*\", \"CscLvChamber\");
  deleteAll(\"*\", \"CscLvChamberMon\");
  deleteAll(\"*\", \"CscMe11LvChamberMon\");
  deleteAll(\"*\", \"CscTempChamber\");
  deleteAll(\"*\", \"CscTempChamberMon\");
  deleteAll(\"*\", \"CscMe11TempChamberMon\");
  deleteAll(\"*\", \"CscFedDdu\");
  deleteAll(\"*\", \"CscFedDduMon\");
  
  emu_info(\"Done deleting\");
}

void deleteAll(string pattern, string dpType) {
  dyn_string dps = dpNames(pattern, dpType);
  for (int i=1; i <= dynlen(dps); i++) {
    dpDelete(dps[i]);
  }
}" 0
 E E E
13 19
"btnSaveToDb"
""
1 450 450 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  448 448 692 532

T 
1
LANG:1 14 Save to confDB
"#uses \"CMS_CSC_MiddleLayer/setup/confDb.ctl\"

main()
{
  dyn_string ex;
  int saveOptions = 0;
  
  if (radioSaveOption.number == 1) {
    saveOptions = fwConfigurationDB_deviceConfig_VALUE;
  } else if (radioSaveOption.number == 2) {
    saveOptions = fwConfigurationDB_deviceConfig_ALERT;
  }
  
  if (chkSaveHv.state(0)) {
    emuconfdb_saveHvDevices(editVersion.text, ex, chkJustPrint.state(0), saveOptions);
  }
  
  if (chkSaveX2P.state(0)) {
    emuconfdb_saveX2pDevices(editVersion.text, ex, chkJustPrint.state(0), saveOptions);
  }
  
  emu_info(\"DONE saving devices to conf DB as version \" + editVersion.text);
}

" 0
 E E E
2 21
"PRIMITIVE_TEXT2"
""
1 30 460 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 30 460 73 476
0 2 2 "0s" 0 0 0 192 0 0  30 460 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 version:
14 22
"editVersion"
""
1 80 450 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  78 448 142 476
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"1.0\";
}" 0
 E
20 23
"chkJustPrint"
""
1 30 540 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 538 262 562
1
T 
1
LANG:1 32 Just print - don't actually save

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
EE20 24
"chkSaveHv"
""
1 30 480 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
24 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 478 182 502
1
T 
1
LANG:1 15 Save HV devices

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
"main()
{
  this.state(0, true);
}" 0
E30 25
"FRAME1"
""
1 10 432 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
25 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 1.507246376811594 0 -219.1304347826087 0 E 10 432 711 571
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 16 Configuration DB
20 27
"chkSaveX2P"
""
1 30 510 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 508 172 532
1
T 
1
LANG:1 16 Save X2P devices

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
"main()
{
  this.state(0, true);
}" 0
E20 28
"chkImSure"
""
1 460 540 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  458 538 692 562
1
T 
1
LANG:1 32 I'm sure - enable the big button

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
E"main(int button, int state)
{
  btnSaveToDb.enabled = this.state(0);
}" 0
19 31
"radioSaveOption"
""
1 30 570 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 568 272 632
3
T 
1
LANG:1 15 Save everything

1 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 16 Only save values

0 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 20 Only save alert conf

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
