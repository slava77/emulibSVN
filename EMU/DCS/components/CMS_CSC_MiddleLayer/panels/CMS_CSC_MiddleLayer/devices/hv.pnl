V 11
1
LANG:1 0 
PANEL,-1 -1 979 841 N "_3DFace" 2
"$1"
"$2"
"main()
{
  
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    fwCU_connectOperationMode(\"accessPrivilegesChangedCB\", $1 + \"::\" + $2);
    if (emu_checkException(ex)) { return; }
  }
  //=========================  
  
  dyn_string ex;
//  deviceParams = emuui_parseParameterString($deviceParams, ex);
//  deviceParams = emuui_parseParameterString(\"side=M;station=3;ring=2;chamberNumber=28\", ex);
  deviceParams = emu_fsmNodeToDeviceParams($2, ex);
  if (emu_checkException(ex)) { return; }

  initConsts();  
  
  // HV status colors and meaning
  hvStatusColors = emuui_getMapping(\"hvStatusColors\", ex);
  if (emu_checkException(ex)) { return; }
  hvStatusTexts = emuui_getMapping(\"hvChannelStatusMeaning\", ex);
  if (emu_checkException(ex)) { return; }
  hvModuleStatusTexts = emuui_getMapping(\"hvModuleStatusMeaning\", ex);
  if (emu_checkException(ex)) { return; }
  
  // Module status
  string moduleStatusDp = emuui_getDpName(\"HV_moduleStatus\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // channel fsm states
  string channelFsmStatesDp = emuui_getDpName(\"HV_channel_fsm_states\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // module type and master module type (if 0 - indicates an LV or signal cable problem)
  string moduleTypeDp = emuui_getDpName(\"HV_moduleType\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterTypeDp = emuui_getDpName(\"HV_masterType\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // all channels
  dyn_string channelFastMonDps = emuhv_getAllChannelDps(deviceParams, EMUHV_DP_POSTFIX_FAST_MON, ex);
  if (emu_checkException(ex)) { return; }
  dyn_string channelSlowMonDps = emuhv_getAllChannelDps(deviceParams, EMUHV_DP_POSTFIX_SLOW_MON, ex);
  if (emu_checkException(ex)) { return; }
  for (int i=1; i <= dynlen(channelFastMonDps); i++) {
    tableChannels.appendLine(\"chn\", i);
  }
  
  // make fast mon data DPs
  dyn_dyn_string channelFastMonDataDps;
  for (int i=1; i <= dynlen(channelFastMonDps); i++) {
    dyn_string dataDps;
    for (int j=1; j <= dynlen(fastMonDpeNames); j++) {
      dynAppend(dataDps, channelFastMonDps[i] + \".\" + fastMonDpeNames[j]);
    }
    dynAppend(channelFastMonDataDps, dataDps);
  }

  // make slow mon data DPs
  dyn_dyn_string channelSlowMonDataDps;
  for (int i=1; i <= dynlen(channelSlowMonDps); i++) {
    dyn_string dataDps;
    for (int j=1; j <= dynlen(slowMonDpeNames); j++) {
      dynAppend(dataDps, channelSlowMonDps[i] + \".\" + slowMonDpeNames[j]);
    }
    dynAppend(channelSlowMonDataDps, dataDps);
  }

  // find out the \"disconnected devices\" DP to be able to show the \"no communication\" warning
  if (dynlen(channelFastMonDps) > 1) {
    deviceParams[\"sysName\"] = emuui_getSystemName(channelFastMonDps[1]);
  }
  dyn_string disconnectedDevicesDps = emuui_getDpNames(\"disconnected_devices\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // get the FSM node for the HV of this chamber (this will be used in \"no communication\" warning update
  hvFsmNode = emuui_getFsmNode(\"chamber_high_voltage\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // check if the node is disabled, if so - then paint everything in gray and set allGrayMode to true
  string domain = hvFsmNode;
  string object = _fwCU_getNodeObj(domain);
  string duMode = fwFsmUi_getDUMode(domain, object);
  if (duMode == \"Disabled\") {
    allGrayMode = true;
  }

  // get master channel status DP
  string masterIdDp = emuui_getDpName(\"HV_masterId\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterStatusDp = emuui_getDpName(\"HV_masterStatus\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterChannelStatusDp = emuui_getDpName(\"HV_masterChannelStatus\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  string masterId;
  dpGet(masterIdDp, masterId);
  
  lblMasterInfo.text = \"ID=\" + masterId;

  // init gui and connect everything
  initGui(dynlen(channelFastMonDps), ex);
  if (emu_checkException(ex)) { return; }

  // disabled channels
  if (!allGrayMode) {
    dpConnect(\"updateFsmStatesCB\", true, channelFsmStatesDp);
  }
  // disconnected devices DP
  dpConnect(\"updateDisconnectedWarningCB\", true, disconnectedDevicesDps);
  
  // data
  for (int i=1; i <= dynlen(channelFastMonDataDps); i++) {
    dpConnect(\"updateChannelDataCB\", true, channelFastMonDataDps[i]);
  }
  for (int i=1; i <= dynlen(channelSlowMonDataDps); i++) {
    dpConnect(\"updateChannelDataCB\", true, channelSlowMonDataDps[i]);
  }
  
  // module status
  dpConnect(\"updateModuleStatusCB\", true, moduleStatusDp);
  dpConnect(\"updateMasterStatusCB\", true, masterStatusDp);
  // master channel status
  dpConnect(\"updateMasterChannelStatusCB\", true, masterChannelStatusDp);
  // module type - used to detect LV or cabling issues
  dpConnect(\"updateModuleTypeCB\", true, moduleTypeDp);
  dpConnect(\"updateModuleTypeCB\", true, masterTypeDp); // use the same callback - warning is the same anyway
  
  startThread(\"getDataThread\"); // start the data refresh thread
}

void initGui(int channelCount, dyn_string &ex) {
  lblTitle.text = lblTitle.text + emuui_getChamberName(deviceParams);
  emuui_fillTable(tableChannels.name, \"loading..\", \"\", false, makeDynInt(0));
  emuui_tableCompact(tableChannels.name);
  tableChannels.deleteSelection();
  
  // set the module info
  string moduleIdDp = emuui_getDpName(\"HV_moduleId\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string moduleId;
  dpGet(moduleIdDp, moduleId);  
  lblModuleInfo.text = \"ID=\" + moduleId;
  
  if (allGrayMode) {
    //paint everything in gray
    lblModuleStatus.backCol = \"FwEquipmentDisabled\";
    lblMasterStatus.backCol = \"FwEquipmentDisabled\";    
    lblMasterChannelStatus.backCol = \"FwEquipmentDisabled\";
    for (int i=0; i < tableChannels.lineCount(); i++) {
      for (int j=0; j < tableChannels.columnCount(); j++) {
        tableChannels.cellBackColRC(i, tableChannels.columnToName(j), \"FwEquipmentDisabled\");
      }
    }
  }
}

void initConsts() {
  dynAppend(fastMonDpeNames, \"vmon\");
  dynAppend(fastMonDpeNames, \"imon\");
  dynAppend(fastMonDpeNames, \"status\");
  dynAppend(slowMonDpeNames, \"vset\");
  dynAppend(slowMonDpeNames, \"ramp_up\");
  dynAppend(slowMonDpeNames, \"ramp_down\");
  dynAppend(slowMonDpeNames, \"imax\");
  dynAppend(slowMonDpeNames, \"imax_ramp\");
  dynAppend(slowMonDpeNames, \"vov\");
  dynAppend(slowMonDpeNames, \"vtrip_delay\");
  dynAppend(slowMonDpeNames, \"itrip_delay\");
  dynAppend(slowMonDpeNames, \"itrip\");
  dynAppend(slowMonDpeNames, \"vtrip\");
  dynAppend(slowMonDpeNames, \"vmon_threshold\");
  dynAppend(slowMonDpeNames, \"imon_threshold\");
  dynAppend(slowMonDpeNames, \"is_on\");
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString(\"btnChannelForceOn\", \"btnChannelDisableEnable\",     // force on and enable/disable channel
                                 \"btnModuleOFF\", \"btnModuleON\"/*, \"btnDisableEnable\"*/); //  on/off whole board, disable/enable whole board
  expertControlButtons = makeDynString();
}" 0
 "main()
{
  emuui_destroyReferences(references);
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"CMS_CSC_common/emu_common.ctl\"
#uses \"CMS_CSC_common/emu_math.ctl\"
#uses \"CMS_CSC_common/emu_accessControl.ctl\"
#uses \"CMS_CSC_common/emu_alert.ctl\"
#uses \"CMS_CSC_MiddleLayer/emu_hv.ctl\"
#uses \"CMS_CSC_UI/emuui_deviceInfo.ctl\"
#uses \"CMS_CSC_UI/emuui_graphics.ctl\"

//some panel-wide constants
mapping deviceParams;
dyn_string fastMonDpeNames;
dyn_string slowMonDpeNames;
mapping hvStatusColors;
mapping hvStatusTexts;
mapping hvModuleStatusTexts;
dyn_string currentFsmStates;
dyn_int disabledChannels;
string hvFsmNode;
dyn_string references;
bool allGrayMode; // this flag is true when the whole LV FSM node is disabled - then back color of the tables is always gray
bool noCommunication;
int syncSemaphore; // used in synchronized blocks to do a panel-wide synchronization on certain blocks (mainly involving dpSeting important DPs)

int selectedChannel = -1;

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;

const int EMU_HVPANEL_DATA_REFRESH_INTERVAL = 15; // interval of time to wait between data refresh cycles (seconds)


/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl($1 + \"::\" + $2, controlButtons, true, \"lblNoControl\", expertControlButtons, true);
}


/** Callback function for showing data of a channel. */
void updateChannelDataCB(dyn_string dpList, dyn_anytype data) {
  lblLastUpdate.text = emuui_getLastUpdateTime(dpList[1]);
  
  if (noCommunication) { return; } // don't update the table - let the \"???\" stay there
  
  for (int i=1; i <= dynlen(dpList); i++) {
    dyn_string split = strsplit(dpSubStr(dpList[i], DPSUB_DP_EL), \".\");
    string column = split[dynlen(split)];
    string ch = split[dynlen(split) - 1];
    strreplace(ch, \"ch\", \"\");
    int chNum = (int) ch;
    chNum--; // make it 0-based for table row addressing (in dpname channel indices are 1-based).
    
    string strValue;
    if (column == \"status\") {
      strValue = hvStatusTexts[(string)data[i]];
    } else {
      int type = getType(data[i]);
      if (((type == INT_VAR) || (type == FLOAT_VAR)) && (data[i] < 10)) {
        sprintf(strValue, \"%.1f\", data[i]);
      } else {
        sprintf(strValue, \"%d\", data[i]);
      }
    }
    tableChannels.cellValueRC(chNum, column, strValue);
  }
}

/** Updates channel status (also paints the rows with appropriate color). */
void updateFsmStatesCB(string dp, dyn_string fsmStates) {
  if (noCommunication) { return; } // don't update the table - let the \"???\" and grey color stay there
  
  currentFsmStates = fsmStates;
  dyn_int disabledChannelsTmp;
  for (int i=1; i <= dynlen(fsmStates); i++) {
    string state = fsmStates[i];
    string color = \"FwStateAttention1\";
    if (strpos(state, EMUHV_FSM_STATE_DISABLED) >= 0) {
      color = \"FwEquipmentDisabled\";
      dynAppend(disabledChannelsTmp, i);
    } else if (strpos(state, EMUHV_FSM_STATE_OFF) >= 0) {
      color = \"FwStateOKNotPhysics\";
    } else if (strpos(state, EMUHV_FSM_STATE_ERROR) >= 0) {
      color = \"FwStateAttention3\";
    } else if ((strpos(state, EMUHV_FSM_STATE_ON) >= 0) ||
               (strpos(state, EMUHV_FSM_STATE_STANDBY) >= 0)) {
      color = \"FwStateOKPhysics\";
    }
    
    if (!allGrayMode) { 
      emuui_tableRowBackColor(tableChannels.name, i - 1, color);
    }
  }
  
  // update the disabled channels label
  if (emu_compareArrays(disabledChannels, disabledChannelsTmp)) {
    disabledChannels = disabledChannelsTmp;
    if (dynlen(disabledChannels) > 0) {
      string channelsStr;
      int count = dynlen(disabledChannels);
      for (int i=1; i <= count; i++) {
        int channelNum = disabledChannels[i];
        // construct a label text
        channelsStr += \"#\" + channelNum;
        if (i != count) { // not the last one
          channelsStr += \", \";
        }
      }
      lblDisabledChannels.text = channelsStr;
    } else {
      lblDisabledChannels.text = \"none\";
    }
  }
}

/** if disconnectedDevices contains hvFsmNode then \"no communication\" warning is shown, otherwise it's hidden. */
void updateDisconnectedWarningCB(dyn_string dps, dyn_string disconnectedDevices) {
  bool isDisconnected = false;
  for (int i=1; i <= dynlen(disconnectedDevices); i++) {
    if (strpos(disconnectedDevices[i], hvFsmNode) >= 0) {
      isDisconnected = true;
      break;
    }
  }
  noCommunication = isDisconnected;
  if (noCommunication) {
    warnNoHvCommunication.visible = true;
  } else {
    warnNoHvCommunication.visible = false;
  }
  
  // no communication - display ??? for all values
  if (noCommunication) {
    emuui_questionOutTable(tableChannels.name(), true, makeDynInt(0));
  }
}

/** If module type comes 0 - this is an indication of LV or signal cable problem - the warning will be shown. */
void updateModuleTypeCB(string dpName, int type) {
  bool lvProblem = (type == 0);
  if (lvProblem) {
    warnLV.visible = true;
  } else {
    warnLV.visible = false;
  }
}

/** Updates module status. */
void updateModuleStatusCB(string dpName, int status) {
  string statusText = hvModuleStatusTexts[(string)status];
  string statusColor = hvStatusColors[statusText];
  
  lblModuleStatus.text = statusText;
  if (!allGrayMode) {
    lblModuleStatus.backCol = statusColor;
  }
}

/** Updates master status. */
void updateMasterStatusCB(string dpName, int status) {
  string statusText = hvModuleStatusTexts[(string)status];
  string statusColor = hvStatusColors[statusText];
  
  lblMasterStatus.text = statusText;
  if (!allGrayMode) {
    lblMasterStatus.backCol = statusColor;
  }
}

/** Updates master channel status. */
void updateMasterChannelStatusCB(string dpName, int status) {
  string statusText = hvStatusTexts[(string)status];
  string statusColor = hvStatusColors[statusText];
  
  lblMasterChannelStatus.text = statusText;
  if (!allGrayMode) {
    lblMasterChannelStatus.backCol = statusColor;
  }
}

void channelSelectionChanged(int channelNum) {
  selectedChannel = channelNum;
  if (channelNum == -1) {
    lblSelectedChannel.text = \"none\";
  } else {
    lblSelectedChannel.text = channelNum;
  }
  
  bool isChannelDisabled = dynContains(disabledChannels, channelNum);
  bool enableControl = (channelNum != -1);
  btnChannelDisableEnable.enabled = enableControl;
  btnChannelForceOn.enabled = enableControl && (!isChannelDisabled);
  
  if (isChannelDisabled) {
    btnChannelDisableEnable.text = \"Enable\";
  } else {
    btnChannelDisableEnable.text = \"Disable\";
  }
}

void getDataThread() {
  while(true) {
    dyn_string ex;
    emuhv_requestData(deviceParams, ex);
    if (emu_checkException(ex)) { return; }
    delay(EMU_HVPANEL_DATA_REFRESH_INTERVAL);
  }
}" 0
 2
"CBRef" "1"
"EClose" "main()
{
  emuui_destroyReferences(references);
  PanelOff();
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 4
"lblTitle"
""
1 300 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 300 10 403 30
0 2 2 "0s" 0 0 0 192 0 0  300 10 1
1
LANG:1 26 Arial,12,-1,5,75,0,0,0,0,0
0 1
LANG:1 14 High Voltage, 
2 7
"lblForDisabledChannels"
""
1 30 640 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 30 640 137 655
0 2 2 "0s" 0 0 0 192 0 0  30 640 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 18 Disabled channels:
2 8
"lblDisabledChannels"
""
1 140 640 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  this.text = \"\";
}" 0
 E 0 1 1 2 1 E U  1 E 140 640 185 655
0 2 2 "0s" 0 0 0 192 0 0  140 640 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 list here
2 10
"warnNoHvCommunication"
""
1 450 800 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 450 800 935 814
1 2 2 "0s" 0 0 0 65 0 0  450 800 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 36 No Communication with this HV module
2 12
"warnLV"
""
1 450 780 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 450 780 935 794
1 2 2 "0s" 0 0 0 65 0 0  450 780 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 56 High Voltage LV or Signal Cable problem - call HV expert
2 13
"lblLastUpdate"
""
1 730 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 730 10 788 25
0 2 2 "0s" 0 0 0 192 0 0  730 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 timestamp
2 14
"PRIMITIVE_TEXT6"
""
1 660 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 660 10 729 25
0 2 2 "0s" 0 0 0 192 0 0  660 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 12 Last update:
2 18
"PRIMITIVE_TEXT7"
""
1 430 710 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 710 513 725
0 2 2 "0s" 0 0 0 192 0 0  430 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 Module Status:
2 19
"PRIMITIVE_TEXT8"
""
1 760 710 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 760 710 889 725
0 2 2 "0s" 0 0 0 192 0 0  760 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 22 Master Channel Status:
2 22
"lblModuleStatus"
""
1 520 710 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 520 710 580 724
1 2 2 "0s" 0 0 0 65 0 0  520 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 LOADING...
2 26
"lblMasterChannelStatus"
""
1 890 710 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
39 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 890 710 950 724
1 2 2 "0s" 0 0 0 65 0 0  890 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 LOADING...
2 27
"lblForModuleInfo"
""
1 430 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
40 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 740 476 755
0 2 2 "0s" 0 0 0 192 0 0  430 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Module: 
2 28
"lblForMasterInfo"
""
1 540 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 540 740 582 755
0 2 2 "0s" 0 0 0 192 0 0  540 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Master:
2 29
"lblModuleInfo"
""
1 480 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 480 740 514 755
0 2 2 "0s" 0 0 0 192 0 0  480 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 ID=##
2 30
"lblMasterInfo"
""
1 5802.937103504249 10732 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 0.964285714285714 0 1 310.357142857143 580 1 E 290 160 324 175
0 2 2 "0s" 0 0 0 192 0 0  290 160 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 ID=##
30 32
"FRAME1"
""
1 10 33 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
45 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 2.909090909090909 0 2.219512195121952 -19.09090909090909 -43.24390243902442 0 E 10 33 341 321
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Channels
25 34
"tableChannels"
""
1 27.65903307888041 -43.11475409836066 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
47 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0  28 58 952 629
"main()
{
  this.tableMode = TABLE_SELECT_LINE;
  this.selectByClick = TABLE_SELECT_LINE;
}" 0
"main(int row, string column, string value)
{
  dyn_int selection = this.getSelectedLines;
  if (dynlen(selection) == 0) {
    channelSelectionChanged(-1);
  } else {
    channelSelectionChanged(selection[1] + 1); // row number = channel number - 1
  }
}" 0
 1 0 1 17 18 "chn" 2 1 0 "s" 1
LANG:1 3 ch#
E
1
LANG:1 0 

35 "vmon" 3 1 0 "s" 1
LANG:1 4 vmon
E
1
LANG:1 0 

46 "imon" 3 1 0 "s" 1
LANG:1 4 imon
E
1
LANG:1 0 

46 "vset" 3 1 0 "s" 1
LANG:1 4 vset
E
1
LANG:1 0 

46 "ramp_up" 3 1 0 "s" 1
LANG:1 5 rmpUp
E
1
LANG:1 0 

50 "ramp_down" 3 1 0 "s" 1
LANG:1 5 rmpDn
E
1
LANG:1 0 

50 "imax" 2 1 0 "s" 1
LANG:1 4 imax
E
1
LANG:1 0 

36 "imax_ramp" 4 1 0 "s" 1
LANG:1 8 imax rmp
E
1
LANG:1 0 

66 "vov" 3 1 0 "s" 1
LANG:1 4 vmax
E
1
LANG:1 0 

46 "itrip" 4 1 0 "s" 1
LANG:1 9 iTrip(uA)
E
1
LANG:1 0 

65 "vtrip" 3 1 0 "s" 1
LANG:1 5 vTrip
E
1
LANG:1 0 

45 "itrip_delay" 3 1 0 "s" 1
LANG:1 7 iTripDl
E
1
LANG:1 0 

53 "vtrip_delay" 4 1 0 "s" 1
LANG:1 7 vTripDl
E
1
LANG:1 0 

56 "vmon_threshold" 6 1 0 "s" 1
LANG:1 10 vMonThresh
E
1
LANG:1 0 

84 "imon_threshold" 5 1 0 "s" 1
LANG:1 9 iMonThrsh
E
1
LANG:1 0 

76 "is_on" 3 1 0 "s" 1
LANG:1 3 On?
E
1
LANG:1 0 

47 "status" 5 1 0 "s" 1
LANG:1 6 Status
E
1
LANG:1 0 

70 
18 18 "3" 1 1
LANG:1 2 #1
"?" 1 1
LANG:1 2 #2
"4" 1 1
LANG:1 2 #3
"5" 1 1
LANG:1 2 #4
"6" 1 1
LANG:1 2 #5
"7" 1 1
LANG:1 2 #6
"8" 1 1
LANG:1 2 #7
"9" 1 1
LANG:1 2 #8
"10" 1 1
LANG:1 2 #9
"11" 1 1
LANG:1 3 #10
"12" 1 1
LANG:1 3 #11
"13" 1 1
LANG:1 3 #12
"14" 1 1
LANG:1 3 #13
"15" 1 1
LANG:1 3 #14
"16" 1 1
LANG:1 3 #15
"17" 1 1
LANG:1 3 #16
"18" 1 1
LANG:1 3 #17
"19" 1 1
LANG:1 3 #18
20 164
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 37
"PRIMITIVE_TEXT11"
""
1 30 710 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
50 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 30 710 130 725
0 2 2 "0s" 0 0 0 192 0 0  30 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Selected channel:
2 41
"lblSelectedChannel"
""
1 130 708 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
54 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 130 708 167 727
0 2 2 "0s" 0 0 0 192 0 0  130 708 1
1
LANG:1 26 Arial,11,-1,5,75,0,0,0,0,0
0 1
LANG:1 4 none
13 42
"btnChannelForceOn"
""
1 30 740 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
55 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  28 738 172 772

T 
1
LANG:1 8 Force ON
"main()
{
  if (selectedChannel == -1) { return; } // should not happen (since the button should be disabled in that case), but just in case
  
  dyn_string ex;
  mapping channelDeviceParams = deviceParams;
  channelDeviceParams[\"channelNumber\"] = selectedChannel;
  
  string channelDp = emuhv_getHvChannelDp(channelDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  int state, status;
  dpGet(channelDp + \".state\", state,
        channelDp + \".status\", status);
  
  // switch it off if it's tripped
  if ((state == 0) && (status >= 4)) {
    emuhv_sendChannelCommand(channelDeviceParams, EMUHV_COMMAND_OFF, ex);
    if (emu_checkException(ex)) { return; }
  }
  
  // turn it back on
  emuhv_sendChannelCommand(channelDeviceParams, EMUHV_COMMAND_ON, ex);
  
  // reset the channel selection
  tableChannels.deleteSelection();
  channelSelectionChanged(-1);

  // refresh the data now  
  delay(1, 0);
  emuhv_requestData(deviceParams, ex);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 43
"btnChannelDisableEnable"
""
1 30 780 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
56 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  28 778 172 812

T 
1
LANG:1 7 Disable
"main()
{
  if (selectedChannel == -1) { return; } // should not happen (since the button should be disabled in that case), but just in case
  
  dyn_string ex;
  mapping channelDeviceParams = deviceParams;
  channelDeviceParams[\"channelNumber\"] = selectedChannel;
  
  synchronized (syncSemaphore) {
    if (this.text == \"Disable\") {
      emuhv_enableDisableChannel(channelDeviceParams, false, ex);
      if (emu_checkException(ex)) { return; }
    } else if (this.text == \"Enable\") {
      emuhv_enableDisableChannel(channelDeviceParams, true, ex);
      if (emu_checkException(ex)) { return; }
    }  
  }
  
  // reset the channel selection
  tableChannels.deleteSelection();
  channelSelectionChanged(-1);

  // refresh the data now  
  delay(1, 0);
  emuhv_requestData(deviceParams, ex);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
30 44
"FRAME2"
""
1 590 763 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
57 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.9 0 1.282051282051282 -521 -298.2051282051283 0 E 590 763 791 881
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 18 HV Channel Control
30 45
"FRAME3"
""
1 260 33 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
58 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 2.8 0 2.63157894736842 -318.0000000000001 593.1578947368421 0 E 260 33 461 91
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Overview
30 46
"FRAME4"
""
1 590 763 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
59 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.9 0 1.282051282051282 -321 -298.2051282051283 0 E 590 763 791 881
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 18 Chamber HV Control
13 48
"btnModuleOFF"
""
1 230 740 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
61 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 738 372 772

T 
1
LANG:1 10 Switch OFF
"main()
{
  dyn_string ex;
  string hvStatusDp = emuui_getDpName(\"HV_status\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dpSetWait(hvStatusDp, 0);
}" 0
 E E E
13 49
"btnModuleON"
""
1 230 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
62 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 778 372 812

T 
1
LANG:1 9 Switch ON
"main()
{
  dyn_string ex;
  string hvStatusDp = emuui_getDpName(\"HV_status\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dpSetWait(hvStatusDp, 2);
}" 0
 E E E
2 50
"lblNoControl"
""
1 558 322 E E E 1 E 1 E N "_3DText" E N "FwStateAttention1" E E
 E E
63 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 30 760 375 777
1 2 2 "0s" 0 0 0 65 0 0  30 760 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
13 51
"btnDisableEnable"
""
1 230 820 E E E 0 E 0 E N "_ButtonText" E N "_Button" E E
 E E
64 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 818 372 842

T 
1
LANG:1 7 Disable
"main()
{
  if (selectedChannel == -1) { return; } // should not happen (since the button should be disabled in that case), but just in case
}" 0
 E E E
2 52
"PRIMITIVE_TEXT12"
""
1 600 710 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
65 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 600 710 679 725
0 2 2 "0s" 0 0 0 192 0 0  600 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 Master Status:
2 53
"lblMasterStatus"
""
1 680 710 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
66 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 680 710 740 724
1 2 2 "0s" 0 0 0 65 0 0  680 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 LOADING...
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
