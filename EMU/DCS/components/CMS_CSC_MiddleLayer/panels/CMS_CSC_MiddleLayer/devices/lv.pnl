V 11
1
LANG:1 0 
PANEL,-1 -1 810 506 N "_3DFace" 2
"$1"
"$2"
"main()
{
  
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    fwCU_connectOperationMode(\"accessPrivilegesChangedCB\", $1 + \"::\" + $2);
    if (emu_checkException(ex)) { return; }
  }
  //=========================  
  
  dyn_string ex;
  deviceParams = emu_fsmNodeToDeviceParams($2, ex);
  if (emu_checkException(ex)) { return; }
  
  isMe11 = ((deviceParams[\"station\"] == 1) && (deviceParams[\"ring\"] == 1));
  initChannelsCombo();

  string deviceParamsDollar = \"$deviceParams:\" + emuui_deviceParamsToString(deviceParams);
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/tooltip_objects/refTooltipObj_chamber_low_voltage.pnl\",
            \"refMon\",
            makeDynString(deviceParamsDollar),
            20, 100, 0, 1, 1);
  
  lvDp = dpSubStr(emuui_getDpName(\"chamber_LV_disabled_channels\", deviceParams, ex), DPSUB_SYS_DP);
  if (emu_checkException(ex)) { return; }
  dpConnect(\"disabledChannelsUpdatedCB\", true, lvDp + \".disabled_channels\");
  
  //CCB bits
  ccbBitsDp = emuui_getDpName(\"chamber_ccb_bits\", deviceParams, ex);
  dpConnect(\"updateCcbBitsCB\", true, ccbBitsDp);
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString(\"btnEnableDisable\");
  expertControlButtons = makeDynString();
}

void initChannelsCombo() {
  if (isMe11) {
    comboChannel.deleteAllItems();
    for (int i=1; i <= 7; i++) {
      comboChannel.appendItem(\"DCFEB \" + i + \" 3.0V\");
      comboChannel.appendItem(\"DCFEB \" + i + \" 4.0V\");
      comboChannel.appendItem(\"DCFEB \" + i + \" 5.5V\");
      comboChannel.appendItem(\"DCFEB_SYSMON \" + i + \" vcore\");
      comboChannel.appendItem(\"DCFEB_SYSMON \" + i + \" vaux1\");
    }
    comboChannel.appendItem(\"ALCT 1.8V\");
    comboChannel.appendItem(\"ALCT 3.3V\");
    comboChannel.appendItem(\"ALCT 5.5V\");
    comboChannel.appendItem(\"ALCT 5.6V\");
    
    comboChannel.appendItem(\"LVDB 7vAnalog\");
    comboChannel.appendItem(\"LVDB 7vDigital\");
  }
}" 0
 "main()
{
  emuui_destroyReferences(references);
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"CMS_CSC_common/emu_accessControl.ctl\"
#uses \"CMS_CSC_MiddleLayer/emu_x2p.ctl\"

//some panel-wide constants and variables
mapping deviceParams;
string lvDp;
dyn_string disabledChannels;
dyn_string selectedChannels;
bool isSelectedChannelEnabled;
bool isCcbBitsEnabled = true;
string ccbBitsDp;

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;

bool isMe11;

/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl($1 + \"::\" + $2, controlButtons, true, \"lblNoControl\", expertControlButtons, true);
}

void disabledChannelsUpdatedCB(string dp, dyn_string disChan) {
  disabledChannels = disChan;
  emu_info(\"disabled channels: \");
  emu_info(disChan);
  isCcbBitsEnabled = !dynContains(disChan, ccbBitsDp);
  if (isCcbBitsEnabled) {
    btnEnableDisableCcbBits.text = \"Disable\";
  } else {
    btnEnableDisableCcbBits.text = \"Enable\";
  }
}

void channelSelectionUpdated() {
  dynClear(selectedChannels);
  
  string name = comboChannel.text;
  if (strpos(name, \"---\") >= 0) {
    selectedChannel = \"\";
    isSelectedChannelEnabled = false;
    btnEnableDisable.enabled = false;
    return;
  } else {
    dyn_string split = strsplit(name, \" \");
    string board = strtolower(split[1]);
    int boardNum;
    string ch;
    if ((board == \"cfeb\") || (board == \"dcfeb\")) {
      boardNum = split[2];
      ch = split[3]; //e.g. 3.3V
    } else if (board == \"alct\") {
      ch = split[2];
    }
    strreplace(ch, \".\", \"\");
    strreplace(ch, \"V\", \"\");
    
    dyn_string chDps;
    if ((board == \"cfeb\") || (board == \"dcfeb\")) {
      chDps = dpNames(lvDp + \"/Mon.\" + board + \".*\" + ch + \".v\" + boardNum);
    } else if (board == \"alct\") {
      chDps = dpNames(lvDp + \"/Mon.\" + board + \".*\" + ch);
    }
    
    for (int i=1; i <= dynlen(chDps); i++) {
      dynAppend(selectedChannels, dpSubStr(chDps[i], DPSUB_SYS_DP_EL));
    }
    
    isSelectedChannelEnabled = !dynContains(disabledChannels, selectedChannels[1]);
    
    if (isSelectedChannelEnabled) {
      btnEnableDisable.text = \"Disable\";
    } else {
      btnEnableDisable.text = \"Enable\";
    }
    btnEnableDisable.enabled = true;
  }
  emu_debug(\"selected channels: \" + selectedChannels);
}

// Call-back function which updates the CCB bits and updates the GUI. */.
void updateCcbBitsCB(string dp, int bits) {
  //ALCT
  if (bits & EMU_X2P_CCB_BITS_ALCT) {
    lblCcbBitsAlct.text = \"ALCT not configured\";
    lblCcbBitsAlct.backCol = \"FwStateAttention3\";
  } else {
    lblCcbBitsAlct.text = \"ALCT configured\";
    lblCcbBitsAlct.backCol = \"FwStateOKPhysics\";
  }
  
  //TMB
  if (bits & EMU_X2P_CCB_BITS_TMB) {
    lblCcbBitsTmb.text = \"TMB not configured\";
    lblCcbBitsTmb.backCol = \"FwStateAttention3\";
  } else {
    lblCcbBitsTmb.text = \"TMB configured\";
    lblCcbBitsTmb.backCol = \"FwStateOKPhysics\";
  }
  
  //DMB & CFEBs
  if (bits & EMU_X2P_CCB_BITS_DMB_CFEB) {
    lblCcbBitsDmbCfeb.text = \"DMB or CFEB not configured\";
    lblCcbBitsDmbCfeb.backCol = \"FwStateAttention3\";
  } else {
    lblCcbBitsDmbCfeb.text = \"DMB and CFEB configured\";
    lblCcbBitsDmbCfeb.backCol = \"FwStateOKPhysics\";
  }
  
  //CCB
  if (bits & EMU_X2P_CCB_BITS_CCB) {
    lblCcbBitsCcb.text = \"CCB not configured\";
    lblCcbBitsCcb.backCol = \"FwStateAttention3\";
  } else {
    lblCcbBitsCcb.text = \"CCB configured\";
    lblCcbBitsCcb.backCol = \"FwStateOKPhysics\";
  }
  
  if (!isCcbBitsEnabled) {
    lblCcbBitsAlct.backCol = \"FwEquipmentDisabled\";
    lblCcbBitsTmb.backCol = \"FwEquipmentDisabled\";
    lblCcbBitsDmbCfeb.backCol = \"FwEquipmentDisabled\";
    lblCcbBitsCcb.backCol = \"FwEquipmentDisabled\";
  }
}

" 0
 2
"CBRef" "1"
"EClose" "main()
{
  emuui_destroyReferences(references);
  PanelOff();
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 26
"lblNoControl"
""
1 558 42 E E E 1 E 1 E N "_3DText" E N "FwStateAttention1" E E
 E E
36 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 30 480 375 497
1 2 2 "0s" 0 0 0 65 0 0  30 480 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
22 27
"comboChannel"
""
1 430 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
37 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  428 28 622 56
20
1
LANG:1 24 --- choose a channel ---

0
1
LANG:1 11 CFEB 1 3.3V

0
1
LANG:1 11 CFEB 1 5.0V

0
1
LANG:1 11 CFEB 1 6.0V

0
1
LANG:1 11 CFEB 2 3.3V

0
1
LANG:1 11 CFEB 2 5.0V

0
1
LANG:1 11 CFEB 2 6.0V

0
1
LANG:1 11 CFEB 3 3.3V

0
1
LANG:1 11 CFEB 3 5.0V

0
1
LANG:1 11 CFEB 3 6.0V

0
1
LANG:1 11 CFEB 4 3.3V

0
1
LANG:1 11 CFEB 4 5.0V

0
1
LANG:1 11 CFEB 4 6.0V

0
1
LANG:1 11 CFEB 5 3.3V

0
1
LANG:1 11 CFEB 5 5.0V

0
1
LANG:1 11 CFEB 5 6.0V

0
1
LANG:1 9 ALCT 1.8V

0
1
LANG:1 9 ALCT 3.3V

0
1
LANG:1 9 ALCT 5.5V

0
1
LANG:1 9 ALCT 5.6V

0

E
"main()
{
  channelSelectionUpdated();
}" 0

E
 0 0
13 28
"btnEnableDisable"
""
1 430 60 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
38 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  428 58 622 92

T 
1
LANG:1 6 Enable
"main()
{
  dyn_string ex;
  for (int i=1; i <= dynlen(selectedChannels); i++) {
    emux2p_enableDisableChannel(selectedChannels[i], !isSelectedChannelEnabled, ex);
    if (emu_checkException(ex)) { return; }
  }
  delay(0, 200); // so that disabled channels are updated first..
  channelSelectionUpdated();
}" 0
 E E E
30 29
"FRAME1"
""
1 410 12 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
39 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 0.859375 0 -10.3125 0 E 410 12 641 141
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Control
30 30
"FRAME2"
""
1 410 122 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
40 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 1.053191489361702 0 -6.489361702127669 0 E 410 122 641 311
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 CCB bits
2 31
"lblCcbBitsAlct"
""
1 430 150 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 150 620 166
1 2 2 "0s" 0 0 0 65 0 0  430 150 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 15 ALCT configured
2 32
"lblCcbBitsTmb"
""
1 430 180 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 180 620 196
1 2 2 "0s" 0 0 0 65 0 0  430 180 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 TMB configured
2 33
"lblCcbBitsDmbCfeb"
""
1 430 210 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 210 620 226
1 2 2 "0s" 0 0 0 65 0 0  430 210 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 24 DMB and CFEBs configured
2 34
"lblCcbBitsCcb"
""
1 430 240 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 240 620 256
1 2 2 "0s" 0 0 0 65 0 0  430 240 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 CCB configured
13 35
"btnEnableDisableCcbBits"
""
1 430 270 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  428 268 622 302

T 
1
LANG:1 7 Disable
"main()
{
  dyn_string ex;

  emux2p_enableDisableChannel(ccbBitsDp, !isCcbBitsEnabled, ex);
  if (emu_checkException(ex)) { return; }

  delay(0, 200); // so that disabled channels are updated first..
  
  int bits;
  dpGet(ccbBitsDp, bits);
  updateCcbBitsCB(ccbBitsDp, bits);
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
