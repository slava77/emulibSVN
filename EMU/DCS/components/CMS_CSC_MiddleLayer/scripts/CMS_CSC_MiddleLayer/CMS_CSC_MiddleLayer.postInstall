#uses "CMS_CSC_common/emu_common.ctl"
#uses "CMS_CSC_common/emu_deviceInfo.ctl"
#uses "CMS_CSC_MiddleLayer/setup/fsmCreate.ctl"
#uses "fwInstallationUtils.ctl"

const int DIM_MANAGER_NUM_START = 30;
const string COMPONENT_NAME = "CMS_CSC_MiddleLayer";

main() {

  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Starting");
  
  dyn_string ex;
//   emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Switching to Wiener simulation driver");
//   fwInstallationUtils_switchSimDriver(FALSE, "PVSS00opc", 14);

  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Loading configurations...");
  int numConfsChanged = fwInstallationUtils_loadConfigurations(COMPONENT_NAME, ex);
  if (emu_checkException(ex)) { emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: aborted"); emu_info(ex); return; }
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Finished loading configurations");
  
  if (numConfsChanged == 0) {
    emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: no configurations have changed so they were not reloaded. Returning, because there's nothing else to do..");
    return;
  }

//   emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Switching to Wiener real driver");
//   fwInstallationUtils_switchSimDriver(TRUE, "PVSS00opc", 14);
  
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Creating FSM...");
  emuFsm_createMiddleLayerFsm(ex);
  if (emu_checkException(ex)) { emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: aborted"); emu_info(ex); return; }
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Finished creating FSM");
  
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Creating DIM managers");
  createAllDimManagers(ex);
  if (emu_checkException(ex)) { emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: aborted"); emu_info(ex); return; }
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Finished creating DIM managers");
  
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Creating CTRL managers from the installation DB");
  fwInstallationUtils_appendManagers(COMPONENT_NAME, ex);
  if (emu_checkException(ex)) { emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: aborted"); emu_info(ex); return; }
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Finished creating CTRL managers from the installation DB");  
  
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Configuring alert classes");
  emuAlert_updateAllAlertClassesForType("CscHvChamber");
  emuAlert_updateAllAlertClassesForType("CscHvPrimary");
  emuAlert_updateAllAlertClassesForType("CscLvChamber");
  emuAlert_updateAllAlertClassesForType("CscTempChamber");
  emuAlert_updateAllAlertClassesForType("CscFedDdu");
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: Finished configuring alert classes");
  
  emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: DONE");
}

void createAllDimManagers(dyn_string &ex) {
  dyn_string configDps = dpNames("DimConfig/{HV,X2P}_*", "_FwDimConfig");
  for (int i=1; i <= dynlen(configDps); i++) {
    string configDp = configDps[i];
    string dns;
    dpGet(configDp + ".ApiParams.dimDnsNode", dns);
    string name = dpSubStr(configDp, DPSUB_DP);
    strreplace(name, "DimConfig/", "");
    int num = DIM_MANAGER_NUM_START + i;
    
    if (dns == "") {
      emu_addError("DIM config " + configDp + " doesn't have a valid DNS set", ex);
      return;
    }
    
    emu_info_postInstall("CMS_CSC_MiddleLayer PostInstall: creating DIM manager for " + name + " with num=" + num);
    fwInstallation_appendManager(TRUE, name, "PVSS00dim", 
                                 "always", 90, 2, 2,
                                 "-num " + num + " -dim_dp_config " + dpSubStr(configDp, DPSUB_DP) + 
                                 " -dim_dns_node " + dns);
  }
}
