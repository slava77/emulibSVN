V 10
1
LANG:1 0 
PANEL,-1 -1 501 462 N "_3DFace" 0
"main()
{
  emucdb_initialize();
}" 0
 E E E E 1 -1 -1 0  50 70
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"PUSH_BUTTON1"
""
1 50 70 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 48 68 172 95

T 
1
LANG:1 11 create tree
"main()
{
  emu_info(\"1\");
  fwFsmTree_addNode(\"FSM\", \"CMS_CSC_LV_CAN2\", \"CSC_LV_NODES\", 1);
  emu_info(\"2\");
  fwFsmTree_addNode(\"CMS_CSC_LV_CAN2\", \"CSC_ME_P1_LV_MRTN\", \"CSC_LV_TREE_NODES\", 0);
  emu_info(\"3\");
  fwFsmTree_addNode(\"CSC_ME_P1_LV_MRTN\", \"CSC_ME_P1_CR1_LV_MRTN\", \"CSC_LV_TREE_NODES\", 0);
  emu_info(\"4\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1\", \"FwWienerMarathon\", 0);
  emu_info(\"5\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel0\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"6\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel1\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"7\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel3\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"8\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel4\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"9\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel5\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"10\");
  fwFsmTree_addNode(\"CSC_ME_P1_CR1_LV_MRTN\", \"Wiener/CAN0/Crate1/Channel7\", \"FwWienerMarathonChannel\", 0);
  emu_info(\"DONE creating!\");

  emu_info(\"generating and refreshing\");
  fwFsmTree_generateAll();
  fwFsmTree_refreshTree();
  emu_info(\"DONE!\");
}" 0
 E E E
13 1
"PUSH_BUTTON2"
""
1 50 110 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 48 108 172 135

T 
1
LANG:1 16 update FSM types
"main()
{
  dyn_string ex;
  _emucdb_updateFsmTypeDefinitions(ex);
  if (emu_checkException(ex)) { return; } 
}
" 0
 E E E
13 3
"PUSH_BUTTON4"
""
1 -20 450 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 -22 448 102 475

T 
1
LANG:1 21 obsolete fsm create..
"main()
{
  dyn_string ex;
  
  //recurse down the tree and get the types of all FSM nodes
  dyn_dyn_string deviceTypes;
  emucdb_getFsmDeviceTypesRecursively(\"FSM\", deviceTypes, ex);
  if (emu_checkException(ex)) { return; }
  emu_info(\"Device types read: \" + deviceTypes);
  
  // now that we have the FSM tree with the corresponding types - we save it to the DB
  emucdb_saveFsmTypes(deviceTypes, ex);
  if (emu_checkException(ex)) { return; }

}

/** Saves the FSM device types to the DB.
  @param deviceTypes          2D array [device] -> [logical_alias][fsm_type]
*/
void emucdb_saveFsmTypes(dyn_dyn_string deviceTypes, dyn_string &exceptionInfo) {
  string typesSql = \"SELECT ID, NAME FROM EMUCDB_FSM_TYPES\";
  string updateSql = \"UPDATE ITEMS SET FSM_TYPE = :id WHERE DPNAME = :dpName\";
  dyn_dyn_mixed data; // the bind variables passed to the update command
  time t0;
  emu_debugFuncStart(\"emucdb_saveFsmTypes\", t0);
  
  // get a fsm types id \"look-up table\"
  dyn_dyn_mixed types = emucdb_executeSql(typesSql, exceptionInfo, true, emucdb_dummyMapping, makeDynInt(INT_VAR, STRING_VAR));
  if (emu_checkException(exceptionInfo)) { return; }
  
  //fill the \"data\" array with all the necessary info
  for (int i=1; i <= dynlen(deviceTypes); i++) {
    string logName = deviceTypes[i][1];
    string typeName = deviceTypes[i][2];
    int typeId;
    
    if (dpExists(logName)) { // it's not a logical name, it's a device name - we change it to the logical
      logName = dpGetAlias(logName);
      emu_info(\"Alias: \" + logName);
    }
    data[i][2] = logName;
    
    //find out type ID
    int index = dynContains(types[2], typeName);
    if (index <= 0) {
      emu_addError(\"FSM type \\\"\" + typeName + \"\\\" doesn't exist in the confDB, please update the FSM_TYPES table.\", exceptionInfo);
      return;
    }
    data[i][1] = types[1][index];
  }
  //update the DB
  emucdb_executeBulk(updateSql, data, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  
  emu_debugFuncEnd(\"emucdb_saveFsmTypes\", t0);
}

/** Recurse down the FSM tree and get types of all the nodes 
    and return them all in deviceTypes parameter (2D array [device] -> [logical_alias][fsm_type]). */
void emucdb_getFsmDeviceTypesRecursively(string parent, dyn_dyn_string &deviceTypes, dyn_string &exceptionInfo, string parentLogicalName = \"\") {
  dyn_string children;
  time t0;
  emu_debugFuncStart(\"emucdb_getFsmDeviceTypesRecursively\", t0);
  
  fwTree_getChildren(parent, children, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  
  //process current node (parent)
  if (parent != \"FSM\") {
    //find out the type and put it into deviceTypes
    string device, type;
    fwTree_getNodeDevice(parent, device, type, exceptionInfo);
    if (emu_checkException(exceptionInfo)) { return; }
    dynAppend(deviceTypes, makeDynString(parentLogicalName, type));
  }
  
  //exit condition
  if (dynlen(children) == 0) {
    emu_debugFuncEnd(\"emucdb_getFsmDeviceTypesRecursively\", t0);
    return;
  }
  
  //recurse down
  for (int i=1; i <= dynlen(children); i++) {
    // if this is a device, so do not prepend any parent stuff to the logical name
    if (dpExists(children[i]) || (strlen(dpAliasToName(children[i])) > 0)) {
      parentLogicalName = children[i];
    } else { // this is an FSM object - that means we prepend parent's name to make a valid name in the logical tree
      if (strlen(parentLogicalName) > 0) {
        parentLogicalName += fwDevice_HIERARCHY_SEPARATOR;
      }
      parentLogicalName += children[i];
    }
    emucdb_getFsmDeviceTypesRecursively(children[i], deviceTypes, exceptionInfo, parentLogicalName);
    if (emu_checkException(exceptionInfo)) { return; }
  }
  
  emu_debugFuncEnd(\"emucdb_getFsmDeviceTypesRecursively\", t0);
}" 0
 E E E
13 4
"PUSH_BUTTON5"
""
1 200 70 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 198 68 322 95

T 
1
LANG:1 8 save fsm
"main()
{
  dyn_string ex;
  emucdb_saveFsm(ex);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 5
"just_test_btn"
""
1 180 310 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 178 308 302 335

T 
1
LANG:1 11 just a test
"main()
{
  dyn_string ex;
//  fwFsm_setObjectLabelPanel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\", \"kreitas\", \"fwFSMuser/fwUi.pnl\", true, true);
  dyn_string data;
  fwTree_getNodeUserData(\"Wiener/CAN0/Crate2\", data, ex);
  if (emu_checkException(ex)) { return; }
  emu_info(\"fwTree_getNodeUserData for crate2: \" + data);
  fwTree_getNodeUserData(\"CSC_ME_P2_CR1_LV_MRTN\", data, ex);
  if (emu_checkException(ex)) { return; }
  emu_info(\"fwTree_getNodeUserData for CSC_ME_P2_CR1_LV_MRTN: \" + data);
  string defLabel = fwFsm_getDefaultLabel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\");
  emu_info(\"Default label: \" + defLabel);
  string defPanel = fwFsm_getDefaultPanel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\");
  emu_info(\"Default panel: \" + defPanel);
  string panel;
  fwUi_getTypePanel(\"FwWienerMarathon\", panel);
  emu_info(\"default type panel: \" + panel);
  
  string fwUiPanel;
  fwUi_getPanel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\", fwUiPanel);
  emu_info(\"fwUi_getPanel for crate2: \" + fwUiPanel);
  string fwUiLabel;
  fwUi_getLabel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\", fwUiLabel);
  emu_info(\"fwUi_getLabel for crate2: \" + fwUiLabel);
  fwFsm_getDefaultLabel(\"CMS_CSC_LV_CAN2\", \"Wiener/CAN0/Crate2\", fwUiLabel);
  emu_info(\"default label for crate2: \" + fwUiLabel);

  fwUi_getPanel(\"CMS_CSC_LV_CAN2\", \"CSC_ME_P2_CR1_LV_MRTN\", fwUiPanel);
  emu_info(\"fwUi_getPanel for CSC_ME_P2_CR1_LV_MRTN: \" + fwUiPanel);
  fwUi_getLabel(\"CMS_CSC_LV_CAN2\", \"CSC_ME_P2_CR1_LV_MRTN\", fwUiLabel);
  emu_info(\"fwUi_getLabel for CSC_ME_P2_CR1_LV_MRTN: \" + fwUiLabel);
  fwFsm_getDefaultLabel(\"CMS_CSC_LV_CAN2\", \"CSC_ME_P2_CR1_LV_MRTN\", fwUiLabel);
  emu_info(\"default label for CSC_ME_P2_CR1_LV_MRTN: \" + fwUiLabel);
  
  string domain, obj;
  fwFsmTree_getObjFromTnode(\"\", \"CMS_CSC_LV_CAN2/CSC_ME_P2_LV_MRTN/CSC_ME_P2_CR1_LV_MRTN\", domain, obj);
  emu_info(\"fwFsmTree_getObjFromTnode, domain: \" + domain + \", obj: \" + obj);
}" 0
 E E E
13 6
"PUSH_BUTTON7"
""
1 200 110 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 198 108 322 135

T 
1
LANG:1 8 load fsm
"main()
{
  string domain = editLoadDomain.text;
  dyn_string ex;
  emucdb_loadFsm(domain, ex, true);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 7
"PUSH_BUTTON8"
""
1 200 150 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 198 148 362 175

T 
1
LANG:1 25 generate FSM from Logical
"main()
{
  dyn_string ex;
  emucdb_generateFSM(ex, true);
  if (emu_checkException(ex)) { return; }
}" 0
 E E E
13 8
"PUSH_BUTTON9"
""
1 160 200 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 158 198 332 225

T 
1
LANG:1 33 delete FSM conf (including types)
"main()
{
  string domain = editLoadDomain.text;
  dyn_string ex;
  emucdb_deleteFsmConf(domain, ex, true);
  if (emu_checkException(ex)) { return; }  
}" 0
 E E E
13 9
"PUSH_BUTTON10"
""
1 160 230 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 158 228 332 255

T 
1
LANG:1 31 delete FSM conf (but not types)
"main()
{
  string domain = editLoadDomain.text;
  dyn_string ex;
  emucdb_deleteFsmConf(domain, ex, false);
  if (emu_checkException(ex)) { return; }  
}" 0
 E E E
13 10
"PUSH_BUTTON11"
""
1 180 340 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 178 338 302 365

T 
1
LANG:1 13 just a test 1
"main()
{
  dyn_string ex;
  ex[1] = \"viens\";
  ex[2] = \"du\";
  ex[3] = \"trys\";
  
  string higherLev = \"higher level msg\";
  dynInsertAt(ex, higherLev, 1);
  emu_checkException(ex);
  emu_checkException(ex); // same as before
  emu_addError(\"addError\", ex);
  emu_addError(\"addError12\", ex);
  emu_addError(\"addError15\", ex);
}" 0
 E E E
13 11
"PUSH_BUTTON12"
""
1 180 370 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 178 368 302 395

T 
1
LANG:1 26 stress test of findSimilar
"main()
{
//   int id = startThread(\"threadFunc\", \"viens\", 1500);
//   delay(0, 1000);
//   emu_info(\"killing\");
//   stopThread(id);
  
  dyn_string ds1;
  ds1[1] = \"vienas\";
  ds1[2] = \"du\";
  
  dyn_string ds2;
  ds2[1] = \"vienas\";
  ds2[2] = \"du\";
  ds2[3] = \"trys\";

  dyn_string ds3;
  ds3[1] = \"vienas\";
  
  dyn_dyn_string dds1;
  dds1[1] = ds1;
  dds1[2] = makeDynString(\"vienas\", \"du\", \"trys\", \"keturi\");
  dds1[3] = makeDynString(\"vienas\", \"du\", \"trys\");
  
  bool isSame = ds2 == ds1;
  emu_info(\"ds1 == ds2 ? \" + isSame);
  emu_info(\"does map contain ds1? \" + _emu_findSimilarInMap(dds1, ds1));
  emu_info(\"does map contain ds2? \" + _emu_findSimilarInMap(dds1, ds2));
  emu_info(\"does map contain makeDynString(viens, du, trys, keturi)? \" + _emu_findSimilarInMap(dds1, makeDynString(\"vienas\", \"du\", \"trys\", \"keturi\")));
  emu_info(\"does map contain makeDynString(labas)? \" + _emu_findSimilarInMap(dds1, makeDynString(\"labas\")));
  emu_info(\"does map contain ds3? \" + _emu_findSimilarInMap(dds1, ds3));
  
  isSame = ds1[1] == ds2[1];
  emu_info(\"ds1[1] == ds2[1] ? \" + isSame);
  
  //stress test
  dyn_dyn_string sMap;
  dyn_string searchString;
  time t0;
  emu_debugFuncStart(\"creating map and array\", t0);
  for (int i=1; i < 1000; i++) {
    searchString[i] = \"abc\" + 5678 + \"def\" + i;
  }
  for (int i=1; i < 6000; i++) {
    for (int j=1; j < 1500; j++) {
      sMap[i][j] = \"abc\" + i + \"def\" + j;
    }
  }
  emu_debugFuncEnd(\"creating map and array\", t0);
  emu_debugFuncStart(\"searching\", t0);
  _emu_findSimilarInMap(sMap, searchString);
  emu_debugFuncEnd(\"searching\", t0);  
}

// void threadFunc(string name, int delayMs) {
//   emu_info(\"thread \" + name + \" started, waiting \" + delayMs + \"ms\");
//   delay(0, delayMs);
//   emu_info(\"thread \" + name + \" finished\");
// }
" 0
 E E E
13 12
"PUSH_BUTTON13"
""
1 320 310 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 318 308 442 335

T 
1
LANG:1 15 test Smi import
"main()
{
  dyn_string ex;
  fwFsm_importSmi(\"CSC_LV_NODES\", ex);
  if (emu_checkException(ex)) { return; }
  
//   	allTypes = fwFsm_getObjectTypes();
// 	types = fwFsm_getDeviceTypes();

}" 0
 E E E
14 13
"editLoadDomain"
""
1 340 110 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 338 108 462 131
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"CMS_CSC_LV_CAN2\";
}" 0
 E
14 14
"editDeleteDomain"
""
1 340 200 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 338 198 462 221
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"CMS_CSC_LV_CAN2\";
}" 0
 E
14 15
"editDeleteDomain1"
""
1 340 230 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 338 228 462 251
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"CMS_CSC_LV_CAN2\";
}" 0
 E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0