V 11
1
LANG:1 26 CMS Endcap Muon System DCS
PANEL,-1 -1 1600 1175 N "_3DFace" 0
"main()
{
  dyn_string ex;
  
  emuui_init();
  
  // access control
  enableDisableControl(false);
  fwFsmUi_addUserLogin(1380, -5);
  fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
  if (emu_checkException(ex)) { return; }
  // auto-select role
  string hostname, ip; int manId; time startTime ; dyn_string exceptionInfo;
  fwAccessControl_getMyDisplay(hostname, ip, manId,startTime, exceptionInfo);
  hostname = strtolower(hostname);
  if ((strpos(hostname, \"cms-scr-\") >= 0) || (strpos(hostname, \"scx5scr\") >= 0) ||       // control room
      (strpos(hostname, \"cerntscms01\") >= 0) ||                                          // terminal server
      (strpos(hostname, \"dcspcs4f10-02\") >= 0) || (strpos(hostname, \"srv-c2c05-22\") >= 0)) { // test/development computers & cms gateways

    fwAccessControl_setupPanel(\"selectRole\", ex);
    if (emu_checkException(ex)) { return; }
  }
  
  // UI stuff
  lblVersion.text = \"UI Version \" + emuui_getComponentVersion() + \" (\" + emuui_getComponentDate() + \")\";
  initConstants();
  resetToDefaultChamberViewMode();
  drawLegend(ex);
  if (emu_checkException(ex)) { return; }
  
  // global part is now officially initialized - let other parts of the UI start initialization now
  topPanelInitialized = true;
      
  // listen for UI version change
  string dp = emuui_getSystem() + \"fwInstallation_\" + EMUUI_COMPONENT_NAME;
  if (dpExists(dp)) {
    emu_info(\"UI: Listening for UI version change on: \" + dp);
    dpConnect(\"updateVersionCB\", false, dp + \".componentVersionString\");
  }
  dpConnect(\"pcratePowerUpBufferChangedCB\", true, emuui_getDpName(\"peripheralCrate_powerUpBuffer\", emuui_dummyMapping, ex));
  if (emu_checkException(ex)) { return; }
}

void initConstants() {
  emuui_g_topFsmNodesRightX = 390;
  emuui_g_topFsmNodesHeight = 230; // not including emuui_g_topMajorityTableHeight
  emuui_g_topMajorityTableHeight = 50;
  
  dyn_string hostsToAutoTakeControl = makeDynString(\"scx5scr05\");//, \"macfrank\");
  dyn_string hostsToReleaseFsmOnExit = makeDynString(\"scx5scr05\");//, \"macfrank\");
  dyn_string developmentHosts = makeDynString(\"macfrank\", \"hp-evka\");
  
  string hostname = getHostname();
  hostname = strtolower(hostname);
  
  autoTakeControl = dynContains(hostsToAutoTakeControl, hostname);
  releaseFsmOnExit = dynContains(hostsToReleaseFsmOnExit, hostname);
  developmentHost = dynContains(developmentHosts, hostname);
}" 0
 "main()
{
  exiting = true;
  if (releaseFsmOnExit) {
    fwCU_releaseFullTree(\"CMS_CSC\");
  }
  if (developmentHost) {
    PanelOff();
  } else {
    exit();
  }

//   if (killAllPvss) {
//     emu_info(\"Killing all PVSS processes\");
//     killAllPvss();
//   }
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "// Common libs
#uses \"CMS_CSC_common/emu_common.ctl\"
#uses \"CMS_CSC_common/emu_math.ctl\"

// UI libs
#uses \"CMS_CSC_UI/emuui_main.ctl\"
#uses \"CMS_CSC_UI/emuui_configuration.ctl\"
#uses \"CMS_CSC_UI/emuui_sessionManager.ctl\"
#uses \"CMS_CSC_UI/emuui_gradient.ctl\"
#uses \"CMS_CSC_UI/emuui_utils.ctl\"
#uses \"CMS_CSC_UI/emuui_contextMenu.ctl\"
#uses \"CMS_CSC_UI/emuui_deviceInfo.ctl\"
#uses \"CMS_CSC_UI/emuui_graphics.ctl\"
#uses \"CMS_CSC_UI/background_checks/emuui_backgroundChecksMain.ctl\"

// Majority library
#uses \"majority_treeCache/majorityLib.ctl\"

// Central DCS libs
#uses \"fwAccessControl/cmsAccessControlSettings.ctc\"

// some panel-wide constants and variables
const int EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X = 10;
const int EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y = 20;
const int EMUUI_TOP_CHAMBER_VIEW_MODE_TIMEOUT = 300;

bool exiting = false;
bool releaseControl = false;
bool topPanelInitialized;
int chamberViewModeTimerThreadId = -1;

bool developmentHost = true;
bool releaseFsmOnExit = true;
bool autoTakeControl = false;

// access control stuff
string currentUser, lastUser;
dyn_string currentFsmOwners;
bool hasControlPrivilege, hasExpertPrivilege;

void waitForEmuUiInitialize() {
  while(!emuui_isInitialized()) { // wait for the emuui initialization
    delay(0, 200);
  }
  while(!topPanelInitialized) { // wait for the emuui initialization
    delay(0, 100);
  }
}

void updateValueMonitorMode(string connTypeDp, string connType, string modeDp, string mode) {
  // remove the DPs_ prefix
  strreplace(connType, \"DPs_\", \"\");
  
  //ok some hard code ... :/
  if (mode == \"HV_vMon\") {
    mode = \"High Voltage\";
  } else if (mode == \"HV_iMon\") {
    mode = \"HV Current (uA)\";
  } else {
    mode = emuui_capitalizeFirstLetters(mode);
  }
  lblValueDisplayMode.text = \"Current Mode: \" + connType + \" \" + mode;
}

void updateChamberViewMode(string connTypeDp, string connType, string modeDp, string mode) {
  lblChamberViewMode.text = \"Current chamber view mode: \" + emuui_capitalizeFirstLetters(mode) + \" state\";
  
  if (mode != \"general\") {
    stopChamberViewModeTimer();
    startChamberViewModeTimer();
  } else {
    stopChamberViewModeTimer();
  }
}

void startChamberViewModeTimer() {
  chamberViewModeTimerThreadId = startThread(\"chamberViewModeTimerThread\");
}

void stopChamberViewModeTimer() {
  if (chamberViewModeTimerThreadId >=0) {
    stopThread(chamberViewModeTimerThreadId);
    chamberViewModeTimerThreadId = -1;
    lblChamberViewModeTimer.visible = false;
  }
}

void chamberViewModeTimerThread() {
  lblChamberViewModeTimer.visible = true;
  
  for (int i = EMUUI_TOP_CHAMBER_VIEW_MODE_TIMEOUT; i > 0; i--) {
    delay(1);
    lblChamberViewModeTimer.text = \"Switching to \\\"General\\\" mode in \" + i + \"s\";
  }
  chamberViewModeTimerThreadId = -1;
  resetToDefaultChamberViewMode();
      
  lblChamberViewModeTimer.visible = false;
}

void resetToDefaultChamberViewMode() {
  string dp = emuui_getSessionDp(\"mainChamberView\");
  dpSetWait(dp + \".connectionType\", \"FSM\", dp + \".mode\", \"general\");
}

/** Draws the main FSM legend obviously :) */
void drawLegend(dyn_string &ex, bool vertical = false) {
  int posX, posY;
  getValue(\"lblLegend\", \"position\", posX, posY);
  if (vertical) {
    posY += 25;
  } else {
    posX += 60;
  }
  
  // use array instead of mapping to preserve the ordering
  dyn_string stateColors = emuui_getMappingAsCSV(\"fsmStateColors\", ex);
  for (int i=1; i <= dynlen(stateColors); i++) {
    dyn_string split = strsplit(stateColors[i], \";\");
    string state = split[1];
    string color = split[2];
    if (state == \"default\") { continue; } // special case
    if (state == \"DEAD\") { state=\"Excluded\"; } // special case - don't scare the operator - it's not dead, just excluded
    
    string refName = \"LegendaryItem_\" + state;
    addSymbol(myModuleName(), myPanelName(),
              EMUUI_OBJECTS_DIR + \"/refLegendItem.pnl\",
              refName,
              makeDynString(\"$caption:\" + state, \"$color:\" + color),
              posX, posY, 0, 1, 1);
    if (vertical) {
      posY += 27;
    } else {
      posX += 90;
    }
  }
}

// Disables all control possibilities in the panel - called before enabling control using access control
void enableDisableControl(bool enable) {
  btnReleaseControl.enabled = enable;
  btnTakeControl.enabled = enable;
  
   if (enable) {
//     fwCU_takeTree(\"CMS_CSC\");
     releaseControl = false;
   } else {
     releaseControl = true;
//     fwCU_releaseFullTree(\"CMS_CSC\");
   }

  string actionString = \"disabled\";
  if (enable) { actionString = \"enabled\"; }
  emu_info(\"All control features \" + actionString);
}

// This function is called by fwAccessControl framework whenever access privileges have changed
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  string user;
  fwAccessControl_getUserName(user);
  emu_info(\"Access privileges have changed - user \" + user + \" has logged in\");
    
  dyn_string ex;
  bool hasControl, isExpert;
  
  fwAccessControl_isGranted(\"CMS_CSC:Control\", hasControl, ex);
  if (emu_checkException(ex)) { return; }
  fwAccessControl_isGranted(\"CMS_CSC:Debug\", isExpert, ex);
  if (emu_checkException(ex)) { return; }
  
  if ((user == currentUser) && (hasControl == hasControlPrivilege) && (isExpert == hasExpertPrivilege)) {
    emu_info(\"accessPrivilegesChangedCB called, but the user and the privileges are the same - ignoring\");
    return;
  }

  hasControlPrivilege = hasControl;
  hasExpertPrivilege = isExpert;
  currentUser = user;
  enableDisableControl(false);  
  
  emu_info(\"Has \" + user + \" CSC control privilege? \" + hasControlPrivilege);
  emu_info(\"Has \" + user + \" CSC expert privileges? \" + hasExpertPrivilege);

  string loginColor;
  if (hasControlPrivilege) {
    loginColor = \"FwStateOKPhysics\";
  } else {
    if (user == \"NO USER\") {
      loginColor = \"FwStateAttention2\";
    } else {
      loginColor = \"FwStateAttention1\";
    }
  }
  setValue(\"user.CurrentUser\", \"backCol\", loginColor);
  
  if (hasControlPrivilege) {
    enableDisableControl(true);
  }
  
  updateTopFSMStateCB(\"\", \"\"); // to update the visibility of \"OFF and no expert control\" label
}

/** This is called when Top FSM node (CMS_CSC) operation mode has changed. If it's detected that it's excluded - take the whole FSM tree. */
void updateTopFsmNodeOperationModeCB(string fsmNode, int operationFlag) {
  // auto take control
  delay(2);
  if (exiting || releaseControl) { return; }
  if (operationFlag == 0) { // not controllable
    string domain = fsmNode;
    string object = _fwCU_getNodeObj(domain);
    string mode = fwFsmUi_getCUMode(domain, object);
    if (mode == \"Excluded\") {
      // check user privileges
      dyn_string ex;
      bool hasControl;  
      fwAccessControl_isGranted(\"CMS_CSC:Control\", hasControl, ex);
      if (emu_checkException(ex)) { return; }
      if (!hasControl) {
        return;
      }
      
      emu_info(\"Detected that top fsm node (CMS_CSC) is excluded - taking the tree back.\");
      fwCU_takeTree(fsmNode);
    }
  }
}

/** This one is connected to:
      CMS_CSC|CMS_CSC_PLUS_FWM.fsm.currentState which tells us if plus side is in local i.e. CMS_CSC node
      CMS_CSC|CMS_CSC_PLUS|CMS_CSC_PLUS_FWM.fsm.currentState which tells us if plus side is included anywhere
      CMS_CSC|CMS_CSC_MINUS_FWM.fsm.currentState which tells us if minus side is in local i.e. CMS_CSC node
      CMS_CSC|CMS_CSC_MINUS|CMS_CSC_MINUS_FWM.fsm.currentState which tells us if minus side is included anywhere
      fwCU_CMS_CSC_PLUS.mode.owner - owner of the plus partition
      fwCU_CMS_CSC_MINUS.mode.owner - owner of the minus partition
*/      
void updatePlusMinusNodesOperationModeCB(dyn_string dpNames, dyn_string includedExcludedInfo) {
  bool plusInLocal = includedExcludedInfo[1] == \"INCLUDED\";
  bool plusIncluded = includedExcludedInfo[2] == \"INCLUDED\";
  bool minusInLocal = includedExcludedInfo[3] == \"INCLUDED\";
  bool minusIncluded = includedExcludedInfo[4] == \"INCLUDED\";
  string plusUser = includedExcludedInfo[5];
  string minusUser = includedExcludedInfo[6];
  strreplace(plusUser, \"cmsdcs:\", \"\");
  strreplace(minusUser, \"cmsdcs:\", \"\");
  currentFsmOwners[1] = plusUser;
  currentFsmOwners[2] = minusUser;
  bool showUsernames = true;
  
  // local or global?
  if (plusInLocal && minusInLocal) { // local control
    lblOwner.backCol = \"white\";
    lblOwner.text = \"Control Owner - Local\";
  } else if (!plusInLocal && plusIncluded && !minusInLocal && minusIncluded) { // central control
    lblOwner.backCol = \"white\";
    lblOwner.text = \"Control Owner - Central DCS\";
  } else if (!plusIncluded && !minusIncluded) { // both excluded - nobody controls the system
    lblOwner.backCol = \"advanceAlarmCamUna\";
    lblOwner.text = \"NOBODY controls the system!\";
    showUsernames = false;
  } else if (plusIncluded && minusIncluded) { // both included - mixed control
    lblOwner.backCol = \"yellow\";
    lblOwner.text = \"Mixed Control Ownership\";
  } else {
    lblOwner.backCol = \"yellow\";
    lblOwner.text = \"Partial Control\";
    if (plusInLocal || minusInLocal) {
      lblOwner.text = lblOwner.text + \" - Local\";
    } else {
      lblOwner.text = lblOwner.text + \" - Central DCS\";
    }        
  } 
  
  if (!lblOwner.visible) { lblOwner.visible = true; }

  if (!showUsernames) {
    return;
  }
  
  // determine user names
  string userFullName, description, userId, enabled, groupNames;
  dyn_string ex;
  fwAccessControl_getUser(plusUser, userFullName, description, userId, enabled, groupNames, ex);
  plusUser = userFullName;
  fwAccessControl_getUser(minusUser, userFullName, description, userId, enabled, groupNames, ex);
  minusUser = userFullName;
  if (emu_checkException(ex)) { 
    emu_errorHandled(ex, \"updateTopFsmNodeOperationModeCB\");
    plusUser = \"Cannot determine user - call expert\";
    minusUser = plusUser;
  }
  
  if (plusUser == \"\") plusUser = \"No User\";
  if (minusUser == \"\") minusUser = \"No User\";
  string users = plusUser;
  if (plusUser != minusUser) {
    users = plusUser + \" and \" + minusUser;
  }
  lblOwner.text = lblOwner.text + \" (\" + users + \")\";  
}

void pcratePowerUpBufferChangedCB(string dpName, dyn_string buffer) {
  if (dynlen(buffer) > 0) {
    btnErrorSummaryBack.backCol = \"advanceAlarmCamUna\";
  } else {
    btnErrorSummaryBack.backCol = \"_Button\";
  }      
}

void updateVersionCB(string dpName, string version) {
  if (version != EMUUI_COMPONENT_VERSION) {
    lblNewVersion.text = \"New version (\" + version + \") is available\\nRestart the UI when possible\\nClick for info about UI versions\";
    lblNewVersion.visible = true;
  }
}

void killAllPvss() {
  system(\"pkill PVSS\");
  system(\"pkill lm_ip\");
}

dyn_string getCurrentFsmOwners() {
  return currentFsmOwners;
}

/** selects default role */
void selectRole(string s1, string s2) {
  //set default role
  string myUserName;
  dyn_string exc_info, groups;
  bool enabled;
  int id;
  string fullName, description;

  fwAccessControl_getUserName(myUserName);
  if (lastUser == myUserName) return; // to allow changing role once you are logged in
  
  lastUser = myUserName;
  if (strlen(myUserName) > 0) {
    fwAccessControl_getUser(myUserName,fullName,description,id,enabled,groups,exc_info);
    dyn_string rolesToCheck = makeDynString(\"CSC_expert\", \"CSC_operator\", \"cms_expert\", \"CENTRAL_DCS\", \"CMS_OPERATOR\", \"CENTRAL_Shift_leader\");
    for (int i=1; i<= dynlen(rolesToCheck); i++) {
      if (dynContains(groups,rolesToCheck[i])) {
        fwAccessControl_setRole(rolesToCheck[i],exc_info);
        break;
      }
    }
  }
}

void updateTopFSMStateCB(string node, string state) {
  string plusState, minusState;
  fwCU_getState(\"CMS_CSC_PLUS\", plusState);
  fwCU_getState(\"CMS_CSC_MINUS\", minusState);
  lblOffInterlock.visible = (((plusState == \"OFF\") || (minusState == \"OFF\")) && !hasExpertPrivilege);
}" 0
 2
"CBRef" "1"
"EClose" "main()
{
  exiting = true;
  if (releaseFsmOnExit) {
    fwCU_releaseFullTree(\"CMS_CSC\");
  }
  if (developmentHost) {
    PanelOff();
  } else {
    exit();
  }

//   if (killAllPvss) {
//     emu_info(\"Killing all PVSS processes\");
//     killAllPvss();
//   }
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 3
"RECTANGLE8"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
86 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 2.722222222222223 0 0.5 -941.6666666666674 380 1 E 750 920 930 1000
30 0
"frameTemperatureMonitor"
""
1 250 833 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
9 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  lblLoading.visible = true;
  waitForEmuUiInitialize();
  delay(25); // wait a bit till everything else is more or less initialized (in particular the chambers are drawn)
  lblLoading.visible = false;
  
  int width, height;
  getValue(\"\", \"size\", width, height);
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y - 5; // mini monitor fine adjustment
  posY += 5; // shift a bit down no avoid overlap with \"zoom in\" icon
          
  string group = emuui_getSessionDp(\"valueMonitor\");          //group name
  string refName = \"ValueMonitor_EMU\";
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refEMUPlot.pnl\",
            refName,
            makeDynString(\"$group:\" + group, \"$width:\" + width),
            posX, posY, 0, 1, 1);   
}" 0
 E 0 0 1 0 1 E 1.48484848484849 0 1.01382488479263 728.7878787878775 45.48387096773909 0 E 250 833 581 1051
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 13 Value Monitor
6 1
"RECTANGLE9"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
87 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 2.722222222222223 0 2.625 -941.6666666666674 -1515 1 E 750 920 930 1000
30 2
"FRAME6"
""
1 1000 483 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
67 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
//   waitForEmuUiInitialize();
//     
//   int posX, posY;
//   getValue(\"\", \"position\", posX, posY);
//   posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
//   posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
//   
//   string refName = \"PeripheralCrateStatusView\";
//   string group = \"\";//emuui_getSessionDp(\"communicationMonitor\");
//   addSymbol(myModuleName(), myPanelName(),
//             EMUUI_OBJECTS_DIR + \"/refPCrateConfiguration.pnl\",
//             refName,
//             makeDynString(\"$group:\" + group),
//             posX, posY, 0, 1, 1);
}" 0
 E 0 0 1 0 1 E 4.45454545454545 0 0.393700787401575 -3354.54545454545 639.8425196850393 0 E 1000 483 1111 611
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 14 Summary Panels
30 4
"frameMainChamberView"
""
1 34.4078947368421 238.283333333333 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
5 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
  
  int width, height;
  getValue(\"\", \"size\", width, height);
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX -= 15; //some correction..
  posY -= 17; //some correction..
  
  string group = emuui_getSessionDp(\"mainChamberView\");          //group name
  string refName = \"MainChamberView_EMU\";
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refEMUPhysical.pnl\",
            refName,
            makeDynString(\"$group:\" + group, \"$width:\" + width),
            posX, posY, 0, 1, 1);
}
" 0
 E 0 1 1 0 1 E 2.3578277627767 0 2.460567823343848 -60.734832883301 -533.3123028391166 0 E 30 233 701 551
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 37 Main Chamber View (view from +Z side)
30 5
"FRAME4"
""
1 900 863 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
59 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
    
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  string refName = \"CommunicationStatusView_EMU\";
  string group = emuui_getSessionDp(\"communicationMonitor\");
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refCommunication.pnl\",
            refName,
            makeDynString(\"$group:\" + group),
            posX, posY, 0, 1, 1);
}" 0
 E 0 0 1 0 1 E 5.63157894736842 0 0.230414746543779 -5058.421052631578 631.1520737327187 0 E 900 863 1091 1081
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 20 Communication Status
30 6
"FRAME1"
""
1 70 853 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
11 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
  
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  dyn_string references;
  emuui_addFsmNode(\"CMS_CSC\", posX, posY, references);
  posY += 40;

  posX += 20;  
  emuui_addFsmNode(\"CMS_CSC_PLUS\", posX, posY, references, false, \"CMS_CSC\");
  posY += 30;
  emuui_addFsmNode(\"CMS_CSC_MINUS\", posX, posY, references, false, \"CMS_CSC\");
  posY += 30;
   
  fwCU_connectState(\"updateTopFSMStateCB\", \"CMS_CSC_PLUS\");  
  fwCU_connectState(\"updateTopFSMStateCB\", \"CMS_CSC_MINUS\");  
  
  if (autoTakeControl) {
    fwCU_connectOperationMode(\"updateTopFsmNodeOperationModeCB\", \"CMS_CSC\");
  }
  dpConnect(\"updatePlusMinusNodesOperationModeCB\", true,
            emuui_getSystem() + \"CMS_CSC|CMS_CSC_PLUS_FWM.fsm.currentState\",
            emuui_getSystem() + \"CMS_CSC|CMS_CSC_PLUS|CMS_CSC_PLUS_FWM.fsm.currentState\",
            emuui_getSystem() + \"CMS_CSC|CMS_CSC_MINUS_FWM.fsm.currentState\",
            emuui_getSystem() + \"CMS_CSC|CMS_CSC_MINUS|CMS_CSC_MINUS_FWM.fsm.currentState\",
            emuui_getSystem() + \"fwCU_CMS_CSC_PLUS.mode.owner\",
            emuui_getSystem() + \"fwCU_CMS_CSC_MINUS.mode.owner\");
}
" 0
 E 0 0 1 0 1 E 1.68181818181818 0 1.40127388535031 -107.7272727272726 -305.2866242038144 0 E 70 853 291 1011
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 10 Subsystems
30 7
"FRAME2"
""
1 920 853 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
12 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
    
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  string group = emuui_getSessionDp(\"hvPrimaryView\");          //group name
  string refName = \"HV_PrimaryView_EMU\";
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refHVPrimaries.pnl\",
            refName,
            makeDynString(\"$group:\" + group),
            posX, posY, 0, 1, 1);
}" 0
 E 0 0 1 0 1 E 0.689655172413793 0 1.01382488479262 -234.4827586206897 25.2073732718952 0 E 920 853 1211 1071
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 29 High Voltage Primary Supplies
30 8
"FRAME5"
""
1 900 923 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
66 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
    
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  string refName = \"FedView_EMU\";
  string group = emuui_getSessionDp(\"fedView\");
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refFED.pnl\",
            refName,
            makeDynString(\"$group:\" + group),
            posX, posY, 0, 1, 1);
}" 0
 E 0 0 1 0 1 E 1 0 1.01382488479263 4.263256414560596e-14 -45.76036866359757 0 E 900 923 1081 1141
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 10 FED Crates
6 9
"RECTANGLE7"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
85 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 2.625 150 -1515 1 E 750 920 930 1000
30 10
"FRAME3"
""
1 920 853 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
15 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
    
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  string group = emuui_getSessionDp(\"maratonView\");          //group name
  string refName = \"MaratonView_EMU\";
  addSymbol(myModuleName(), myPanelName(),
            EMUUI_OBJECTS_DIR + \"/refMaratons.pnl\",
            refName,
            makeDynString(\"$group:\" + group),
            posX, posY, 0, 1, 1);
}" 0
 E 0 0 1 0 1 E 0.896551724137931 0 1.01382488479262 -204.8275862068965 25.2073732718952 0 E 920 853 1211 1071
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 8 Maratons
6 11
"RECTANGLE2"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
72 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 8.777777777777777 0 9.625 -6573.333333333333 -8805 1 E 750 920 930 1000
6 12
"RECTANGLE3"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
74 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 5.944444444444445 0 0.5 -4448.333333333333 380 1 E 750 920 930 1000
6 13
"RECTANGLE4"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
76 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 2.055555555555555 0 2.625 -1531.666666666666 -1515 1 E 750 920 930 1000
6 14
"RECTANGLE5"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
78 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1.111111111111111 0 2.625 -433.3333333333333 -1515 1 E 750 920 930 1000
6 15
"RECTANGLE6"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
84 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1.444444444444445 0 2.625 -463.3333333333337 -1515 1 E 750 920 930 1000
6 16
"iconZoomInMiniMonitor"
""
1 10 10 E E E 1 E 1 E N {0,0,0} E N "white" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 35 Detach and zoom temperature monitor

1
"dashclr"N "_Transparent"
E "main()
{
  // old width was 780
  ChildPanelOn(EMUUI_OBJECTS_DIR + \"/refEMUPlot.pnl\", \"panelMiniMonitor\", 
               makeDynString(\"$group:\" + emuui_getSessionDp(\"valueMonitor\"), \"$width:1200\"), 200, 200);
}
" 0
 0 1 1 2 1 E 1 0 1 1180 880 2  0 0  "pictures/CMS_CSC_UI/zoom_in.bmp" 4294967295 E 10 10 36 35
2 17
"lblLoading"
""
1 1120 990 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1120 990 1575 1028
1 2 2 "0s" 0 0 0 65 0 0  1120 990 1
1
LANG:1 26 Arial,24,-1,5,50,0,0,0,0,0
0 1
LANG:1 23 Loading, please wait...
6 18
"btnValueDisplayMode"
""
1 830 600 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
33 0 0 0 0 0
E E E
4
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  btnValueDisplayMode.borderStyle = BS_SUNKEN;
  delay(0, 150);
  btnValueDisplayMode.borderStyle = BS_RAISED;
  
  ChildPanelOnCentralModal(EMUUI_COMPONENT_NAME + \"/ValueMonitorModeChooser.pnl\", \"ModeChooser\", makeDynString());
}" 0
 0 1 1 2 1 E 1 0 1 1072 830 1 E 360 60 470 83
2 19
"btnValueDisplayMode_label"
""
1 1432 894 E E E 1 E 1 E N "_ButtonText" E N "_Transparent" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  btnValueDisplayMode.borderStyle = BS_SUNKEN;
  delay(0, 150);
  btnValueDisplayMode.borderStyle = BS_RAISED;
  
  ChildPanelOnCentralModal(EMUUI_COMPONENT_NAME + \"/ValueMonitorModeChooser.pnl\", \"ModeChooser\", makeDynString());
}" 0
 0 1 1 2 1 E U  1 E 1432 894 1538 907
0 2 2 "0s" 0 0 0 65 0 0  1432 894 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 11 Change Mode
2 20
"lblValueDisplayMode"
""
1 1230 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
  string dp = emuui_getSessionDp(\"valueMonitor\");
  dpConnect(\"updateValueMonitorMode\", true, dp + \".connectionType\", dp + \".mode\");
}" 0
 E 0 1 1 2 1 E U  1 E 1230 890 1409 905
0 2 2 "0s" 0 0 0 192 0 0  1230 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 29 Current Mode: Max Temperature
2 21
"lblChamberViewMode"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
36 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
  string dp = emuui_getSessionDp(\"mainChamberView\");
  dpConnect(\"updateChamberViewMode\", true, dp + \".connectionType\", dp + \".mode\");
}" 0
 E 0 1 1 2 1 E U  1 E 10 10 245 25
0 2 2 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 40 Current chamber view mode: General state
6 22
"btnChamberViewMode"
""
1 830 600 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
40 0 0 0 0 0
E E E
4
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  btnValueDisplayMode.borderStyle = BS_SUNKEN;
  delay(0, 150);
  btnValueDisplayMode.borderStyle = BS_RAISED;
  
  ChildPanelOnCentralModal(EMUUI_COMPONENT_NAME + \"/ChamberViewModeChooser.pnl\", \"ModeChooser\", makeDynString());
}" 0
 0 1 1 2 1 E 1 0 1 -80 -54 1 E 360 60 470 83
2 23
"btnChamberViewMode_label"
""
1 280 10 E E E 1 E 1 E N "_ButtonText" E N "_Transparent" E E
 E E
38 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  btnChamberViewMode.borderStyle = BS_SUNKEN;
  delay(0, 150);
  btnChamberViewMode.borderStyle = BS_RAISED;
  
  ChildPanelOnCentralModal(EMUUI_COMPONENT_NAME + \"/ChamberViewModeChooser.pnl\", \"ModeChooser\", makeDynString());
}" 0
 0 1 1 2 1 E U  1 E 280 10 386 23
0 2 2 "0s" 0 0 0 65 0 0  280 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 11 Change Mode
2 24
"lblLegend"
""
1 410 10 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 410 10 457 25
0 2 2 "0s" 0 0 0 192 0 0  410 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Legend:
2 26
"PRIMITIVE_TEXT1"
""
1 1110 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
52 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1110 10 1198 25
0 2 2 "0s" 0 0 0 192 0 0  1110 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 13 Known problem
2 27
"PRIMITIVE_TEXT2"
""
1 1100 10 E E E 1 E 1 E N "white" E N "_3DText" E E
 E E
53 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1100 10 1106 28
0 2 2 "0s" 0 0 0 192 0 0  1100 10 1
1
LANG:1 33 MS Shell Dlg,-1,13,5,75,0,0,0,0,0
0 1
LANG:1 1 !
7 28
"legendImgNoCommunication"
""
1 85 215 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
61 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 -209 -23 2  1 0  "pictures/CMS_CSC_UI/noCommunication.png" 4294967295 E 1424 40 10 10
2 29
"PRIMITIVE_TEXT3"
""
1 -3048.150909472955 -990 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
62 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 0.991071428571429 0 1 -127.7678571428577 -20 1 E 1370 30 1506 45
0 2 2 "0s" 0 0 0 192 0 0  1370 30 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 21 Communication problem
2 30
"upsOnBatteryBack"
""
1 10 48.62118608389724 E E E 1 E 0 E N "_WindowText" E N "alarmGingUnq" E E
 E E
71 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 0.9796954314720813 0 0.9746192893400991 1 E 10 50 1583 834
0 2 2 "0s" 0 0 0 65 0 0  10 50 26
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
1
LANG:1 33 MS Shell Dlg,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 0 
2 32
"PRIMITIVE_TEXT5"
""
1 20 40 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
73 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 20 40 239 55
0 2 2 "0s" 0 0 0 192 0 0  20 40 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 37 Main Chamber View (view from +Z side)
2 33
"PRIMITIVE_TEXT6"
""
1 20 830 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
75 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 20 830 145 845
0 2 2 "0s" 0 0 0 192 0 0  20 830 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 20 Communication Status
2 34
"PRIMITIVE_TEXT7"
""
1 20 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
77 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 20 890 88 905
0 2 2 "0s" 0 0 0 192 0 0  20 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 Subsystems
2 35
"PRIMITIVE_TEXT8"
""
1 410 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
79 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 410 890 579 905
0 2 2 "0s" 0 0 0 192 0 0  410 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 29 High Voltage Primary Supplies
2 36
"PRIMITIVE_TEXT9"
""
1 630 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
80 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 630 890 683 905
0 2 2 "0s" 0 0 0 192 0 0  630 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Maratons
2 37
"PRIMITIVE_TEXT10"
""
1 910 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
81 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 910 890 975 905
0 2 2 "0s" 0 0 0 192 0 0  910 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 FED Crates
2 38
"PRIMITIVE_TEXT11"
""
1 1110 890 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
82 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1110 890 1188 905
0 2 2 "0s" 0 0 0 192 0 0  1110 890 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 13 Value Monitor
2 39
"PRIMITIVE_TEXT12"
""
1 1110 830 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
83 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 1110 830 1204 845
0 2 2 "0s" 0 0 0 192 0 0  1110 830 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 Summary panels
2 40
"lblChamberViewModeTimer"
""
1 280 30 E E E 1 E 0 E N "_WindowText" E N "white" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 280 30 480 45
1 2 2 "0s" 0 0 0 192 0 0  280 30 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 35 Switching to "General" mode in 300s
30 42
"FRAME7"
""
1 900 863 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
90 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  waitForEmuUiInitialize();
    
  int posX, posY;
  getValue(\"\", \"position\", posX, posY);
  posX += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_X + 10;
  posY += EMUUI_TOP_FRAME_INNER_PANEL_SHIFT_Y;
  
  majority_ui_setTableMode(\"ratio\");
  majority_ui_addTable(\"CMS_CSC\", \"CMS_CSC\", \"\", \"\", 
                       makeDynString(\"HV_OUTER:on\", \"HV_OUTER:standby\", \"HV_OUTER:error\", 
                                     \"HV_INNER:on\", \"HV_INNER:standby\", \"HV_INNER:error\",
                                     \"HV_ME11:on\", \"HV_ME11:standby\", \"HV_ME11:error\",
                                     \"LV:on\", \"LV:error\", \"LV:no_communication\",
                                     \"TEMP:ok\", \"TEMP:alert\", \"TEMP:no_communication\"),
                       makeDynString(\"HV_OUTER:on\", \"HV_OUTER:standby\", \"HV_OUTER:error\", 
                                     \"HV_INNER:on\", \"HV_INNER:standby\", \"HV_INNER:error\",
                                     \"HV_ME11:on\", \"HV_ME11:standby\", \"HV_ME11:error\",
                                     \"LV:on\", \"LV:error\", \"LV:no comm.\",
                                     \"TEMP:ok\", \"TEMP:alert\", \"TEMP:no comm.\"),
                       107, false, true, 
                       posX, posY, false, \"\");
  majority_ui_setTableMode(\"percentage\"); // set it back to default not to affect other tables  
}" 0
 E 0 0 1 0 1 E 8.315789473684211 0 0.3225806451612906 -7474.210526315788 833.6129032258062 0 E 900 863 1091 1081
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 16 Majority Summary
6 43
"RECTANGLE12"
""
1 750 920 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
91 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 8.777777777777779 0 0.75 -6573.333333333333 432 1 E 750 920 930 1000
2 44
"PRIMITIVE_TEXT13"
""
1 20 1112 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
92 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 20 1112 120 1127
0 2 2 "0s" 0 0 0 192 0 0  20 1112 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 16 Majority Summary
13 47
"btnReleaseControl"
""
1 19.99999999999999 1080 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
95 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  18 1078 192 1105

T 
1
LANG:1 15 Release Control
"main()
{
  emu_info(\"Releasing control.\");
  releaseControl = true;
  fwCU_releaseFullTree(\"CMS_CSC\");
}" 0
 E E E
13 48
"btnTakeControl"
""
1 200 1080 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
96 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  198 1078 372 1105

T 
1
LANG:1 18 Take Local Control
"main()
{

  emu_info(\"Taking local control.\");
  fwCU_takeTree(\"CMS_CSC\");
  releaseControl = false;
}" 0
 E E E
13 87
"btnLogout"
""
1 1540 10 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
101 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  1538 8 1592 35

T 
1
LANG:1 6 Logout
"main()
{
  fwAccessControl_logout();
}" 0
 E E E
2 25
"lblVersion"
""
1 720 58 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 720 58 882 73
1 2 2 "0s" 0 0 0 192 0 0  720 58 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 29 UI Version 1.0.0 (2009/07/22)
2 41
"lblNewVersion"
""
1 714 40 E E E 1 E 0 E N "_WindowText" E N "yellow" E E
 E E
51 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  string url = \"https://twiki.cern.ch/twiki/bin/view/CMS/CSCDCS\";
  emuui_openBrowser(url);
}" 0
 0 1 1 2 1 E U  1 E 714 40 894 89
1 2 2 "0s" 0 0 0 192 0 0  714 40 3
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 33 New version (1.0.22) is available
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 28 Restart the UI when possible
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 32 Click for info about UI versions
26 88
"btnExpertActions"
""
1 330.7692307692308 990 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
102 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  198 1048 372 1075
 0 1
LANG:1 14 Expert Actions
"" 0 0 0 0 0
 4 1 1
LANG:1 36 Open Excluded Channels Summary Panel
"1" 0 0 0 0 0
 1 1
LANG:1 34 Open Xmas Monitoring Control Panel
"2" 0 0 0 0 0
 1 1
LANG:1 26 Open TMB LV Analysis Panel
"3" 0 0 0 0 0
 1 1
LANG:1 32 Open HV Channel Management Panel
"4" 0 0 0 0 0
 E "main(string id)
{
  emu_info(\"Executing expert action: \" + this.textItemId(id));
  switch (id) {
    case 1:
      ChildPanelOnCentral(\"CMS_CSCfw_Supervisor/emuEmuExcludedSummary.pnl\", \"Excluded Channels Summary\", makeDynString());
      break;
    case 2:
//      ChildPanelOnCentral(\"CMS_CSCfw_HV_CC/emuLVSubSystemOperation.pnl\", \"Xmas Monitoring Control Panel\", makeDynString());
      ChildPanelOnCentral(\"CMS_CSC_UI/XmasMonitoringControl.pnl\", \"Xmas Monitoring Control Panel\", makeDynString());
      break;
    case 3:
      ChildPanelOnCentral(\"CMS_CSC_UI/util/TmbLvAnalysis/Main.pnl\", \"TMB LV Analysis Panel\", makeDynString());
      break;
    case 4:
      ChildPanelOnCentral(\"CMS_CSC_UI/HvChannelManagement.pnl\", \"HV Channel Management - EXPERTS ONLY!\", makeDynString());
      break;
    default:
      break;
  }
}" 0
0 
6 89
"btnErrorSummaryBack"
""
1 830 600 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
103 0 0 0 0 0
E E E
4
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  ChildPanelOnCentral(\"CMS_CSCfw_Supervisor/emuEmuErrorSummarySub.pnl\", \"Error Summary\", makeDynString());
}" 0
 0 1 1 2 1 E 4.272727272727273 0 1 -428.1818181818181 790 1 E 360 60 470 83
2 90
"btnErrorSummaryLabel"
""
1 1110 854 E E E 1 E 1 E N "_ButtonText" E N "_Transparent" E E
 E E
104 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E "main()
{
  ChildPanelOnCentral(\"CMS_CSCfw_Supervisor/emuEmuErrorSummarySub.pnl\", \"Error Summary\", makeDynString());
}" 0
 0 1 1 2 1 E U  1 E 1110 854 1576 867
0 2 2 "0s" 0 0 0 65 0 0  1110 854 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 51 Open Error & Peripheral Crate configuration Summary
2 91
"lblOwner"
""
1 800 425 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
105 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 608 425 992 449
1 2 2 "0s" 0 0 0 193 0 0  800 425 1
1
LANG:1 26 Arial,14,-1,5,50,0,0,0,0,0
0 1
LANG:1 42 Control owner: Central DCS (Evaldas Juska)
2 31
"lblUpsOnBattery"
""
1 700 400 E E E 1 E 0 E N "_WindowText" E N "FwStateAttention3" E E
 E E
69 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 700 400 907 461
1 2 2 "0s" 0 0 0 192 0 0  700 400 3
1
LANG:1 26 Arial,11,-1,5,75,0,0,0,0,0
0 1
LANG:1 30 Atention: UPS is on battery !!
1
LANG:1 26 Arial,11,-1,5,75,0,0,0,0,0
0 1
LANG:1 26 All LV is being turned OFF
1
LANG:1 26 Arial,11,-1,5,75,0,0,0,0,0
0 1
LANG:1 29 Make sure it is and stays OFF
13 93
"PUSH_BUTTON1"
""
1 19.99999999999999 1050 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
107 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  18 1048 192 1075

T 
1
LANG:1 22 Operation Help (twiki)
"main()
{
  string url = \"https://twiki.cern.ch/twiki/bin/view/CMS/CSCOperationsDCS\";
  emuui_openBrowser(url);
}" 0
 E E E
2 94
"lblOffInterlock"
""
1 196 1020 E E E 1 E 0 E N "_WindowText" E N "FwStateAttention1" E E
 E E
108 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 22 1020 370 1038
1 2 2 "0s" 0 0 0 193 0 0  196 1020 1
1
LANG:1 31 Sans Serif,10,-1,5,50,0,0,0,0,0
0 1
LANG:1 52 Only CSC Expert is allowed to turn ON from OFF state
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
