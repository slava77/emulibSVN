V 11
1
LANG:1 0 
PANEL,-1 -1 1005 806 N "_3DFace" 0
"main()
{
  allDps = dpNames(\"*:*.value\", \"CSC_HV_I_DATA\");
  
  dyn_string ex;
  for (int i=1; i <= dynlen(allDps); i++) {
    string dp = dpSubStr(allDps[i], DPSUB_DP);
    string channelName = emu_getChamberName(emu_fsmNodeToDeviceParams(dp, ex)) + 
                         \" ch. \" + substr(dp, 19, 2);
    
    comboChannel.appendItem(channelName);
  }
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"CMSfwGenericPlotter/CMSfwGenericPlotter.ctl\"

dyn_string allDps;

mapping idToDpe;
mapping idToStartTime;
mapping idToEndTime;
    
const int MAX_RESULTS = 1000;

/**
  * Fills the result table (current should be provided in nano amps, then they're converted to uA for internal use)
  * @param dps list of DPS to go over
  * @param startTime beginning of search time period
  * @param startTime end of search time period
  * @param minCurrent filter of minimum current (nano amps)
  * @param maxCurrent filter of maximum current (nano amps)
  * @param minDuration filter of minimum duration (seconds)
  */
void go(dyn_string dps, time startTime, time endTime, float minCurrent, float maxCurrent, int minDuration) {
  minCurrent /= 1000;
  maxCurrent /= 1000;
  
  setStatus(\"busy\");
  btnGo.enabled = false;
  progress.totalSteps = dynlen(dps);
  progress.progress = 0;
  
  tableResults.deleteAllLines();
  mappingClear(idToDpe);
  mappingClear(idToStartTime);
  mappingClear(idToEndTime);
  
  dyn_float values;
  dyn_time timestamps;
  for (int i=1; i <= dynlen(dps); i++) {
    int rc = dpGetPeriod(startTime, endTime, -1, dps[i], values, timestamps);
    if (rc != 0) {
      emu_errorSingle(\"Error while retrieving historical data. dpGetPeriod returned \" + rc);
      setStatus(\"error\");
      btnGo.enabled = true;
      progress.progress = 0;
      return;
    }

    bool selected = false;
    time selectionStartTime;
    float selectionMinCurrent = maxINT();
    float selectionMaxCurrent = minINT();
    for (int j=1; j <= dynlen(values); j++) {
      float current = values[j] / 1000;
      if ((current >= minCurrent) && (current <= maxCurrent)) {
        if (!selected) {
          selected = true;
          selectionStartTime = timestamps[j];
          selectionMinCurrent = current;
          selectionMaxCurrent = current;
        } else {
          if (current < selectionMinCurrent) {
            selectionMinCurrent = current;
          }
          if (current > selectionMaxCurrent) {
            selectionMaxCurrent = current;
          }
        }
      } else if (selected) { // if outside range or at the end of the main loop
        int duration = timestamps[j] - selectionStartTime;
        if (duration >= minDuration) { // if doesn't meet min duration requirement, just don't show it
          addSelectionToTable(dps[i], selectionMinCurrent, selectionMaxCurrent,
                              selectionStartTime, timestamps[j]);
        }
        
        selected = false;
        float selectionMinCurrent = maxINT();
        float selectionMaxCurrent = minINT();          
      }
      
      if (selected && (j == dynlen(values))) { // drop the selection to the table if we're at the end of our dataset
        int duration = timestamps[j] - selectionStartTime;
        if (duration >= minDuration) { // if doesn't meet min duration requirement, just don't show it
          addSelectionToTable(dps[i], selectionMinCurrent, selectionMaxCurrent,
                              selectionStartTime, timestamps[j]);
        }
      }
    }
    
    if (i % 100 == 0) {
      progress.progress = i;
      emu_info(\"HV current analysis dump at \" + i + \"/\" + dynlen(dps));
      string text;
      for (int i=0; i < tableResults.lineCount(); i++) {
        text += tableResults.getLineN(i) + \"\\n\";
      }
      emu_info(text);
    }
    
    if (tableResults.lineCount > MAX_RESULTS) {
      emu_errorSingle(\"More than \" + MAX_RESULTS + \" results found - stopping\");
      setStatus(\"error\");
      btnGo.enabled = true;
      progress.progress = 0;
      return;
    }
  }
  
  btnGo.enabled = true;
  setStatus(\"idle\");
}

void addSelectionToTable(string dp, float minCurrent, float maxCurrent, time startTime, time endTime) {
  string minCurrentStr, maxCurrentStr;
  sprintf(minCurrentStr, \"%.2f uA\", minCurrent);
  sprintf(maxCurrentStr, \"%.2f uA\", maxCurrent);
  string channelName = dpSubStr(dp, DPSUB_DP);
  string startTimeStr = emuui_formatTime(startTime);
  tableResults.appendLine(\"channel\", channelName,
                          \"time\", startTimeStr,
                          \"duration\", emuui_formatDuration(startTime, endTime, true, true),
                          \"minCurrent\", minCurrentStr,
                          \"maxCurrent\", maxCurrentStr);
  
  
  string id = channelName + startTimeStr;
  idToDpe[id] = dp;
  idToStartTime[id] = startTime;
  idToEndTime[id] = endTime;
}

void setStatus(string status) {
  lblStatus.text = status;
  if (strpos(status, \"busy\") >= 0) {
    lblStatus.foreCol = \"red\";
    progress.visible = true;
  } else {
    lblStatus.foreCol = \"black\";
    progress.visible = false;
  }
}

void showPlot(string dpe, string channelName, time startTime = 0, time endTime = 0) {
  
  if (isFunctionDefined(\"CMSfwGenericPlotter_openPlotForInterval\")) { // use Lorenzo's plotter
    if ((startTime != 0) && (endTime != 0)) {
      CMSfwGenericPlotter_openPlotForInterval(makeDynString(dpe), \"HV Current on \" + channelName,
                                              startTime, endTime,
                                              CMSfwGenericPlotter_BASIC | CMSfwGenericPlotter_ALLOW_CHANGE_DATE
                                              );
    } else {
      CMSfwGenericPlotter_openPlotForLastDays(makeDynString(dpe), \"HV Current on \" + channelName,
                                              1, CMSfwGenericPlotter_BASIC | CMSfwGenericPlotter_ALLOW_CHANGE_DATE);
    }
  } else { // use fwTrending
  
    // configure some params
    dpSet(\"trendPlot.curveTypes\", makeDynInt(2,2,2,2,2,2,2,2));
    dpSet(\"trendPlot.axii\", makeDynBool(true,true,true,true,true,true,true,true));
    dpSet(\"trendPlot.plotType\", 2);
    dpSet(\"trendPlot.yRangeMin\", makeDynFloat(0, 0, 0, 0, 0, 0, 0, 0));
    dpSet(\"trendPlot.yRangeMax\", makeDynFloat(0, 0, 0, 0, 0, 0, 0, 0));
  
    int duration = 3600 * 24; // default = one day
    if ((startTime != 0) && (endTime != 0)) {
      duration = endTime - startTime;
      dpSet(\"trendPlot.xRangeMin\", makeDynFloat(startTime, 0, 0, 0, 0, 0, 0, 0));
      dpSet(\"trendPlot.xRangeMax\", makeDynFloat(endTime, 0, 0, 0, 0, 0, 0, 0));
    }

    dpSet(\"trendPlot.timeRange\", duration);
  
  
    ChildPanelOnCentral(\"fwTrending/fwTrendingPlot.pnl\", \"HV Current (nA)\", 
                      makeDynString(\"$PlotName:trendPlot\", 
                                    \"$templateParameters:dp1=\" + dpe + \",dp2=,dp3=,dp4,dp5,dp6,dp7,dp8,plotName=HV Current\"));
  }  
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 1
"PRIMITIVE_TEXT1"
""
1 330 10 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 330 10 600 40
0 2 2 "0s" 0 0 0 192 0 0  330 10 1
1
LANG:1 31 Sans Serif,18,-1,5,75,0,0,0,0,0
0 1
LANG:1 19 HV Current Analysis
29 3
"calStart"
""
1 10 80 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"horizontalHeaderFormat" "enum 0"
"firstDayOfWeek" "enum 1"
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  10 80 210 230
8 Calendar
0
"main()
{
  this.selectedDate = getCurrentTime() - 86400;
}" 0
2 6
"PRIMITIVE_TEXT2"
""
1 10 60 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 60 76 76
0 2 2 "0s" 0 0 0 192 0 0  10 60 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 11 Start date:
2 7
"PRIMITIVE_TEXT3"
""
1 10 290 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 290 69 306
0 2 2 "0s" 0 0 0 192 0 0  10 290 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 End date:
2 8
"PRIMITIVE_TEXT4"
""
1 10 240 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 240 43 256
0 2 2 "0s" 0 0 0 192 0 0  10 240 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 Hour:
21 9
"spinHourStart"
""
1 50 240 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  48 238 172 266
0

E
E
E

N 0 23 1 14 1 1
29 10
"calEnd"
""
1 9.999999999999989 310 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"firstDayOfWeek" "enum 1"
"horizontalHeaderFormat" "enum 0"
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  10 310 210 460
8 Calendar
0
"main()
{
  this.selectedDate = getCurrentTime();
}" 0
20 11
"chkEndNow"
""
1 90 290 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  88 288 212 311
1
T 
1
LANG:1 3 Now

1 
1
LANG:1 0 
E E
0 0 0 0 0
0
E"main(int button, int state)
{
  calEnd.enabled = !state;
  spinHourEnd.enabled = !state;
}" 0
2 12
"PRIMITIVE_TEXT7"
""
1 10 470 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 10 470 43 486
0 2 2 "0s" 0 0 0 192 0 0  10 470 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 Hour:
21 13
"spinHourEnd"
""
1 50 470 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  48 468 172 496
0

E
E
E

N 0 23 1 14 1 1
2 14
"PRIMITIVE_TEXT5"
""
1 20 530 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 530 124 546
0 2 2 "0s" 0 0 0 192 0 0  20 530 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Min current (nA):
21 16
"spinMinCurrent"
""
1 130 530 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  128 528 202 556
0

E
E
E

N 0 50000 1 2000 1 1
30 17
"FRAME2"
""
1 10 502 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
17 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.7692307692307692 0 1.40625 2.307692307692308 -205.9375000000001 0 E 10 502 271 631
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 18 Selection Criteria
2 18
"PRIMITIVE_TEXT7"
""
1 20 560 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 560 127 576
0 2 2 "0s" 0 0 0 192 0 0  20 560 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Max current (nA):
21 19
"spinMaxCurrent"
""
1 130 560 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  128 558 202 586
0

E
E
E

N 0 50000 1 50000 1 1
13 20
"btnGo"
""
1 10.00000000000001 700 E E E 1 E 1 E N "_ButtonText" E N "FwStateOKPhysics" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 31 Sans Serif,18,-1,5,50,0,0,0,0,0
0  8 698 212 792

T 
1
LANG:1 3 Go!
"main()
{
  bool isEndNow = chkEndNow.state(0);
  time startTime = calStart.selectedDate + spinHourStart.text * 3600;
  time endTime = calEnd.selectedDate + spinHourEnd.text * 3600;
  if (isEndNow) {
    endTime = getCurrentTime();
  }
  
  dyn_string dps;
  if (chkAllChambers.state(0)) {
    dps = allDps;
  } else {
    dps = makeDynString(allDps[comboChannel.selectedPos]);
  }
  go(dps, startTime, endTime, spinMinCurrent.text, spinMaxCurrent.text, spinMinDuration.text);
}" 0
 E E E
25 21
"tableResults"
""
1 240 90 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E "main(int row, string column)
{
  string id = this.cellValueRC(row, \"channel\") + this.cellValueRC(row, \"time\");
  string channelName = this.cellValueRC(row, \"channel\");
  string dpe = idToDpe[id];
  time startTime = idToStartTime[id];
  time endTime = idToEndTime[id];
  showPlot(dpe, channelName, startTime, endTime); // don't know how to set start time in the plot!!
}
" 0

21 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  238 88 992 792
"main()
{
  this.tableMode = TABLE_SELECT_LINE;
  this.selectByClick = TABLE_SELECT_LINE;
}" 0
E 1 0 1 5 0 "channel" 24 1 0 "s" 1
LANG:1 7 Channel
E
1
LANG:1 0 

250 "time" 14 1 0 "s" 1
LANG:1 10 Start Time
E
1
LANG:1 0 

150 "duration" 9 1 0 "s" 1
LANG:1 8 Duration
E
1
LANG:1 0 

100 "minCurrent" 11 1 0 "s" 1
LANG:1 17 Min. Current (uA)
E
1
LANG:1 0 

120 "maxCurrent" 11 1 0 "s" 1
LANG:1 17 Max. Current (uA)
E
1
LANG:1 0 

120 
16 16 10 10
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 22
"lblForStatus"
""
1 20 20 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 20 74 40
0 2 2 "0s" 0 0 0 192 0 0  20 20 1
1
LANG:1 31 Sans Serif,12,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 status:
2 23
"lblStatus"
""
1 80 20 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 80 20 113 40
0 2 2 "0s" 0 0 0 192 0 0  80 20 1
1
LANG:1 31 Sans Serif,12,-1,5,75,0,0,0,0,0
0 1
LANG:1 4 idle
29 24
"progress"
""
1 240 50 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
24 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  240 50 990 70
11 ProgressBar
0
E2 25
"PRIMITIVE_TEXT8"
""
1 20 590 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
25 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 590 120 606
0 2 2 "0s" 0 0 0 192 0 0  20 590 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Min duration (s):
21 26
"spinMinDuration"
""
1 130 590 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  128 588 202 616
0

E
E
E

N 0 86400 1 30 1 1
2 27
"PRIMITIVE_TEXT9"
""
1 20 620 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 620 74 636
0 2 2 "0s" 0 0 0 192 0 0  20 620 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Channel:
20 29
"chkAllChambers"
""
1 100 620 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
29 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  98 618 202 641
1
T 
1
LANG:1 3 All

1 
1
LANG:1 0 
E E
0 0 0 0 0
0
E"main(int button, int state)
{
  comboChannel.enabled = !state;
}" 0
22 31
"comboChannel"
""
1 20 640 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 638 202 666
0

E
E
E
 0 0
13 32
"PUSH_BUTTON6"
""
1 860 70 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  858 68 992 92

T 
1
LANG:1 18 Show as plain text
"main()
{
  string text;
  for (int i=0; i < tableResults.lineCount(); i++) {
    text += tableResults.getLineN(i) + \"\\n\";
  }
  
  ChildPanelOnCentralModal(\"CMS_CSC_UI/util/textEditor.pnl\", \"textEdit_highCurrentHvChannels\", 
                           makeDynString(\"$text:\" + text));
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
