#uses "CMS_CSC_common/emu_common.ctl"
#uses "CMS_CSC_common/emu_fsm.ctl"
#uses "fwInstallationUtils.ctl"

const string EMU_FSM_TYPE_TOP = "EMUGrouping";
const string EMU_FSM_DOMAIN_TOP = "CMS_CSC";
const string EMU_FSM_DOMAIN_INFRA = "CMS_CSC_INFRA";

const string FSM_GAS_NODE_NAME = "CSC Gas";
const string FSM_GAS_DP = "CscGas/CSC_GAS_MONITOR";
const string FSM_GAS_DPT = "CscGasSystem_CSC_GAS";
const string FSM_COOLING_NODE = "CSC_COOLING";
const string FSM_COOLING_DP = "CscCooling/CSC_COOLING_MONITOR";
const string FSM_COOLING_DPT = "CscCooling_CSC_COOLING";

const string COMPONENT_NAME = "CMS_CSCfw_GAS";

main() {

  emu_info(COMPONENT_NAME + " PostInstall: Starting");
  
  dyn_string ex;

  emu_info(COMPONENT_NAME + " PostInstall: Loading configurations...");
  fwInstallationUtils_loadConfigurations(COMPONENT_NAME, ex);
  if (emu_checkException(ex)) { emu_info(COMPONENT_NAME + " PostInstall: aborted"); return; }
  emu_info(COMPONENT_NAME + " PostInstall: Finished loading configurations");

  emu_info(COMPONENT_NAME + " PostInstall: Creating FSM...");
  emugas_createFsm(ex);
  if (emu_checkException(ex)) { emu_info(COMPONENT_NAME + " PostInstall: aborted"); return; }
  emu_info(COMPONENT_NAME + " PostInstall: Finished creating FSM");
  
  emu_info(COMPONENT_NAME + " PostInstall: Creating managers from the installation DB");
  fwInstallationUtils_appendManagers(COMPONENT_NAME, ex);
  if (emu_checkException(ex)) { emu_info(COMPONENT_NAME + " PostInstall: aborted"); return; }
  emu_info(COMPONENT_NAME + " PostInstall: Finished creating managers from the installation DB");
  
  emu_info(COMPONENT_NAME + " PostInstall: Configuring alert classes");
//  emuAlert_updateAllAlertClassesForType("CscHvChamber");
  emu_info(COMPONENT_NAME + " PostInstall: Finished configuring alert classes");
  
  emu_info(COMPONENT_NAME + " PostInstall: DONE");
}

void emugas_createFsm(dyn_string &ex) {

  // logical nodes  
  emuFsm_createFsmNode("FSM", EMU_FSM_DOMAIN_TOP, EMU_FSM_TYPE_TOP, 1);  
  emuFsm_createFsmNode(EMU_FSM_DOMAIN_TOP, EMU_FSM_DOMAIN_INFRA, EMU_FSM_TYPE_TOP, 1);

  // device nodes
  emuFsm_createFsmNode(EMU_FSM_DOMAIN_INFRA, FSM_GAS_DP, FSM_GAS_DPT, false);
  if (emu_checkException(ex)) { return; }  
  fwFsmTree_setNodeLabel(FSM_GAS_DP, FSM_GAS_NODE_NAME);
  
  //finish   
  fwFsmTree_generateAll();
  fwFsmTree_refreshTree();
}
