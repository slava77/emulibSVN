V 11
1
LANG:1 0 
PANEL,-1 -1 1324 650 N "_3DFace" 0
E E E E E 1 -1 -1 0  60 20
""0  1
E "#uses \"CtrlXml\"

dyn_mapping treeData;

mapping getPrimaryData(mapping chamberDeviceParams, dyn_string &ex) {
  emu_info(\"getting primary data\");
  
  mapping primaryDeviceParams;

  int hostId;
  if (chamberDeviceParams[\"side\"] == \"P\") {
    hostId = 600;
  } else {
    hostId = 500;
  }
  primaryDeviceParams[\"hostId\"] = hostId;
  primaryDeviceParams[\"port\"] = 1;  
  primaryDeviceParams[\"address\"] = chamberDeviceParams[\"station\"];
  
  // BUT... actually primaries 2 and 3 service half of ME2 and ME3 each..
  if ((chamberDeviceParams[\"station\"] == 2) || (chamberDeviceParams[\"station\"] == 3)) {
    if (((chamberDeviceParams[\"ring\"] == 2) && (chamberDeviceParams[\"chamberNumber\"] >= 15) && (chamberDeviceParams[\"chamberNumber\"] <= 32)) ||
        ((chamberDeviceParams[\"ring\"] == 1) && (chamberDeviceParams[\"chamberNumber\"] >= 8) && (chamberDeviceParams[\"chamberNumber\"] <= 16))) {
      primaryDeviceParams[\"address\"] = 3;
    } else {
      primaryDeviceParams[\"address\"] = 2;
    }
  }
  
  primaryDeviceParams[\"dcsId\"] = \"CscHighVoltage/Primary_\" + 
                                 primaryDeviceParams[\"hostId\"] + \"_\" +
                                 primaryDeviceParams[\"port\"] + \"_\" +
                                 primaryDeviceParams[\"address\"] + \"/Mon\";

  return primaryDeviceParams;
}

mapping getMasterData(mapping chamberDeviceParams, dyn_string &ex) {
  emu_info(\"getting master data for chamber: \" + chamberDeviceParams);
  
  mapping masterDeviceParams;
  
  string masterIdDp = emuui_getDpName(\"HV_masterId\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterDp = emuui_getDpName(\"HV_masterStatus\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }

  string masterId;
  dpGet(masterIdDp, masterId);
    
  masterDeviceParams[\"id\"] = masterId;
  masterDeviceParams[\"dcsId\"] = dpSubStr(masterDp, DPSUB_DP_EL);
  
  return masterDeviceParams;
}

mapping getMasterChannelData(mapping chamberDeviceParams, dyn_string &ex) {
  emu_info(\"getting master data for chamber: \" + chamberDeviceParams);
  
  mapping masterChannelDeviceParams;
  
  string masterIdDp = emuui_getDpName(\"HV_masterId\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterChannelDp = emuui_getDpName(\"HV_masterChannelStatus\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string moduleIdDp = emuui_getDpName(\"HV_moduleId\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  string masterId, moduleId;
  dpGet(masterIdDp, masterId,
        moduleIdDp, moduleId);
    
  masterChannelDeviceParams[\"channelName\"] = \"ToDistrib\" + moduleId;
  masterChannelDeviceParams[\"id\"] = masterId + \"_\" + masterChannelDeviceParams[\"channelName\"];
  masterChannelDeviceParams[\"dcsId\"] = dpSubStr(masterChannelDp, DPSUB_DP_EL);
  
  return masterChannelDeviceParams;
}

mapping getModuleData(mapping chamberDeviceParams, dyn_string &ex) {
  emu_info(\"getting module data for chamber: \" + chamberDeviceParams);

  mapping moduleDeviceParams;
  
  string moduleIdDp = emuui_getDpName(\"HV_moduleId\", chamberDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string numChansDp = dpSubStr(moduleIdDp, DPSUB_SYS_DP) + \".num_chans\";

  string moduleId;
  dpGet(moduleIdDp, moduleId);
  int numChans;
  dpGet(numChansDp, numChans);
  
  moduleDeviceParams[\"id\"] = moduleId;
  moduleDeviceParams[\"dcsId\"] = dpSubStr(chamberDeviceParams[\"dcsId\"], DPSUB_DP);
  moduleDeviceParams[\"channelsStart\"] = 1;
  moduleDeviceParams[\"channelsEnd\"] = numChans;

  return moduleDeviceParams;
}

dyn_mapping getAllChambers(dyn_string &ex) {
  emu_info(\"getting all chambers\");
  dyn_string chamberDps = dpNames(\"*:*\", \"CscHvChamber\");
  emu_info(dynlen(chamberDps) + \" chambers found\");
  dyn_mapping chambersDeviceParams;
  
  for (int i=1; i <= dynlen(chamberDps); i++) {
    mapping deviceParams = emu_fsmNodeToDeviceParams(chamberDps[i], ex);
    if (emu_checkException(ex)) { return; }
    deviceParams[\"dcsId\"] = chamberDps[i];
    dynAppend(chambersDeviceParams, deviceParams);
  }
  
  return chambersDeviceParams;
}

void writeXml() {
  int docId = xmlNewDocument();
  emu_info(\"New XML document created, id = \" + docId);
  
  xmlAppendChild(docId, -1, XML_COMMENT_NODE, \"HV devices\");
  int hvNode = xmlAppendChild(docId, -1, XML_ELEMENT_NODE, \"hv\"); 
  
  addNodesToXml(docId, hvNode, treeData, 1, mappingKeys(treeData[1]));
  
  
//   node = xmlAppendChild(docId, node, XML_ELEMENT_NODE, \"sub_element\"); 
//   xmlSetElementAttribute(docId, node, \"anAttribute\", \"a value\"); 
//   node = xmlAppendChild(docId, node, XML_TEXT_NODE, \"some text\"); 
//   xmlSetNodeValue(docId, node, \"The new value\"); 
//   
//  string doc = xmlDocumentToString(docId);
  xmlDocumentToFile(docId, \"hvMapping.xml\");
  xmlCloseDocument(docId);
  emu_info(\"XML document saved\");
}

void addNodesToXml(int docId, int parentNode, dyn_mapping data, int level, dyn_string keys) {
  for (int i=1; i <= dynlen(keys); i++) {
    string key = keys[i];
    int nodeId = xmlAppendChild(docId, parentNode, XML_ELEMENT_NODE, data[level][key][\"type\"]);
    for (int j=1; j <= mappinglen(data[level][key]); j++) {
      string attrKey = mappingGetKey(data[level][key], j);
      if ((attrKey != \"type\") && (attrKey != \"children\")){
        xmlSetElementAttribute(docId, nodeId, attrKey, data[level][key][attrKey]);
      }
    }
    
    if (mappingHasKey(data[level][key], \"children\")) {
      dyn_string children = data[level][key][\"children\"];
      addNodesToXml(docId, nodeId, data, level + 1, children);
    }
  }
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"PUSH_BUTTON1"
""
1 60 20 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  58 18 182 45

T 
1
LANG:1 11 Get Mapping
"main()
{ 
  mapping primaries;
  mapping masters;
  mapping masterChannels;
  mapping modules;
  mapping hvSegments;
  mapping chambers;
  
  dyn_string ex;
  dyn_mapping allChambers = getAllChambers(ex);
  if (emu_checkException(ex)) { return; }
  table.deleteAllLines();
  for (int i=1; i <= dynlen(allChambers); i++) {
    mapping chamber = allChambers[i];
    mapping module = getModuleData(chamber, ex);
    if (emu_checkException(ex)) { return; }
    mapping master = getMasterData(chamber, ex);
    if (emu_checkException(ex)) { return; }
    mapping masterChannel = getMasterChannelData(chamber, ex);
    if (emu_checkException(ex)) { return; }
    mapping primary = getPrimaryData(chamber, ex);
    if (emu_checkException(ex)) { return; }
    table.appendLine(\"chamber\", chamber, \"module\", module, 
                     \"master\", master, \"primary\", primary);
    
    // put in the structure for xml
    // primary
    primary[\"type\"] = \"hvPrimary\";
    string primaryId = primary[\"hostId\"] + \"_\" + 
                       primary[\"address\"] + \"_\" +
                       primary[\"port\"];
    primary[\"id\"] = primaryId;
    if (!mappingHasKey(primaries, primaryId)) {
      primaries[primaryId] = primary;
      primaries[primaryId][\"children\"] = makeDynString(); // masters
    }
    // master
    master[\"type\"] = \"hvMaster\";
    if (!mappingHasKey(masters, master[\"id\"])) {
      masters[master[\"id\"]] = master;
      masters[master[\"id\"]][\"children\"] = makeDynString(); // master channels
    }
    if (!dynContains(primaries[primaryId][\"children\"], master[\"id\"])) {
      dynAppend(primaries[primaryId][\"children\"], master[\"id\"]);
    }
    
    // master channel
    masterChannel[\"type\"] = \"hvMasterChannel\";
    if (!mappingHasKey(masterChannels, masterChannel[\"id\"])) {
      masterChannels[masterChannel[\"id\"]] = masterChannel;
      masterChannels[masterChannel[\"id\"]][\"children\"] = makeDynString(); // modules
    }    
    if (!dynContains(masters[master[\"id\"]][\"children\"], masterChannel[\"id\"])) {
      dynAppend(masters[master[\"id\"]][\"children\"], masterChannel[\"id\"]);
    }

//    module[\"masterChannel\"] = masterChannelNum; // no master channels - master channel just an attribute in module
    
    // module
    int channelsStart = module[\"channelsStart\"];
    int channelsEnd = module[\"channelsEnd\"];
    mappingRemove(module, \"channelsStart\");
    mappingRemove(module, \"channelsEnd\");
    
    module[\"type\"] = \"hvDistribution\";
    if (!mappingHasKey(modules, module[\"id\"])) {
      modules[module[\"id\"]] = module;
      modules[module[\"id\"]][\"children\"] = makeDynString(); // chambers
    }
    if (!dynContains(masterChannels[masterChannel[\"id\"]][\"children\"], module[\"id\"])) {
      dynAppend(masterChannels[masterChannel[\"id\"]][\"children\"], module[\"id\"]);
    }
//     if (!dynContains(masters[master[\"id\"]][\"children\"], module[\"id\"])) {
//       dynAppend(masters[master[\"id\"]][\"children\"], module[\"id\"]);
//     }
    
    
    // chamber & HV segments
    chamber[\"type\"] = \"chamber\";
    string side = \"+\";
    if (chamber[\"side\"] == \"M\") { side = \"-\"; }
    string chamberId = \"ME\" + side + chamber[\"station\"] + \"/\" + 
                                     chamber[\"ring\"] + \"/\" +
                                     chamber[\"chamberNumber\"];
    chamber[\"id\"] = chamberId;
    
    int segment = 1;
    string moduleDp = module[\"dcsId\"];
    for (int channel=channelsStart; channel <= channelsEnd; channel++) {
      mapping hvSegment;
      hvSegment[\"type\"] = \"hvSegment\";
      string segNumStr;
      sprintf(segNumStr, \"%02d\", segment);
      segment++;
      string segmentId = chamberId + \"/hvSeg\" + segNumStr;
      hvSegment[\"moduleChannel\"] = channel;
      hvSegment[\"isInChamber\"] = chamberId;
      string dcsId = moduleDp + \"/FastMon.channels.ch\" + channel;
      if (strpos(moduleDp, \"FastMon\") >= 0) {
        dcsId = moduleDp + \".channels.ch\" + channel;
      }
      hvSegment[\"dcsId\"] = dcsId;
      hvSegments[segmentId] = hvSegment;
      dynAppend(modules[module[\"id\"]][\"children\"], segmentId);
    }
        
    
    
//     if (!mappingHasKey(chambers, chamberId)) {
//       chambers[chamberId] = chamber;
//     }
//     if (!dynContains(modules[module[\"id\"]][\"children\"], chamber[\"id\"])) {
//       dynAppend(modules[module[\"id\"]][\"children\"], chamber[\"id\"]);
//     }
    
  }
  
  dynClear(treeData);
  dynAppend(treeData, primaries);
  dynAppend(treeData, masters);
  dynAppend(treeData, masterChannels);
  dynAppend(treeData, modules);
//  dynAppend(treeData, moduleChannels);
  dynAppend(treeData, hvSegments);
  
  emu_info(\"DONE!\");  
}" 0
 E E E
25 1
"table"
""
1 10 70 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  8 68 1302 642
"main()
{
  this.tableMode = TABLE_SELECT_MULTIPLE;
  this.selectByClick = TABLE_SELECT_LINE;
}" 0
E 1 0 1 4 0 "chamber" 26 1 0 "s" 1
LANG:1 7 Chamber
E
1
LANG:1 0 

250 "module" 54 1 0 "s" 1
LANG:1 6 Module
E
1
LANG:1 0 

500 "master" 38 1 0 "s" 1
LANG:1 6 Master
E
1
LANG:1 0 

350 "primary" 18 1 0 "s" 1
LANG:1 7 Primary
E
1
LANG:1 0 

170 
14 14 10 10
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
13 2
"PUSH_BUTTON2"
""
1 200 20 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  198 18 322 45

T 
1
LANG:1 12 Write to XML
"main()
{
  emu_info(\"Writing to XML...\");
  writeXml();
  emu_info(\"DONE!\");
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
