V 10
1
LANG:1 0 
PANEL,-1 -1 1348 469 N "_3DFace" 0
"const int EMUUI_CHAMBER_WIDTH = 20;
const int EMUUI_CHAMBER_HEIGHT = 20;
mapping stationRingCount;

main()
{
  initConsts();
  drawEMU(30, 30);
  
  // set chamber colors
  for (int i=-4; i <= 4; i++) {
    string side = \"P\";
    if (i < 0) { side = \"M\"; }
    if (i == 0) { continue; } // no such station
    int station = emu_abs(i);
    
    for (int ring = 1; ring <= stationRingCount[side + station]; ring++) {
      int chamberCount = 18;
      if (station == 1) { chamberCount = 36; }
      
      for (int chamberNum=1; chamberNum <= chamberCount; chamberNum++) {
        int red = 7 * chamberNum;
        int green = 85 * ring;
        int blue = 63 * station;
        setValue(\"refChamber_\" + side + station + ring + \"_\" + chamberNum + \".chamberRect\", \"backCol\", \"{\" + red + \";\" + green + \";\" + blue + \"}\");
      }
    }
  }
  
  drawGradient(30, 380);
  drawGradient2(30, 410);
}

void initConsts() {
  stationRingCount[\"P1\"] = 3;
  stationRingCount[\"P2\"] = 2;
  stationRingCount[\"P3\"] = 2;
  stationRingCount[\"P4\"] = 1;
  stationRingCount[\"M1\"] = 3;
  stationRingCount[\"M2\"] = 2;
  stationRingCount[\"M3\"] = 2;
  stationRingCount[\"M4\"] = 1;
}

void drawEMU(int x, int y) {
  int currentY = y;
  for (int i=4; i >= -4; i--) {
    string side = \"P\";
    if (i < 0) { side = \"M\"; }
    if (i == 0) { continue; } // no such station
    int station = emu_abs(i);
    
    if (side == \"M\") { // count rings increasingly
      for (int ring = 1; ring <= stationRingCount[side + station]; ring++) {
        drawStation(x, currentY, side, station, ring);
        currentY += EMUUI_CHAMBER_HEIGHT;
      }
    } else { // count ring decresingly
      for (int ring = stationRingCount[side + station]; ring >= 1; ring--) {
        drawStation(x, currentY, side, station, ring);
        currentY += EMUUI_CHAMBER_HEIGHT;
      }
    }
  }
}

void drawStation(int x, int y, string side, int station, int ring) {
  int chamberCount = 18;
  int scaleWidth = 2;
  if (station == 1) {
    chamberCount = 36;
    scaleWidth = 1;
  }
  
  for (int i=1; i <= chamberCount; i++) {
    string chamberName;
    string strChamberNumber;
    sprintf(strChamberNumber, \"%02d\", i);
    chamberName = strChamberNumber;
    
    int chamberX = x + (EMUUI_CHAMBER_WIDTH * scaleWidth * (i - 1));
    
    //import the chamber panel (no changes in the panel shape; position - [0,0])
    string refName = \"refChamber_\" + side + station + ring + \"_\" + i;
    addSymbol(myModuleName(), myPanelName(),
              \"objects/CMS_CSC_UI/ChamberRect.pnl\",
              refName,
              makeDynString(\"$name:\" + chamberName, \"$side:\" + side, \"$station:\" + station, \"$ring:\" + ring, \"$chamberNumber:\" + strChamberNumber),
              chamberX, y, 0, 1, 1);
    setValue(refName + \".chamberRect\", \"scale\", scaleWidth, 1);
  }
}

// algorythm 1 - constant brightness
void drawGradient(int x, int y) {
  int currentX = x;
  
  for (int i=3; i >= 2; i--) {
    for (int shade=0; shade < 256; shade++) {
      dyn_int color;
      color[1] = 0; color[2] = 0; color[3] = 0;
      
      color[i] = 255 - shade;
      color[i-1] = shade;
      
      currentX += 1;
      string refName = \"gradientLine_\" + ((i - 1) * 256 + shade);
      addSymbol(myModuleName(), myPanelName(),
                \"objects/CMS_CSC_UI/refLine.pnl\",
                refName,
                makeDynString(),
                currentX, y, 0, 1, 1);
      setValue(refName + \".line\", \"foreCol\", \"{\" + color[1] + \";\" + color[2] + \";\" + color[3] + \"}\");
    }
  }
}

// algorythm 2 - more colors
void drawGradient2(int x, int y) {
  int currentX = x;
  
  for (int i=1; i <= 3; i++) {
    int maxShade = 510;
    if (i == 3) { maxShade = 255; }
    for (int shade=0; shade <= maxShade; shade++) {
      dyn_int color;
      color[1] = 0; color[2] = 0; color[3] = 0;
      
      int currentColor = i;
      int nextColor = i + 1;
      if (nextColor > 3) { nextColor = 1; }
      
      color[currentColor] = 510 - shade;
      color[nextColor] = shade;

      for (int j=1; j <= 3; j++) {
        if (color[j] > 255) {
          color[j] = 255;
        }
      }
            
      currentX += 1;
      string refName = \"gradientLine2_\" + ((i - 1) * 511 + shade);
      addSymbol(myModuleName(), myPanelName(),
                \"objects/CMS_CSC_UI/refLine.pnl\",
                refName,
                makeDynString(),
                currentX, y, 0, 1, 1);
      setValue(refName + \".line\", \"foreCol\", \"{\" + color[1] + \";\" + color[2] + \";\" + color[3] + \"}\");
    }
  }
}" 0
 E E E E 1 -1 -1 0  -1 -1
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0