V 10
1
LANG:1 0 
PANEL,-1 -1 538 515 N "_3DFace" 3
"$diameter"
"$side"
"$station"
"main()
{
  int radius = $diameter / 2;
  
  dyn_string ex;
  drawStation(radius, radius, radius, $side, $station, ex);
  if (emu_checkException(ex)) { return; }
}


/** Draws a CSC station. */
void drawStation(int x, int y, int radius, string side, int station, dyn_string &exceptionInfo){
  mapping layoutParams = emuui_getMapping(\"chamberLayout\", exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  int gap = layoutParams[\"gapBetweenRings\"];
  float scale = ((float) radius) / 100; // all parameters in layoutParams are in 100px radius scale
  
  if (station == 1){ // stations ME +&- 1
    //ring 1
    drawRing(x, y, scaleValue(layoutParams[\"innerRadius_ME11\"], scale), 
                   scaleValue(layoutParams[\"innerRadius_ME12\"], scale) - gap, 36, side, station, 1);
    //ring 2
    drawRing(x, y, scaleValue(layoutParams[\"innerRadius_ME12\"], scale), 
                   scaleValue(layoutParams[\"innerRadius_ME13\"], scale) - scaleValue(layoutParams[\"gapBetweenME12-ME13\"], scale), 
                   36, side, station, 2);
    //ring 3
    drawRing(x, y, scaleValue(layoutParams[\"innerRadius_ME13\"], scale), radius, 36, side, station, 3);
  } else {    // other stations
    for (int ring=1; ring <= layoutParams[\"ringCount_ME_\" + side + station]; ring++) {
      int chamberCount = 18;
      if (ring > 1) { chamberCount = 36; }
      int outerRadius = radius; // if it's the last ring then the outer radius equals the radius of the whole station
      if (ring < 2) { // if it's not the last ring then the outer radius equals inner radius of the next ring minus gap between them
        outerRadius = scaleValue(layoutParams[\"innerRadius_ME\" + station + (ring + 1)], scale) - gap;
      }
      
      drawRing(x, y, scaleValue(layoutParams[\"innerRadius_ME\" + station + ring], scale),
                     outerRadius,
                     chamberCount, side, station, ring);
    }
  }
}

/** multiplies the value by scale and then rounds the result to the nearest integer. */
int scaleValue(int value, float scale) {
  float floatValue = (float) value;
  int ret = floor(floatValue * scale);
  
  if ((floatValue * scale) - ret > 0.5) { // round the value correctly
    ret++;
  }
  
  return ret;
}

/** Draws a CSCs ring. You have to provide coordinates where to draw it, then inner and outer radius of the ring and ring parameters:
        side (\"P\" or \"M\"), station number and ring number. */
void drawRing(int x, int y, int innerRadius, int outerRadius, int chamberCount, string side, int station, int ring) {
  float outerPerimeter = 2 * EMUMATH_PI * outerRadius;
  float innerPerimeter = 2 * EMUMATH_PI * innerRadius;
  float angleStep = (2 * EMUMATH_PI) / chamberCount;
  float angleOffset = ((2 * EMUMATH_PI) / chamberCount) / 2; // to keep the chambers nicely alligned
  int chamberHeight = outerRadius - innerRadius;
  int chamberInnerWidth = floor((float)(innerPerimeter / chamberCount));
  int chamberOuterWidth = floor((float)(outerPerimeter / chamberCount));
  int captionRadius = outerRadius - (chamberHeight / 2);     // radius of the ring on which chamber captions will be positioned
  
  for (int i=0; i < chamberCount; i++) {
    //compute the angle and position
    float angle = i * angleStep + angleOffset;
    float angleDeg = rad2deg(angle);             //convert angle from radians to degrees
    int posX = -1 * outerRadius * cos(angle) + x;
    int posY = -1 * outerRadius * sin(angle) + y;
    int captionPosX = -1 * captionRadius * cos(angle) + x;
    int captionPosY = -1 * captionRadius * sin(angle) + y;
    
    //construct a chamber name
    string chamberName;
    string strChamberNumber;
    sprintf(strChamberNumber, \"%02d\", i + 1); // 1-based indexing
    chamberName = strChamberNumber;
    //full name could be used (e.g. ME+1/1/1)
    //string sideSign = \"+\";
    //if (side == \"M\") { sideSign = \"-\"; }
    //chamberName = \"ME\" + sideSign + station + \"/\" + ring + \"/\" + (i + 1);

    // setup various parameters (information about device) for refDevice.pnl
    string refName = \"refChamber_\" + side + station + ring + \"_\" + strChamberNumber;  //reference name
    string deviceParamsDollar = \"$deviceParams:\" + \"side=\" + side +
                                                   \";station=\" + station +
                                                   \";ring=\" + ring +
                                                   \";chamberNumber=\" + strChamberNumber;
    string shapeParamsDollar = \"$shapeParams:\" + \"type=chamber\" +
                                                 \";outerWidth=\" + chamberOuterWidth +
                                                 \";innerWidth=\" + chamberInnerWidth +
                                                 \";height=\" + chamberHeight;
    string groupDollar = \"$group:\" + emuui_getSessionDp(\"mainChamberView\");          //group name
    
    //import the chamber panel (no changes in the panel orientation; position - [0,0])
    addSymbol(myModuleName(), myPanelName(),
              \"objects/CMS_CSC_UI/refDevice.pnl\",
              refName,
              makeDynString(\"$caption:\" + chamberName, \"$deviceType:chamber\",
                            deviceParamsDollar, shapeParamsDollar, groupDollar),
              0, 0, 0, 1, 1);
    
//transfer the chamber local coordinate system from the upper left corner to the middle of the outer part (where we think we have the center :) )
//     posX += sin(angle) * (chamberOuterWidth / 2);
//     posY -= cos(angle) * (chamberOuterWidth / 2);
    
    //position the chamber
    setValue(refName + \".chamber\", \"position\", posX, posY);
    setValue(refName + \".chamber\", \"rotation\", -1 * angleDeg);

    //position the caption
    setValue(refName + \".caption\", \"position\", captionPosX, captionPosY);
    if ((angleDeg > 90) && (angleDeg <= 270)){
      setValue(refName + \".caption\", \"rotation\", -1 * angleDeg + 180);
    } else {
      setValue(refName + \".caption\", \"rotation\", -1 * angleDeg);
    }
  }
}" 0
 E E E E 1 -1 -1 0  -1 -1
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0