V 10
1
LANG:1 0 
PANEL,-1 -1 367 199 N "_3DFace" 1
"$deviceParams"
"main()
{
  dyn_string ex;
  deviceParams = emuui_parseParameterString($deviceParams, ex);
  if (emu_checkException(ex)) { return; }

  getValue(\"refPoint\", \"position\", posX, posY);

  // -------=========== CFEB ============---------
  
  //cycle through 5 CFEBs at most, get the datapoints for each board and voltage and fill the dpIndexToTableCell map
  dyn_string vMonDps, iMonDps;
  deviceParams[\"boardType\"] = \"Cfeb\";
  dyn_string voltageLines = makeDynString(\"33\", \"50\", \"60\"); // 3.3V, 5.0V and 6.0V lines
  int index = 1;
  for (int i=1; i <= 5; i++) { // cycle through cfeb boards
    deviceParams[\"boardNumber\"] = i;
    for (int j=1; j <= dynlen(voltageLines); j++) { // cycle through voltage lines
      deviceParams[\"voltageLine\"] = voltageLines[j];
      string dp = emuui_getDpName(\"chamber_LV_CFEB_vMon\", deviceParams, ex); // get vMon dp
      if (emu_checkException(ex)) { return; }
      if (strlen(dp) == 0) { // if that dp does not exist delete the column in the table and break the loop - happens e.g. when CFEB5 does not exist
        tableCfeb.deleteColumn(i - 1);
        break;
      }
      vMonDps[index] = dp;
      string dp = emuui_getDpName(\"chamber_LV_CFEB_iMon\", deviceParams, ex); // get iMon dp
      if (emu_checkException(ex)) { return; }
      iMonDps[index] = dp;
      dpIndexToTableCell[index] = makeDynMixed(j - 1, \"Cfeb_\" + i); // location in table is [j; boardType_boardNumber]
      index++;
    }
  }
  
  initGui();
  
  dyn_string values;
  dynAppend(values, vMonDps);
  dynAppend(values, iMonDps);

  dpConnect(\"updateCfebLvCB\", true, values);

  // CFEB ALARM COLORS
  for (int i=1; i <= dynlen(values); i++) {
    values[i] += \":_alert_hdl.._act_state_color\";
  }
  
  dpConnect(\"updateCfebAlarmColorsCB\", true, values);
  
  //----------============= ALCT ================-------------
  dynClear(vMonDps);
  dynClear(iMonDps);
  deviceParams[\"boardType\"] = \"Alct\";
  deviceParams[\"boardNumber\"] = 1;
  voltageLines = makeDynString(\"18\", \"33\", \"55\", \"56\"); // 3.3V, 5.0V and 6.0V lines
  for (int i=1; i <= dynlen(voltageLines); i++) {
    deviceParams[\"voltageLine\"] = voltageLines[i];
    string dp = emuui_getDpName(\"chamber_LV_ALCT_vMon\", deviceParams, ex); // get vMon dp
    if (emu_checkException(ex)) { return; }
    if (strlen(dp) == 0) { emu_errorSingle(\"vMon dp not found for given deviceParams: \" + emu_mappingToString(deviceParams)); }
    dynAppend(vMonDps, dp);
    dp = emuui_getDpName(\"chamber_LV_ALCT_iMon\", deviceParams, ex); // get iMon dp
    if (emu_checkException(ex)) { return; }
    if (strlen(dp) == 0) { emu_errorSingle(\"iMon dp not found for given deviceParams: \" + emu_mappingToString(deviceParams)); }
    dynAppend(iMonDps, dp);
  }

  dynClear(values);  
  dynAppend(values, vMonDps);
  dynAppend(values, iMonDps);

  dpConnect(\"updateAlctLvCB\", true, values);  
  
  // ALCT ALARM COLORS
  for (int i=1; i <= dynlen(values); i++) {
    values[i] += \":_alert_hdl.._act_state_color\";
  }
  
  dpConnect(\"updateAlctAlarmColorsCB\", true, values);
  
  // ----------========== FSM NODE ==========----------
  fsmNode = emuui_getFsmNode(\"chamber_low_voltage\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }

  int fsmX, fsmY;
  getValue(\"fsmRefPoint\", \"position\", fsmX, fsmY);
  dyn_string refs = emuui_addFsmNode(fsmNode, fsmX, fsmY, true);
  dynAppend(references, refs);
  
  dpConnect(\"positionChangedCB\", true, emuui_getSessionDp(\"tooltipPositionUpdated\"));

  // ----------========== DISCONNECTED WARNING ==========----------
  if (dynlen(values) > 1) {
    deviceParams[\"sysName\"] = emuui_getSystemName(values[1]);
  }
  string disconnectedDevicesDp = emuui_getDpName(\"disconnected_devices\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dpConnect(\"updateDisconnectedWarningCB\", true, disconnectedDevicesDp);
}

void initGui() {
  // -------=========== prepare CFEB Table ============---------
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.rowHeader(0, \"3.3 V\");
  tableCfeb.rowHeader(1, \"5 V\");
  tableCfeb.rowHeader(2, \"6 V\");
  emuui_tableCompact(\"tableCfeb\", 3);
  
  // -------=========== prepare ALCT Table ============---------
  tableAlct.appendLine(\"#1\", \"\");
  tableAlct.rowHeader(0, \"ALCT\");
  emuui_tableCompact(\"tableAlct\", 1);
}" 0
 "main()
{
  emuui_destroyReferences(references);
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "//some panel-wide constants and variables
mapping deviceParams;
dyn_dyn_mixed dpIndexToTableCell; // map of DP index in the array and coordinates in the Cfeb table where they should be written
string fsmNode;
dyn_string references;
int posX, posY;

void positionChangedCB(string dummyDpName, int dummyValue) {
  int oldPosX = posX,
      oldPosY = posY;
  getValue(\"refPoint\", \"position\", posX, posY);

  emuui_repositionObjectRelatively(references, oldPosX, oldPosY, posX, posY);  
}

/** Call-back function which updates voltages and currents for CFEBs. */
void updateCfebLvCB(dyn_string dps, dyn_float voltagesAndCurrents) {
  int currentsOffset = dynlen(voltagesAndCurrents) / 2; // the first half of this array is filled with voltages, the second one with currents
  
  for (int i=1; i <= dynlen(voltagesAndCurrents) / 2; i++) {
    string strValue;
    string strToShow;
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i]);
    strToShow += strValue + \"V, \";
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i + currentsOffset]);
    strToShow += strValue + \"A\";
    tableCfeb.cellValueRC(dpIndexToTableCell[i][1], dpIndexToTableCell[i][2], strToShow);
  }
  
  lblLastUpdate.text = emuui_getLastUpdateTime(dps[1]);
}

/** Call-back function which updates the background color of the CFEB table cells accordingly to cfeb voltage and current alarm color. */
void updateCfebAlarmColorsCB(dyn_string dps, dyn_string colors) {
  int currentsOffset = dynlen(colors) / 2; // the first half of this array is filled with voltage alarm colors, the second one with current alarm colors
  
  for (int i=1; i <= dynlen(colors) / 2; i++) {
    string voltageAlarmColor = colors[i];
    string currentAlarmColor = colors[i + currentsOffset];
    if (strlen(voltageAlarmColor) == 0) {
      voltageAlarmColor = \"FwStateOKPhysics\";
    }
    string mainColor = voltageAlarmColor;
    if ((strlen(currentAlarmColor) != 0) && (currentAlarmColor != \"FwStateOKPhysics\")) { // if there's an error in current, put this color in main color
      mainColor = currentAlarmColor;
    }
    
    tableCfeb.cellBackColRC(dpIndexToTableCell[i][1], dpIndexToTableCell[i][2], mainColor);
  }
}                             
                             
/** Call-back function which updates voltages and currents for ALCT. */
void updateAlctLvCB(dyn_string dps, dyn_float voltagesAndCurrents) {
  int currentsOffset = dynlen(voltagesAndCurrents) / 2; // the first half of this array is filled with voltages, the second one with currents
  
  for (int i=1; i <= dynlen(voltagesAndCurrents) / 2; i++) {
    string strValue;
    string strToShow;
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i]);
    strToShow += strValue + \"V, \";
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i + currentsOffset]);
    strToShow += strValue + \"A\";
    tableAlct.cellValueRC(0, tableAlct.columnToName(i - 1), strToShow);
  }
  
  lblLastUpdate.text = emuui_getLastUpdateTime(dps[1]);
}

/** Call-back function which updates the background color of the ALCT table cells accordingly to ALCT voltage and current alarm color. */
void updateAlctAlarmColorsCB(dyn_string dps, dyn_string colors) {
  int currentsOffset = dynlen(colors) / 2; // the first half of this array is filled with voltage alarm colors, the second one with current alarm colors
  
  for (int i=1; i <= dynlen(colors) / 2; i++) {
    string voltageAlarmColor = colors[i];
    string currentAlarmColor = colors[i + currentsOffset];
    if (strlen(voltageAlarmColor) == 0) {
      voltageAlarmColor = \"FwStateOKPhysics\";
    }
    string mainColor = voltageAlarmColor;
    if ((strlen(currentAlarmColor) != 0) && (currentAlarmColor != \"FwStateOKPhysics\")) { // if there's an error in current, put this color in main color
      mainColor = currentAlarmColor;
    }
    
    tableAlct.cellBackColRC(0, tableAlct.columnToName(i - 1), mainColor);
  }
}

/** if disconnectedDevices contains hvFsmNode then \"no communication\" warning is shown, otherwise it's hidden. */
void updateDisconnectedWarningCB(string dpName, string disconnectedDevices) {
  if (strpos(disconnectedDevices, fsmNode) >= 0) {
    emuui_showTooltipWarning(getShape(\"refPoint\"),
                           getShape(\"warnNoLvCommunication\"), 
                           getShape(\"chamber_low_voltage_tooltipBack\"));
  } else {
    emuui_hideTooltipWarning(getShape(\"warnNoLvCommunication\"), 
                             getShape(\"chamber_low_voltage_tooltipBack\"));
  }
}
" 0
 2
"CBRef" "1"
"EClose" "main()
{
  emuui_destroyReferences(references);
  PanelOff();
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 12
"chamber_low_voltage_tooltipBack"
""
1 400 40 E E E 1 E 1 E N {0,0,0} E N {255,255,225} E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 3.18181818181818 0 1.77777777777778 -1272.72727272727 -71.1111111111111 1 E 400 40 510 130
2 1
"PRIMITIVE_TEXT1"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 10 69 24
0 2 2 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 11 Low Voltage
2 5
"PRIMITIVE_TEXT3"
""
1 190 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 190 10 249 24
0 2 2 "0s" 0 0 0 192 0 0  190 10 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 12 Last update:
2 4
"lblLastUpdate"
""
1 250 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 250 10 297 24
0 2 2 "0s" 0 0 0 192 0 0  250 10 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 9 timestamp
25 2
"tableCfeb"
""
1 10 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 8 28 342 96
EE 1 1 1 5 3 "Cfeb_1" 5 1 0 "s" 1
LANG:1 6 CFEB 1
E
1
LANG:1 0 

58 "Cfeb_2" 5 1 0 "s" 1
LANG:1 6 CFEB 2
E
1
LANG:1 0 

58 "Cfeb_3" 5 1 0 "s" 1
LANG:1 6 CFEB 3
E
1
LANG:1 0 

58 "Cfeb_4" 5 1 0 "s" 1
LANG:1 6 CFEB 4
E
1
LANG:1 0 

58 "Cfeb_5" 5 1 0 "s" 1
LANG:1 6 CFEB 5
E
1
LANG:1 0 

58 
14 14 "" 1 1
LANG:1 5 3.3 V
"" 1 1
LANG:1 3 5 V
"" 1 1
LANG:1 3 6 V
10 38
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
0 0 0 1 7
1 0
25 3
"tableAlct"
""
1 10 110 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 8 108 292 148
EE 1 1 1 4 1 "#1" 5 1 0 "s" 1
LANG:1 5 1.8 V
E
1
LANG:1 0 

58 "#2" 5 1 0 "s" 1
LANG:1 5 3.3 V
E
1
LANG:1 0 

58 "#3" 5 1 0 "s" 1
LANG:1 5 5.5 V
E
1
LANG:1 0 

58 "#4" 5 1 0 "s" 1
LANG:1 5 5.6 V
E
1
LANG:1 0 

58 
14 14 "" 1 1
LANG:1 4 ALCT
10 38
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
0 0 0 1 7
1 0
7 6
"refPoint"
""
1 140 110 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 -140 -110 1 E 140 110 10 10
6 7
"fsmRefPoint"
""
1 110 0 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 2.5 0 1 -185 6 1 E 110 0 130 20
2 8
"warnNoLvCommunication"
""
1 10 170 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 170 335 184
1 2 2 "0s" 0 0 0 65 0 0  10 170 1
1
LANG:1 101 -*-MS Shell Dlg-bold-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,758,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 16 No Communication
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0