V 10
1
LANG:1 0 
PANEL,-1 -1 502 189 N "_3DFace" 1
"$deviceParams"
"main()
{
  dyn_string ex;
  deviceParams = emuui_parseDeviceParameters($deviceParams, ex);
  if (emu_checkException(ex)) { return; }

  //cycle through 5 CFEBs at most, get the datapoints for each board and voltage and fill the dpIndexToTableCell map
  dyn_string vMonDps, iMonDps;
  deviceParams[\"boardType\"] = \"Cfeb\";
  dyn_string voltageLines = makeDynString(\"33\", \"50\", \"60\"); // 3.3V, 5.0V and 6.0V lines
  int index = 1;
  for (int i=1; i <= 5; i++) { // cycle through cfeb boards
    deviceParams[\"boardNumber\"] = i;
    for (int j=1; j <= dynlen(voltageLines); j++) { // cycle through voltage lines
      deviceParams[\"voltageLine\"] = voltageLines[j];
      string dp = emuui_getDpName(\"chamber_LV_vMon\", deviceParams, ex); // get vMon dp
      if (emu_checkException(ex)) { return; }
      if (strlen(dp) == 0) { // if that dp does not exist delete the column in the table and break the loop - happens e.g. when CFEB5 does not exist
        tableCfeb.deleteColumn(i - 1);
        break;
      }
      vMonDps[index] = dp;
      string dp = emuui_getDpName(\"chamber_LV_iMon\", deviceParams, ex); // get iMon dp
      if (emu_checkException(ex)) { return; }
      iMonDps[index] = dp;
      dpIndexToTableCell[index] = makeDynMixed(j - 1, \"Cfeb_\" + i); // location in table is [j; boardType_boardNumber]
      index++;
    }
  }
  
  initGui();
  
  dyn_string values;
  dynAppend(values, vMonDps);
  dynAppend(values, iMonDps);

  dpConnect(\"updateCfebLvCB\", true, values);
  
//   dyn_string dps = emuui_getDpNames(\"chamber_temperature\", deviceParams, ex);
//   if (emu_checkException(ex)) { return; }
//   
//   initGui(dps);
//   
//   dpConnect(\"updateTemperatureCB\", true, dps);
}

void initGui() {
  //set the appropriate width for the table
  int columnCount = tableCfeb.columnCount();
  int newTableWidth = 0;
  for (int i=0; i < columnCount; i++) {
    newTableWidth += tableCfeb.columnWidth(i);
  }
  newTableWidth += TABLE_BORDER_WIDTH;
  
  int actualWidth, actualHeight;
  getValue(\"tableCfeb\", \"size\", actualWidth, actualHeight);
  tableCfeb.size(newTableWidth, actualHeight);
  
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.appendLine(\"Cfeb_1\", \"\");
  tableCfeb.rowHeader(0, \"3.3 V\");
  tableCfeb.rowHeader(1, \"5 V\");
  tableCfeb.rowHeader(2, \"6 V\");
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "//some panel-wide constants and variables
mapping deviceParams;
const int TABLE_BORDER_WIDTH = 44;
dyn_dyn_mixed dpIndexToTableCell; // map of DP index in the array and coordinates in the Cfeb table where they should be written

// Call-back function which updates voltages and currents for CFEBs
void updateCfebLvCB(dyn_string dps, dyn_float voltagesAndCurrents) {
  int currentsOffset = dynlen(voltagesAndCurrents) / 2; // the first half of this array is filled with voltages, the second one with currents
  
  for (int i=1; i <= dynlen(voltagesAndCurrents) / 2; i++) {
    string strValue;
    string strToShow;
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i]);
    strToShow += strValue + \"V @ \";
    sprintf(strValue, \"%.1f\", voltagesAndCurrents[i + currentsOffset]);
    strToShow += strValue + \"A\";
//     = voltagesAndCurrents[i] + \"V @ \" + voltagesAndCurrents[i + currentsOffset] + \"A\";
    tableCfeb.cellValueRC(dpIndexToTableCell[i][1], dpIndexToTableCell[i][2], strToShow);
  }
}



void updateTemperatureCB(dyn_string dps, dyn_float temperatures) {
  for (int i=1; i <= dynlen(columnNames); i++) {
    int index = dynPartiallyContains(dps, columnNames[i]);
    if (index > 0) {
      string strValue;
      sprintf(strValue, \"%d °C\", temperatures[index]);
      tableTemp.cellValueRC(0, columnNames[i], strValue);
    }
  }
}

/** returns index of an element within the container which is first to contain a searchString. -1 is returned if no match is found. */
int dynPartiallyContains(dyn_string container, string searchString) {
  for (int i=1; i <= dynlen(container); i++) {
    if (strpos(container[i], searchString) >= 0) {
      return i;
    }
  }
  return -1;
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
6 0
"RECTANGLE1"
""
1 240 90 E E E 1 E 1 E N {0,0,0} E N {255,255,225} E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1.70833333333333 0 1.22222222222222 0 0 1 E 240 90 0 0
2 1
"PRIMITIVE_TEXT1"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 10 10 69 24
0 2 2 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 11 Low Voltage
25 2
"tableCfeb"
""
1 10 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 8 28 402 96
EE 1 1 1 5 3 "Cfeb_1" 4 1 0 "s" 1
LANG:1 6 CFEB 1
E
1
LANG:1 0 

70 "Cfeb_2" 4 1 0 "s" 1
LANG:1 6 CFEB 2
E
1
LANG:1 0 

70 "Cfeb_3" 4 1 0 "s" 1
LANG:1 6 CFEB 3
E
1
LANG:1 0 

70 "Cfeb_4" 4 1 0 "s" 1
LANG:1 6 CFEB 4
E
1
LANG:1 0 

70 "Cfeb_5" 4 1 0 "s" 1
LANG:1 6 CFEB 5
E
1
LANG:1 0 

70 
14 14 "" 1 1
LANG:1 5 3.3 V
"" 1 1
LANG:1 3 5 V
"" 1 1
LANG:1 3 6 V
10 40
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
0 0 0 1 7
1 0
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0