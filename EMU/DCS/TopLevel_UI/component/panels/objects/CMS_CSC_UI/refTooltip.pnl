V 10
1
LANG:1 0 
PANEL,-1 -1 388 123 N "_3DFace" 3
"$deviceParams"
"$deviceType"
"$mode"
"main()
{
  //initialize some panel-wide variables and constants
  tooltipHeight = EMUUI_TOOLTIP_SHIFT_Y; // to make the tooltip appear a bit lower than the mouse
  tooltipWidth = 0;
  panelSize(\"\", screenSizeX, screenSizeY);
  getCursorPosition(tooltipX, tooltipY);
  tooltipX += EMUUI_TOOLTIP_SHIFT_X;
  
  float zoomFactor;
  getZoomFactor(zoomFactor);
  
  tooltipX /= zoomFactor;
  tooltipY /= zoomFactor;
  
  //add Caption - device name
  if (!addTooltipObj($deviceType + \"_name\")) {
    lblError.visible = true;
    return;
  }

  dyn_string ex;
  string tooltipType = emuui_getMappingValue(\"modeToTooltipObj\", $mode, ex); // get the tooltip type given the device connection mode
  if (dynlen(ex)) { emu_errorHandled(ex); return; } // if the tooltip type is missing - no problem, just don't display that tooltip object
  addTooltipObj(tooltipType); // if tooltip type is found - add the appropriate tooltip object

  // if the tooltip hides over the edge of the panel - correct that  
  int hideX, hideY; // number of pixels of tooltip width or hight that is hidden over the edge of the panel
  hideY = (tooltipY + tooltipHeight) - screenSizeY;
  hideX = (tooltipX + tooltipWidth) - screenSizeX;
  if (hideY < 0) { hideY = 0; } // cut on -0 to avoid funny effects
  if (hideX < 0) { hideX = 0; } // cut on -0 to avoid funny effects
  
  if ((hideY > 0) || (hideX > 0)) {
    for (int i=1; i <= dynlen(refObjects); i++) {
      int objPosX, objPosY;
      getValue(refObjects[i], \"position\", objPosX, objPosY);
      objPosY -= hideY;
      if (hideX > 0) {
        objPosX -= tooltipWidth + (EMUUI_TOOLTIP_SHIFT_X * 2);
        objPosY -= EMUUI_TOOLTIP_SHIFT_Y;
      }
      setValue(refObjects[i], \"position\", objPosX, objPosY);
    }
  }

}
" 0
 "main()
{
  for (int i=1; i <= dynlen(refObjects); i++) {
    removeSymbol(myModuleName(), myPanelName(), refObjects[i]);
  }
}" 0
 E E E 1 -1 -1 0  30 40
""0  1
E "int tooltipHeight, tooltipWidth;
int tooltipX, tooltipY;
int screenSizeX, screenSizeY;
dyn_string refObjects;

// shift the tooltip a bit down and right in order not to overlap it with mouse cursor
const int EMUUI_TOOLTIP_SHIFT_X = 8;
const int EMUUI_TOOLTIP_SHIFT_Y = 20;

string getTooltipObjFile(string type) {
  dyn_string filenames = getFileNames(PROJ_PATH + \"panels/objects/CMS_CSC_UI/tooltip_objects\", \"refTooltipObj_\" + type + \".pnl\");
  if (dynlen(filenames) > 0) {
    return \"objects/CMS_CSC_UI/tooltip_objects/\" + filenames[1];
  }
  return \"\";
}

/** Adds a tooltip object and returns true on success and false if it failed (e.g. file was not found). */
bool addTooltipObj(string type) {
  string filename = getTooltipObjFile(type);
  if (strlen(filename) == 0) {
    return false;
  }
  string refName = filename + $deviceParams;
  // adds the tooltip object in an array of to-be-deleted items when the panel is closed or terminated
  dynAppend(refObjects, refName);
  
  addSymbol(myModuleName(), myPanelName(),
          filename,
          refName,
          makeDynString(\"$deviceParams:\" + $deviceParams),
          tooltipX, tooltipY + tooltipHeight, 0, 1, 1);
  
  // update the tooltipHeight variable - used to position new tooltipObjects
  if (shapeExists(type + \"_tooltipBack\")) {
    int objWidth, objHeight;
    getValue(type + \"_tooltipBack\", \"size\", objWidth, objHeight);
    tooltipHeight += objHeight - 1;
    if (objWidth > tooltipWidth) {
      tooltipWidth = objWidth;
    }
  } else { // if the background object doesn't exist we cannot really tell what's the height of that tooltipObject, so just lets increase it by let's say 50 so that we notice that problem if we will try to add something in addition to a tooltip object which hasn't got a fixed height (e.g. chamber_general).
    tooltipHeight += 50;
    tooltipWidth += 170;
  }
    
  return true;
}
" 0
 2
"CBRef" "1"
"EClose" "main()
{
  for (int i=1; i <= dynlen(refObjects); i++) {
    removeSymbol(myModuleName(), myPanelName(), refObjects[i]);
  }
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 0
"PRIMITIVE_TEXT1"
""
1 30 40 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 30 40 335 54
0 2 2 "0s" 0 0 0 192 0 0  30 40 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 66 Content is dynamically generated - see initialize event & scopeLib
2 2
"lblError"
""
1 0 0 E E E 1 E 0 E N "_WindowText" E N "FwStateAttention3" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 0 0 375 14
0 2 2 "0s" 0 0 0 192 0 0  0 0 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 85 Error - tooltip file for this type of device is missing! Please inform DCS developers
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0