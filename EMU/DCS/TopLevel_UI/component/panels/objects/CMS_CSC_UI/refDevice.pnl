V 10
1
LANG:1 6 Device
PANEL,-1 -1 120 53 N "_3DFace" 5
"$caption"
"$deviceParams"
"$deviceType"
"$group"
"$shapeParams"
"main()
{
  dyn_string ex;
  deviceParams = emuui_parseParameterString($deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  currentConnectionType = \"\";
  currentConnectionMode = \"\";
  currentConnection = \"\";
  tooltipIsOn = false;
  
  initShape(ex);
  if (emu_checkException(ex)) { return; }
  
  //by default the physical chamber shape is used
  setValue(shapeName, \"visible\", true);
  if ($caption == \"VALUE\") {
    caption.text = \"\";
    showValueOnCaption = true;
  } else {
    caption.text = $caption;
    showValueOnCaption = false;
  }
  
  if (strlen($group) > 0) {
    dpConnect(\"modeChangedCB\", true, $group + \".mode\", $group + \".connectionType\");
  }
}

void initShape(dyn_string ex) {
  mapping shapeParams = emuui_parseParameterString($shapeParams, ex);
  if (emu_checkException(ex)) { return; }
  
  if (!mappingHasKey(shapeParams, \"type\")) { // if parameters do not include the mandatory \"type\" parameter - error
    emu_addError(\"mandatory 'type' parameter was not found in the $shapeParams parameterString in refDevice.pnl\", ex);
  }
  shapeName = shapeParams[\"type\"];
  
  switch (shapeName) {
    case \"chamber\":
      confChamberShape(shapeParams);
      break;
    case \"rectangle\":
      confRectShape(shapeParams);
      break;
    default:
      break;
  }
}

void confChamberShape(mapping shapeParams) {
  //check if relevant parameters are present, if not - leave default shape and return
  if (!mappingHasKey(shapeParams, \"innerWidth\") || 
      !mappingHasKey(shapeParams, \"outerWidth\") || 
      !mappingHasKey(shapeParams, \"height\")) {
    
    return;
  }
  
  float innerWidth = shapeParams[\"innerWidth\"],
        outerWidth = shapeParams[\"outerWidth\"],
        height     = shapeParams[\"height\"];
  dyn_dyn_int points; //polygon points
  
  //create the points
  //note: in comments it's assumed that chamber is positioned like this: chamber outer part is on the left and on the right there's inner part of the chamber
  points[1][1] = 0;                          // the bottom left corner X
  points[1][2] = floor(outerWidth / 2) * -1; // the bottom left corner Y
  points[2][1] = 0;                          // the top left corner X
  points[2][2] = ceil(outerWidth / 2);       // the top left corner Y
  points[3][1] = height;                     // the top right corner X
  points[3][2] = ceil(innerWidth / 2);       // the top right corner Y
  points[4][1] = height;                     // the bottom right corner X
  points[4][2] = floor(innerWidth / 2) * -1; // the bottom right corner Y
  
  points[5][1] = points[1][1]; // just to close the polygon
  points[5][2] = points[1][2]; // just to close the polygon
  
  setValue(shapeName, \"points\", points);
  
  if (outerWidth < 15) { caption.visible = false; }
}

void confRectShape(mapping shapeParams) {
}
" 0
 E E E E 1 -1 -1 0  20 23
""0  1
E "//some panel-wide constants
const string EMUUI_REFDEV_TOOLTIP_REF_NAME = \"refTooltip\";

mapping deviceParams;
string shapeName;

string currentConnectionType;
string currentConnectionMode;
string currentConnection;
float currentDpValueRangeMin;
float currentDpValueRangeMax;
bool showValueOnCaption;
bool tooltipIsOn;

void modeChangedCB(string modeDp, string mode, string connectionTypeDp, string connectionType) {
  dyn_string ex;
  bool connectSuccessful = false;
  mode = $deviceType + \"_\" + mode; // prepend mode with device type
  
  disconnect();  
    
  // this is an FSM connection
  if (connectionType == \"FSM\") {
    bool nodeFound = false;
    string node = emuui_getFsmNode(mode, deviceParams, ex);
    // node hasn't been found
    if (dynlen(ex) > 0) {
      emu_errorHandled(ex);
    } else if (strlen(node) > 0){
      nodeFound = true;
    }
    
    if (nodeFound) {
      int rc = fwCU_connectState(\"updateFSMStateCB\", node);
      emu_debug(\"RC for connect to \" + node + \": \" + rc, emu_DEBUG_DETAIL);
      if (rc != 0) { 
        connectSuccessful = true;
        currentConnectionType = connectionType;
        currentConnectionMode = mode;
        currentConnection = node;
      }
    }
  } else if (connectionType == \"DP\") { // this is a DP connection
    bool dpFound = false;
    string dp = emuui_getDpName(mode, deviceParams, ex);
    // dp hasn't been found
    if (dynlen(ex) > 0) {
      emu_errorHandled(ex);
    } else if (strlen(dp) > 0){
      dpFound = true;
    }
    
    if (dpFound) {
      currentDpValueRangeMin = emuui_getDpValueRangeMin(mode, ex);
      if (emu_checkException(ex)) { return; }
      currentDpValueRangeMax = emuui_getDpValueRangeMax(mode, ex);
      if (emu_checkException(ex)) { return; }
      int rc = dpConnect(\"updateDPStateCB\", true, dp);
      emu_debug(\"RC for connect to \" + dp + \": \" + rc, emu_DEBUG_DETAIL);
      if (rc == 0) {
        connectSuccessful = true;
        currentConnectionType = connectionType;
        currentConnectionMode = mode;
        currentConnection = dp;
      }
    } else {
      emu_debug(\"DP not found, reporting device as dead. \" +
                \"DP='\" + dp + \"', connection type='\" + connectionType + \"', mode='\" + mode + \"'\", 
                emu_DEBUG_DETAIL);
    }
  }
  
  if (!connectSuccessful) {
    string color = emuui_getMappingValue(\"fsmStateColors\", \"DEAD\", ex);
    if (emu_checkException(ex)) { return; }
    setColor(color);
    currentConnectionType = \"\";
    currentConnection = \"\";
    currentConnectionMode = \"dead\";
  }
}

void updateFSMStateCB(string node, string state) {
  emu_debug(\"state update came for \" + node + \": \" + state);
  
  dyn_string ex;
  string color = emuui_getMappingValue(\"fsmStateColors\", state, ex);
  if (emu_checkException(ex)) { return; }
  setColor(color);
  if (showValueOnCaption) {
    caption.text = state;
  }
}

void updateDPStateCB(string dp, float value) {
  emu_debug(\"update came for DP: \" + dp + \": \" + value);
  
  dyn_string ex;
  string color = emuui_getGradientColor(value, currentDpValueRangeMin, currentDpValueRangeMax);
  setColor(color);
  
  if (showValueOnCaption) {
    string captionStr;
    sprintf(captionStr, \"%d\", value);
    caption.text = captionStr;
  }
}
    
void disconnect() {
  if (currentConnectionType == \"FSM\") {
    fwCU_disconnectState(currentConnection);
  } else if (currentConnectionType == \"DP\") {
    dpDisconnect(\"updateDPStateCB\", currentConnection);
  }
}

void setColor(string color) {
  setValue(shapeName, \"backCol\", color);
}

void setTooltip(string tooltip) {
  setValue(shapeName, \"toolTipText\", tooltip);
  caption.toolTipText(tooltip);
}

void showTooltip() {
//   if (!tooltipIsOn) {
//     tooltipIsOn = true;
//   }
  
  int mouseX, mouseY;
  getCursorPosition(mouseX, mouseY);
  string refName = EMUUI_REFDEV_TOOLTIP_REF_NAME;
  addSymbol(myModuleName(), myPanelName(),
            \"objects/CMS_CSC_UI/refTooltip.pnl\",
            refName,
            makeDynString(\"$deviceParams:\" + $deviceParams, \"$deviceType:\" + $deviceType, \"$mode:\" + currentConnectionMode),
            mouseX, mouseY, 0, 1, 1);
}

void hideTooltip() {
//   if (tooltipIsOn) {
//     tooltipIsOn = false;
//   }
  removeSymbol(myModuleName(), myPanelName(), EMUUI_REFDEV_TOOLTIP_REF_NAME);
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
10 0
"chamber"
""
1 45.8182870370372 52.5000000000001 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
0 0 0 0 0 0
E E "main(bool enter)
{
  if (enter) {
    showTooltip();
  } else {
    hideTooltip();
  }
}" 0

0
1
LANG:1 0 

3
"hoverfclr" "N \"black_yellow\""
"dashclr"N "_Transparent"
"selectable" ""
E E 0 1 1 1 1 E 0.774020156774913 0 1.02222222222222 -15.4642777155655 -30.6666666666667 1 E 4 19.9791666666667 30.0000000000001
19.9791666666667 69.1304347826089
109.041666666667 61.3043478260871
109.041666666667 39.7826086956523
 1
6 2
"rectangle"
""
1 90 10 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
2 0 0 0 0 0
E E "main(bool enter)
{
  if (enter) {
    showTooltip();
  } else {
    hideTooltip();
  }
}" 0

0
1
LANG:1 0 

2
"hoverfclr" "N \"black_yellow\""
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 1 -90 -10 1 E 90 10 110 30
2 1
"caption"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E "main(bool enter)
{
  if (enter) {
    setValue(shapeName, \"foreCol\", \"black_yellow\");
    showTooltip();
  } else {
    setValue(shapeName, \"foreCol\", \"\");
    hideTooltip();
  }
}" 0

0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 3 3 17 17
0 2 2 "0s" 0 0 0 193 0 0  10 3 1
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 2 me
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0