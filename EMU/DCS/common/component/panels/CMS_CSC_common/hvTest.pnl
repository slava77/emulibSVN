V 11
1
LANG:1 0 
PANEL,-1 -1 561 818 N "_3DFace" 0
"main()
{
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    if (emu_checkException(ex)) { return; }
    fwCU_connectOperationMode(\"accessPrivilegesChangedCB\", \"CMS_CSC::CMS_CSC\");
  }
  //=========================
  
  dpConnect(\"registeredChannelsChangedCB\", true, \"CSC_debug.hv.channelsAt3500\");
  refreshMaskedChannels();
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString();
  expertControlButtons = makeDynString(\"btnDo\", \"btnUndo\", \"btnForceSet\");
}
" 0
 E E E E 1 -1 -1 0  140 50
""0  1
E "// Common libs
#uses \"CMS_CSC_common/emu_common.ctl\"
#uses \"CMS_CSC_common/emu_accessControl.ctl\"
#uses \"CMS_CSCfw_HV_CC/emu_hvCommon.ctl\"
#uses \"CMS_CSC_UI/emuui_main.ctl\"

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;
dyn_mapping disabledChannelsList;
dyn_mapping registeredChannelsList;


/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl(\"CMS_CSC::CMS_CSC\", controlButtons, true, \"lblNoControl\", expertControlButtons, true);
  lblNoExpert.visible = !emu_hasExpertControl();
}



void unmaskAndRegisterChannel(mapping channelDeviceParams, dyn_string &ex) {
  emuhv_sendChannelCommand(channelDeviceParams, EMUHV_COMMAND_VSET, ex, false, 3400);
  if (emu_checkException(ex)) { return; }
  delay(1, 0);

  emuhv_enableDisableChannel(channelDeviceParams, true, ex);
  if (emu_checkException(ex)) { return; }

  // refresh the data now  
  delay(1, 0);
  emuhv_requestData(channelDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  dyn_string channelsAt3500Str;
  dpGet(\"CSC_debug.hv.channelsAt3500\", channelsAt3500Str);
  string disChannelStr = emuui_mappingToParameterString(channelDeviceParams);
  if (!dynContains(channelsAt3500Str, disChannelStr)) {
    dynAppend(channelsAt3500Str, disChannelStr);
  }  
  dpSetWait(\"CSC_debug.hv.channelsAt3500\", channelsAt3500Str);
}

void unregisterAndMaskChannel(mapping channelDeviceParams, dyn_string &ex) {
  emuhv_enableDisableChannel(channelDeviceParams, false, ex);
  if (emu_checkException(ex)) { return; }

  // refresh the data now  
  delay(1, 0);
  emuhv_requestData(channelDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  dyn_string channelsAt3500Str;
  dpGet(\"CSC_debug.hv.channelsAt3500\", channelsAt3500Str);
  string disChannelStr = emuui_mappingToParameterString(channelDeviceParams);
  int idx = dynContains(channelsAt3500Str, disChannelStr);
  if (idx > 0) {
    dynRemove(channelsAt3500Str, idx);
  }  
  dpSetWait(\"CSC_debug.hv.channelsAt3500\", channelsAt3500Str);
}


void registeredChannelsChangedCB(string dp, dyn_string channels) {

  dynClear(registeredChannelsList);
  
  dyn_string ex;
  dyn_string channelNames;
  dyn_string ch3500Str;
  dpGet(\"CSC_debug.hv.channelsAt3500\", ch3500Str);
  for (int i=1; i <= dynlen(ch3500Str); i++) {
    mapping channelDeviceParams = emuui_parseParameterString(ch3500Str[i], ex);
    if (emu_checkException(ex)) { return; }
    dynAppend(registeredChannelsList, channelDeviceParams);
    string channelName = emuui_getChamberName(channelDeviceParams) + \" ch. \" + channelDeviceParams[\"channelNumber\"];
    dynAppend(channelNames, channelName);
  }
  
  lstRegisteredChannels.items = channelNames;
  lblChCount.text = dynlen(channelNames);
}

void refreshMaskedChannels() {
  dyn_string ex;

  lblRefreshingMaskedList.visible = true;
  
  dynClear(disabledChannelsList);
  dyn_string disabledChannelsNames;
  
  dyn_string hvDps = dpNames(\"*:CSC_ME_*_HV\", \"HV_1_d\");
  for (int i=1; i <= dynlen(hvDps); i++) {
    mapping chamber = emu_fsmNodeToDeviceParams(hvDps[i], ex);
    if (emu_checkException(ex)) { return; }
    dyn_int trippedHvChannels, interlockedHvChannels, deadHvChannels, disabledHvChannels;
    emuui_chamberHvGetProblematicChannels(chamber, 
                                          trippedHvChannels, 
                                          interlockedHvChannels, 
                                          deadHvChannels, 
                                          disabledHvChannels, 
                                          ex);
    if (emu_checkException(ex)) { return; }
    
    // enable and set to 3500V
    for (int j=1; j <= dynlen(disabledHvChannels); j++) {
      mapping channelDeviceParams = chamber;
      channelDeviceParams[\"channelNumber\"] = disabledHvChannels[j];
      dynAppend(disabledChannelsList, channelDeviceParams);
      string channelName = emuui_getChamberName(channelDeviceParams) + \" ch. \" + channelDeviceParams[\"channelNumber\"];
      dynAppend(disabledChannelsNames, channelName);
    }
  }
  
  lstMaskedChannels.items = disabledChannelsNames;
  lblChMaskedCount.text = lstMaskedChannels.itemCount;
  
  lblRefreshingMaskedList.visible = false;
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 0
"PRIMITIVE_TEXT1"
""
1 160 20 E E E 1 E 1 E N "_WindowText" E N "FwStateAttention3" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 160 20 392 44
1 2 2 "0s" 0 0 0 192 0 0  160 20 1
1
LANG:1 31 Sans Serif,14,-1,5,50,0,0,0,0,0
0 1
LANG:1 24 Expert Operation Only !!
13 1
"btnDo"
""
1 30 90 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 88 542 152

T 
1
LANG:1 55 Enable all disabled channels and bring them up to 3400V
"main()
{
    lblStatus.text = \"BUSY...\";
    lblStatus.backCol = \"red\";
  
  dyn_string ex;
  
  dyn_string hvDps = dpNames(\"*:CSC_ME_*_HV\", \"HV_1_d\");
  for (int i=1; i <= dynlen(hvDps); i++) {
    mapping chamber = emu_fsmNodeToDeviceParams(hvDps[i], ex);
    if (emu_checkException(ex)) { return; }
    dyn_int trippedHvChannels, interlockedHvChannels, deadHvChannels, disabledHvChannels;
    emuui_chamberHvGetProblematicChannels(chamber, 
                                          trippedHvChannels, 
                                          interlockedHvChannels, 
                                          deadHvChannels, 
                                          disabledHvChannels, 
                                          ex);
    if (emu_checkException(ex)) { return; }
    
    // enable and set to 3500V
    for (int j=1; j <= dynlen(disabledHvChannels); j++) {
      mapping channelDeviceParams = chamber;
      channelDeviceParams[\"channelNumber\"] = disabledHvChannels[j];
      emu_info(\"processing channel: \" + channelDeviceParams);
      lblStatus.text = \"BUSY, ch. \" + channelDeviceParams;
      
      unmaskAndRegisterChannel(channelDeviceParams, ex);
      if (emu_checkException(ex)) { return; }
    }
  }
  
  refreshMaskedChannels();
  
    lblStatus.text = \"ready\";
    lblStatus.backCol = \"green\";
  
}" 0
 E E E
13 2
"btnUndo"
""
1 30 310 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 308 542 372

T 
1
LANG:1 44 Disable all channels previously set to 3400V
"main()
{
    lblStatus.text = \"BUSY...\";
    lblStatus.backCol = \"red\";
  
  dyn_string ex;
  dyn_string ch3500Str;
  dpGet(\"CSC_debug.hv.channelsAt3500\", ch3500Str);
  for (int i=1; i <= dynlen(ch3500Str); i++) {
    mapping channelDeviceParams = emuui_parseParameterString(ch3500Str[i], ex);
    if (emu_checkException(ex)) { return; }
    
    lblStatus.text = \"BUSY, ch. \" + channelDeviceParams;
      
    unregisterAndMaskChannel(channelDeviceParams, ex);
    if (emu_checkException(ex)) { return; }
  }
  
  refreshMaskedChannels();
    
    lblStatus.text = \"ready\";
    lblStatus.backCol = \"green\";
}" 0
 E E E
2 3
"PRIMITIVE_TEXT2"
""
1 20 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 30 64 46
0 2 2 "0s" 0 0 0 192 0 0  20 30 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Status:
2 4
"lblStatus"
""
1 70 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 70 30 105 46
0 2 2 "0s" 0 0 0 192 0 0  70 30 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 5 ready
2 5
"lblNoControl"
""
1 588 -378 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 60 60 261 79
1 2 2 "0s" 0 0 0 192 0 0  60 60 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
2 6
"lblNoExpert"
""
1 808 -378 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 280 60 478 79
1 2 2 "0s" 0 0 0 192 0 0  280 60 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 31 You don't have expert privilege
13 7
"PUSH_BUTTON1"
""
1 0 280 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  -2 278 152 307

T 
1
LANG:1 19 clear configuration
"main()
{
  dpSetWait(\"CSC_debug.hv.channelsAt3500\", makeDynString());
}" 0
 E E E
13 12
"btnForceSet"
""
1 30 170 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  28 168 542 232

T 
1
LANG:1 52 Force all registered 3400V channels to 3400V setting
"main()
{
    lblStatus.text = \"BUSY...\";
    lblStatus.backCol = \"red\";
  
  dyn_string ex;
  dyn_string ch3500Str;
  dpGet(\"CSC_debug.hv.channelsAt3500\", ch3500Str);
  for (int i=1; i <= dynlen(ch3500Str); i++) {
    mapping channelDeviceParams = emuui_parseParameterString(ch3500Str[i], ex);
    if (emu_checkException(ex)) { return; }
    
      lblStatus.text = \"BUSY, ch. \" + channelDeviceParams;
      
    emuhv_sendChannelCommand(channelDeviceParams, EMUHV_COMMAND_VSET, ex, false, 3400);
    if (emu_checkException(ex)) { return; }
    delay(2);
    emuhv_sendChannelCommand(channelDeviceParams, EMUHV_COMMAND_VSET, ex, false, 3400);
    if (emu_checkException(ex)) { return; }

    // refresh the data now  
    delay(1, 0);
    emuhv_requestData(channelDeviceParams, ex);
    if (emu_checkException(ex)) { return; }
  }
  
      lblStatus.text = \"ready\";
    lblStatus.backCol = \"green\";
}" 0
 E E E
2 15
"PRIMITIVE_TEXT5"
""
1 20 390 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 390 200 424
0 2 2 "0s" 0 0 0 192 0 0  20 390 2
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 29 Channels currently registered
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 20 for 3400V operation:
17 16
"lstRegisteredChannels"
""
1 19.99999999999999 430 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  18 428 202 762
0

E
E
E

0 0
2 17
"PRIMITIVE_TEXT6"
""
1 20 770 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 20 770 55 786
0 2 2 "0s" 0 0 0 192 0 0  20 770 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 6 Total:
2 18
"lblChCount"
""
1 70 770 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 70 770 102 786
0 2 2 "0s" 0 0 0 192 0 0  70 770 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 3 ###
2 19
"PRIMITIVE_TEXT7"
""
1 370 390 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 370 390 540 424
0 2 2 "0s" 0 0 0 192 0 0  370 390 2
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 26 Currently masked channels:
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 0 
17 20
"lstMaskedChannels"
""
1 360 430 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  358 428 542 762
0

E
E
E

0 0
2 21
"PRIMITIVE_TEXT8"
""
1 360 770 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 360 770 395 786
0 2 2 "0s" 0 0 0 192 0 0  360 770 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 6 Total:
2 22
"lblChMaskedCount"
""
1 410 770 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 410 770 442 786
0 2 2 "0s" 0 0 0 192 0 0  410 770 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 3 ###
13 23
"PUSH_BUTTON2"
""
1 370 790 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  368 788 532 812

T 
1
LANG:1 23 refresh masked ch. list
"main()
{
  refreshMaskedChannels();
}" 0
 E E E
13 24
"PUSH_BUTTON3"
""
1 210 510 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
24 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  208 508 352 542

T 
1
LANG:1 19 << move selected <<
"main()
{
  int selIdx = lstMaskedChannels.selectedPos();
  if (selIdx < 1) { 
    return;
  }

    lblStatus.text = \"BUSY...\";
    lblStatus.backCol = \"red\";
    
  dyn_string ex;
  mapping channelDeviceParams = disabledChannelsList[selIdx];
  unmaskAndRegisterChannel(channelDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  refreshMaskedChannels();
  
    lblStatus.text = \"ready\";
    lblStatus.backCol = \"green\";
}" 0
 E E E
13 27
"PUSH_BUTTON6"
""
1 210 560 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  208 558 352 592

T 
1
LANG:1 19 >> move selected >>
"main()
{
  int selIdx = lstRegisteredChannels.selectedPos();
  if (selIdx < 1) { 
    return;
  }

    lblStatus.text = \"BUSY...\";
    lblStatus.backCol = \"red\";
    
  dyn_string ex;
  mapping channelDeviceParams = registeredChannelsList[selIdx];
  unregisterAndMaskChannel(channelDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  refreshMaskedChannels();
  
    lblStatus.text = \"ready\";
    lblStatus.backCol = \"green\";
}" 0
 E E E
2 28
"lblRefreshingMaskedList"
""
1 360 410 E E E 1 E 1 E N "_WindowText" E N "FwStateAttention1" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 360 410 540 426
0 2 2 "0s" 0 0 0 64 0 0  360 410 1
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 23 refreshing the list....
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
