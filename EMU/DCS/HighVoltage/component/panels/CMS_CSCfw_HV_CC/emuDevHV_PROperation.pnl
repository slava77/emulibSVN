V 11
1
LANG:1 17 DevHV_PRoperation
PANEL,-1 -1 809 143 N "_3DFace" 5
"$node"
"$obj"
"$project_station"
"$project_system"
"$sDpName"
"int count;
int FIRST_PRIMARY=1;

dyn_string table_prCols;
dyn_string dp_names;
dyn_string dp_names_primary;
int module_pr_state, module_ms_state;

dyn_string rootButtons;
dyn_string expertButtons;
dyn_string operatorButtons;

// int polarity_save; // just used for the key line of the primary table 

int is_local_sys;

//=============================================
mudcsApplyPanelAccessControl(string s1,string s2){

 bool hasRootControl, hasExpertControl, hasOperatorControl;
 string rootPriviledge,expertPriviledge,operatorPriviledge;
  dyn_string exceptionInfo;

 fwAccessControl_isGranted(rootPriviledge, hasRootControl, exceptionInfo);
 fwAccessControl_isGranted(expertPriviledge, hasExpertControl, exceptionInfo);
 fwAccessControl_isGranted(operatorPriviledge, hasOperatorControl, exceptionInfo);
 
 //mudcsDebug(buttons[1]);
}
//=============================================
main()
{
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    if (emu_checkException(ex)) { return; }
    fwCU_connectOperationMode(\"accessPrivilegesChangedCB\", $node + \"::\" + $obj);
  }
  //=========================
  
rootButtons=makeDynString(\"test\",\"\");  
 
string fsm; 
$project_station;
$project_system;    
  mudcsProjectConnect();
    
string local_sys = fwFsm_getSystemName();
if(strpos(local_sys,\"CSC\")>=0 || strpos(local_sys,\"csc\")>=0
|| strpos(local_sys,\"EMU\")>=0 || strpos(local_sys,\"emu\")>=0 || strpos(local_sys,\"dcspcS2G19\")>=0 )is_local_sys=1;
else is_local_sys=0;

  if(is_local_sys){
   setValue(\"primaryOn\",\"enabled\",TRUE);
   setValue(\"primaryOFF\",\"enabled\",TRUE);
  }
  else {
   setValue(\"primaryOn\",\"enabled\",FALSE);
   setValue(\"primaryOFF\",\"enabled\",FALSE);
  }

dyn_string split_dp_name;
int i;

dyn_string exceptionInfo;
fwAccessControl_setupPanel(\"mudcsApplyPanelAccessControl\",exceptionInfo);

//--

//--



// the dpNames() returns dps in alphabetic order
// so the table fields are also in the  alphabetic order



//-------

dynAppend(table_prCols,\"polarity\");
dynAppend(table_prCols,\"output\");
dynAppend(table_prCols,\"remote\");
dynAppend(table_prCols,\"imax\");
dynAppend(table_prCols,\"vset\");
dynAppend(table_prCols,\"imon\");
dynAppend(table_prCols,\"vmon\");
dynAppend(table_prCols,\"vcur\");
dynAppend(table_prCols,\"rmpUp\");
dynAppend(table_prCols,\"rmpDn\");


//if(CSC_fwG_g_SYSTEM_NAME==\"System1\")dp_primary=CSC_fwG_g_SYSTEM_NAME+\":\"+\"CSCHV_PR_primary500\";
//else if(CSC_fwG_g_SYSTEM_NAME==\"System2\")dp_primary=CSC_fwG_g_SYSTEM_NAME+\":\"+\"CSCHV_PR_primary100\";


dp_primaries=dpNames(CSC_fwG_g_HW_SYSTEM_NAME+\":*primary*\",\"HV_PR_d\");
init_dp_switch();
for(i=1;i<=dynlen(dp_primaries);i++){
 if(mudcsAddHwSystem(DpName)==mudcsAddHwSystem(dp_primaries[i])) current_primary = i;
 setValue(\"primary_number\",\"text\",current_primary);
}

//dynAppend(dp_primaries,CSC_fwG_g_SYSTEM_NAME+\":\"+\"HV_PR_primary500_1_1\");
//dynAppend(dp_primaries,CSC_fwG_g_SYSTEM_NAME+\":\"+\"HV_PR_primary500_1_2\");

//current_primary=1;
dp_primary=dp_primaries[current_primary];

//=== this is default master (i.e. master from tab #1)


//===========


dynAppend(dp_names_primary,\"data.polarity\");
dynAppend(dp_names_primary,\"data.output\");
dynAppend(dp_names_primary,\"data.control\");
dynAppend(dp_names_primary,\"data.imax\");
dynAppend(dp_names_primary,\"data.vset\");
dynAppend(dp_names_primary,\"data.imon\");
dynAppend(dp_names_primary,\"data.vmon\");
dynAppend(dp_names_primary,\"data.vcur\");
dynAppend(dp_names_primary,\"data.rampup\");
dynAppend(dp_names_primary,\"data.rampdown\");


//dpConnect(\"update_monitor_primary\",dp_primary+\".update_value\");

for(i=1;i<=dynlen(dp_primaries);i++)
 dpConnect(\"update_monitor_primary\",dp_primaries[i]+\".update_value\");



int disk_i, ring_i, chamber_i;
string dev_type, test_string1;
int status;


int vset_primary_default, vset_master_100_20_15_default, vset_all_default;
dpGet(mudcsAddHwSystem(\"vset_primary_default.\"),vset_primary_default);


 
int last_vset;
 mudcsConvertData2FsmOne(\"HV_PR\",dp_primaries[current_primary]  , fsm);
 dpGet(mudcsAddSystem(fsm)+\".last_vset\",last_vset);   

setValue(\"pr_vset\",\"text\",last_vset);


get_all_data_periodically();


return;


}
//==================================================
get_all_data_periodically(){

int i;

 while(1){ 
  get_primary_data();
  for(i=0;i<200;i++)delay(0,50);

 } // while

}


//============================================================


//============================================================




//==================================================

//===================================================
//==================================================

//============================================================
//============================================================

update_monitor_primary(string dp, string value)
{

int pos;

pos=strpos(dp,dp_primaries[current_primary]);
if(pos<0)return;

//DebugTN(\"PPPPPPPPPPPPPPPPPPPPPPPPPPPPP\"+dp_primaries[current_primary]+\" \"+dp);

int i, j, j_b, j_e;

dyn_string values;
int test_int;
float test_float;
int num_chans;
float vset, vmon;

int number_of_lines;
int line_count=0;

 dpGet(mudcsAddHwSystem(dp_primary)+\".data.output\", module_pr_state);
getValue(\"table_pr\",\"lineCount\",number_of_lines);


 if(module_pr_state == 0){
  setValue(\"table_pr\",\"backCol\",\"{202,202,202}\"); 
 }
 else if(module_pr_state == 1){
  setValue(\"table_pr\",\"backCol\",\"{235,235,235}\"); 
 }

 int module_status;
 dpGet(DpName+\".status\",module_status);
 
        if(module_status>3)setValue(\"module_status\",\"backCol\",\"{255,48,49}\");
        else setValue(\"module_status\",\"backCol\",\"{202,202,202}\");
 
  if(module_status==0)setValue(\"module_status\",\"text\",\"OFF\");
  else if(module_status==1)setValue(\"module_status\",\"text\",\"ON\");
  else if(module_status==2)setValue(\"module_status\",\"text\",\"R_up\");
  else if(module_status==3)setValue(\"module_status\",\"text\",\"R_dn\");
  else if(module_status==4)setValue(\"module_status\",\"text\",\"Dead\");
  else if(module_status==5)setValue(\"module_status\",\"text\",\"Intlck\");
  else if(module_status==6)setValue(\"module_status\",\"text\",\"Trip\");
  else if(module_status==7)setValue(\"module_status\",\"text\",\"Trip\");            
  else if(module_status==8)setValue(\"module_status\",\"text\",\"Trip\");
 
 
 
// !!!!!!!!!!! attention : char are not considered here

   for(i=1;i<=dynlen(dp_names_primary);i++){
      if(i!=4 && i!=6 && i!=7){
          dpGet(mudcsAddHwSystem(dp_primary)+\".\"+dp_names_primary[i],test_int); // !!!!!!!!!!! attention : char ar not considered here
          values[i]=test_int;
          if(i==5)vset=test_int;
      }
      else{ 
          dpGet(mudcsAddHwSystem(dp_primary)+\".\"+dp_names_primary[i],test_float); // !!!!!!!!!!! attention : char ar not considered here
          sprintf(values[i],\"%7.1f\",test_float);
          if(i==7)vmon=test_float;
          }
   }


if(requested_primary_state==1){
  if(fabs(vset-vmon) < 10)primary_status=1;
  else primary_status=0;
}
else if(requested_primary_state==0){
  if(fabs(0-vmon) < 10)primary_status=0;
  else primary_status=1;
}



line_count=1;

if(FIRST_PRIMARY){
 FIRST_PRIMARY=0;
/*
 setValue(\"pr_vset\",\"text\",values[5]);
 setValue(\"pr_rmpUp\",\"text\",values[9]);
 setValue(\"pr_rmpDn\",\"text\",values[10]);
 setValue(\"pr_imax\",\"text\",values[4]);
*/
}

    if(line_count>number_of_lines){



             setValue(\"table_pr\",\"appendLine\",
            table_prCols[1],values[1],
            table_prCols[2],values[2],
            table_prCols[3],values[3],
            table_prCols[4],values[4],
            table_prCols[5],values[5],
            table_prCols[6],values[6],
            table_prCols[7],values[7],
            table_prCols[8],values[8],
            table_prCols[9],values[9],
            table_prCols[10],values[10]

//            \"device\",test_string1,
//            \"status\",test_string2,
//            \"alarm\" ,test_string3
            ); 
    }
    else {
             setValue(\"table_pr\",\"updateLine\",1,
            table_prCols[1],values[1], // key pair for update: polarity and value: i.e. if polarity changes thenew line adds
            table_prCols[2],values[2],
            table_prCols[3],values[3],
            table_prCols[4],values[4],
            table_prCols[5],values[5],
            table_prCols[6],values[6],
            table_prCols[7],values[7],
            table_prCols[8],values[8],
            table_prCols[9],values[9],
            table_prCols[10],values[10]

//            \"device\",test_string1, 
//            \"status\",test_string2,
//            \"alarm\" ,test_string3
            ); 
    }

}

//============================================================

//============================================================ 

  
update_dpoints_not_controlled(string dpName, string value){

 if(strpos(value,DpNameFsm) <0){
  if(is_local_sys)setValue(\"enable_disable\",\"enabled\",TRUE);
  else setValue(\"enable_disable\",\"enabled\",FALSE);
  setValue(\"NOT_CONNECTED\",\"visible\",FALSE);
  }
 else  {
  setValue(\"enable_disable\",\"enabled\",FALSE);
  setValue(\"NOT_CONNECTED\",\"visible\",TRUE);
 }

}

//==================================================================

init_dp_switch(){
  
  int i;

 if($obj != \"\"){   // the panel is called from FSM
    DpName=$obj;
 } 
 else{
    DpName=$sDpName; // the panel is called from LOGICAL TREE
 }

 DpName=mudcsAddHwSystem(DpName);

// mudcsDebug(DpName);  
//  DpNameFsm=DpName;
  mudcsConvertData2FsmOne(\"HV_PR\",DpName,DpNameFsm);
     DpNameFsm=mudcsAddHwSystem(DpNameFsm);
  mudcsConvertFsm2DataOne(DpNameFsm,DpName);
   DpName=mudcsAddHwSystem(DpName);
// mudcsDebug(DpName);  




  dyn_string dps;  
  dpGet(DpName+\".:_alert_hdl.._dp_list\",dps);
  if(dynlen(dps) <= 0){
   mudcsDebug(DpName+\".:_alert_hdl\" + \"is not configured\");  
  }
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString(\"primaryOn\", \"primaryOFF\"); // on/off
  expertControlButtons = makeDynString();
}" 0
 E E E E 1 -1 -1 0  -9 10
""0  1
E "#uses \"CMS_CSCfw_HV_CC/emuDcs.ctl\"
#uses \"CMS_CSCfw_HV_CC/emuDcs2.ctl\"
#uses \"CMS_CSCfw_HV_CC/emuDcs3.ctl\"
#uses \"CMS_CSCfw_HV_CC/emuDcs4.ctl\"
#uses \"CMS_CSCfw_HV_CC/emuDcsDim.ctl\"
#uses \"CMS_CSCfw_HV_CC/emuAlert.ctl\"
#uses \"CMS_CSCfw_HV_CC/emufw.ctl\"
#uses \"CMS_CSC_common/emu_accessControl.ctl\"

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;

string project_station;
string project_system;

string DpName, DpNameFsm;
string dp_primary;
dyn_string dp_primaries;
string dp_master;
int current_primary;

string current_chamber_set;

int requested_primary_state, primary_status;
int requested_module_state, summary_channel_status;

/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl($node + \"::\" + $obj, controlButtons, true, \"lblNoControl\", expertControlButtons, true);
}

//===================================================

primary_box_command(string box, int com){


int chn, value;
string host1, host2, subcommand;
string fsm;

////getValue(\"chn\",\"text\",chn);
getValue(box,\"text\",value);

////chn=chn-1;

/*
host1=CSC_fwG_g_all_primary[1];//CSC_fwG_g_1host;
host2=CSC_fwG_g_all_primary[2];//CSC_fwG_g_2host;

subcommand=\"HVPRCMD;1;1;255;\"+com+\";\"+value+\";\"+\"-1\";
dpSetWait(mudcsAddSystem(\"HV_1_COM\")+\".command\",host1+\"|\"+subcommand);

subcommand=\"HVPRCMD;1;2;255;\"+com+\";\"+value+\";\"+\"-1\";
dpSetWait(mudcsAddSystem(\"HV_1_COM\")+\".command\",host2+\"|\"+subcommand);
*/
//------------
if(com==7){
  
  mudcsConvertData2FsmOne(\"HV_PR\",dp_primaries[current_primary]  , fsm);
  dpSet(mudcsAddSystem(fsm)+\".last_vset\",value);   

    
dyn_string fsms;
mudcsConvertData2Fsm(\"HV_PR\", dp_primaries, fsms);
int i;
 for(i=1;i<=dynlen(fsms);i++){
///  dpSet(mudcsAddSystem(fsms[i])+\".last_vset\",value);
 }
 

} //if(com==7)
//------------

}

//====================================================
//=====================================================
//========================================================
//=========================================================
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 1
"primaryOn"
""
1 561 110 E E E 1 E 1 E N {255,255,255} E N {255,0,0} E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0  561 110 681 132

T 
1
LANG:1 10 primary_ON
"main()
{



int iprim;
string fsm;
getValue(\"primary_number\",\"text\",iprim);
mudcsConvertData2FsmOne(\"HV_PR\",dp_primaries[iprim]  , fsm);

int current_status;
 dpGet(mudcsAddSystem(fsm)+\".status\",current_status);

if(current_status != -2)dpSet(mudcsAddSystem(fsm)+\".status\",2);

////mudcsDebug(mudcsAddSystem(fsm));

//// get_primary_data_until_proper_status(100);


}" 0
 E E E
25 2
"table_pr"
""
1 12.8745247148289 11.2765957446809 E E E 1 E 1 E N "_3DText" E N {217,217,217} E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0  13 12 576 80
"
main()
{
//
// shape table=getShape(\"table\");
 
//...
 
//table.tableMode(TABLE_SELECT_BROWSE);
 
// table.selectByClick(TABLE_SELECT_LINE);
 
setValue(\"\",\"tableMode\",TABLE_SELECT_BROWSE);
setValue(\"\",\"selectByClick\",1);

}" 0
"main(int row, string column, string value)
{


}" 0
 1 0 1 10 1 "imax" 4 1 0 "s" 1
LANG:1 4 imax
E
1
LANG:1 0 

63 "imon" 3 1 0 "s" 1
LANG:1 4 imon
E
1
LANG:1 0 

55 "vmon" 3 1 0 "s" 1
LANG:1 4 vmon
E
1
LANG:1 0 

50 "vset" 3 1 0 "s" 1
LANG:1 4 vset
E
1
LANG:1 0 

55 "vcur" 3 1 0 "s" 1
LANG:1 4 vcur
E
1
LANG:1 0 

55 "rmpUp" 3 1 0 "s" 1
LANG:1 5 rmpUp
E
1
LANG:1 0 

50 "rmpDn" 3 1 0 "s" 1
LANG:1 5 rmpDn
E
1
LANG:1 0 

50 "output" 3 1 0 "s" 1
LANG:1 6 output
E
1
LANG:1 0 

50 "remote" 4 1 0 "s" 1
LANG:1 6 remote
E
1
LANG:1 0 

56 "polarity" 4 1 0 "s" 1
LANG:1 8 polarity
E
1
LANG:1 0 

58 
18 18 "20" 0 20 164
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
13 3
"primaryOFF"
""
1 681 110 E E E 1 E 1 E N "_3DText" E N {0,153,153} E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0  681 110 801 132

T 
1
LANG:1 11 primary_OFF
"main()
{


int iprim;
string fsm;
getValue(\"primary_number\",\"text\",iprim);
mudcsConvertData2FsmOne(\"HV_PR\",dp_primaries[iprim]  , fsm);

int current_status;
 dpGet(mudcsAddSystem(fsm)+\".status\",current_status);

if(current_status != -2)dpSet(mudcsAddSystem(fsm)+\".status\",0);

//// get_primary_data_until_proper_status(100);


}" 0
 E E E
14 4
"pr_vset"
""
1 11 102 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0  11 102 81 128
3 "0s" 0 0 0 0 0 -1  E E "main()
{

primary_box_command(\"pr_vset\", 7);


int vset_primary_default;
getValue(\"pr_vset\",\"text\",vset_primary_default);
dpSet(mudcsAddSystem(\"vset_primary_default.\"),vset_primary_default);

}

" 0

14 5
"pr_rmpUp"
""
1 81 102 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0  81 102 151 128
3 "0s" 0 0 0 0 0 -1  E E "main()
{

primary_box_command(\"pr_rmpUp\", 3);

}" 0

14 6
"pr_rmpDn"
""
1 151 102 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0  151 102 221 128
3 "0s" 0 0 0 0 0 -1  E E "main()
{
primary_box_command(\"pr_rmpDn\", 4);
}" 0

14 7
"pr_imax"
""
1 221 102 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0  221 102 291 128
3 "0s" 0 0 0 0 0 -1  E E "main()
{
primary_box_command(\"pr_imax\",6);
}" 0

2 8
"vset_text"
""
1 1 327 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 31 82 62 102
1 2 2 "0s" 0 0 0 192 0 0  31 82 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0 1
LANG:1 4 vset
2 9
"PRIMITIVE_TEXT1"
""
1 1 327 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 91 82 146 102
1 2 2 "0s" 0 0 0 192 0 0  91 82 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0 1
LANG:1 6 rampUp
2 10
"PRIMITIVE_TEXT1"
""
1 1 327 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 161 82 215 102
1 2 2 "0s" 0 0 0 192 0 0  161 82 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0 1
LANG:1 6 rampDn
2 11
"PRIMITIVE_TEXT1"
""
1 1 317 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 241 82 275 102
1 2 2 "0s" 0 0 0 192 0 0  241 82 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,75,0,0,0,0,0
0 1
LANG:1 4 imax
22 21
"primary_number"
""
1 471 80 E E E 1 E 1 E N {0,0,0} E N "_Window" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 34 Times [Adobe],-1,14,5,75,0,0,0,0,0
0  471 80 541 108
2
1
LANG:1 1 1

1
1
LANG:1 1 2

0

E
"main()
{


int iprim;;
getValue(\"\",\"text\",iprim);

current_primary=iprim;
dp_primary=dp_primaries[current_primary];

dpSet(mudcsAddSystem(dp_primary)+\".update_value\",1); // to refresh the table

}" 0

E
 1 0
2 22
"PRIMITIVE_TEXT1"
""
1 720 40 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 720 40 739 59
1 2 2 "0s" 0 0 0 192 0 0  720 40 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 2 V2
14 24
"module_status"
""
1 350 100 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
48 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0  350 100 430 126
3 "0s" 0 0 0 0 0 -1  E E "main()
{


}

" 0

2 25
"PRIMITIVE_TEXT3"
""
1 -98 -10 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
50 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 342 82 432 98
1 2 2 "0s" 0 0 0 192 0 0  342 82 1
1
LANG:1 38 Bitstream Charter,-1,12,5,75,0,0,0,0,0
0 1
LANG:1 13 MODULE Status
2 26
"lblNoControl"
""
1 1110 -426 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
51 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 582 12 783 31
1 2 2 "0s" 0 0 0 192 0 0  582 12 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
