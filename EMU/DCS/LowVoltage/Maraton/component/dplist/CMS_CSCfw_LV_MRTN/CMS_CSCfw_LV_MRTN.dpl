# ascii dump of database

# DpType
TypeName
_FwFsmObjectType._FwFsmObjectType	1#1
	panel	25#6
	components	9#7
	states	9#8
	actions	9#9
	parameters	9#11
MUDCS_DYN_STRING.MUDCS_DYN_STRING	9#1
MUDCS_STRING.MUDCS_STRING	25#1

# Datapoint/DpId
DpName	TypeName	ID
fwOT_FwWienerMarathon	_FwFsmObjectType	103204
fwOT_FwWienerMarathonChannel	_FwFsmObjectType	103205
fwOT_FwWienerPS	_FwFsmObjectType	104232
fwOT_FwWienerChannel	_FwFsmObjectType	104233
fwOT_CSC_LV_NODES	_FwFsmObjectType	104695
fwOT_CSC_LV_TREE_NODES	_FwFsmObjectType	104696
EMUALIASES	MUDCS_DYN_STRING	105061
CMS_CSC_LV_CRB	MUDCS_STRING	105062
LV_START_UP_CHAMBER	MUDCS_STRING	126032
ELMB_ERRORS	MUDCS_DYN_STRING	126126
PREPARE_POWER_UP_BUFFER	MUDCS_DYN_STRING	127458
ALERT_CONFIG_CHANGED_DP	MUDCS_STRING	131879
CMS_CSC_LV_MRTN	MUDCS_STRING	135320

# DpValue
ElementName	TypeName	_original.._value	_original.._status	_original.._stime
fwOT_FwWienerMarathon.panel	_FwFsmObjectType	"FwWienerMarathon.pnl"	0x101	18.06.2009 15:12:43.562
fwOT_FwWienerMarathon.components	_FwFsmObjectType	"", "", "FwWienerMarathon_initialize(string domain, string device)
{
        dyn_string dpNames;
        
        dpNames[1] = device + \".Status.On:_online.._invalid\";
        dpNames[2] = device + \".Status.On:_online.._value\";
        dpNames[3] = device + \".Status.Inhibit:_online.._value\";
        dpNames[4] = device + \".Status.OutputFailure:_online.._value\";
  
  	dpConnect(\"Check_Status\", TRUE, dpNames);
  
}
Check_Status(dyn_string dp, dyn_int qval)
{
    string LogName, domain, device;
    string sdp;
    sdp = dp;
    int colon, dot, slash;
    colon = strpos(sdp, \":\");
    dot = strpos(sdp, \".\");
    device = substr(sdp, colon + 1, dot - colon - 1);
    LogName = fwDU_getLogicalName( device);
    slash = strpos(LogName, \"/\");
    domain = substr(LogName, 0, slash);

    int val;
    val = qval[1]; 
    if( val != 0 && qval[2] != 0)
    {
      fwDU_setState(domain, device, \"ERROR\");//\"POWER_FAIL\");
      return;
    }
    val = qval[3]; 
    if( val != 0)
    {
      fwDU_setState(domain, device, \"ERROR\");//\"INTERLOCK\");
      return;
    }
    val = qval[4]; 
    if( val != 0)
    {
      fwDU_setState(domain, device, \"ERROR\");//\"CHANNEL_FAIL\");
      return;
    } 
    val = qval[2]; 
    if( val != 0)
      fwDU_setState(domain, device, \"ON\");
    else
      fwDU_setState(domain, device, \"OFF\");
}
", "FwWienerMarathon_valueChanged( string domain, string device, string &fwState)
{
}
", "FwWienerMarathon_doCommand(string domain, string device, string command)
{
        dyn_string exceptionInfo;
        int Time =15; 
        int m_state, m_on;
	if (command == \"OFF\")
	{
            dpGet(device+\".Settings.OnOffCrate\",m_state);
            dpGet(device+\".Status.On\",m_on);           
            if(m_state==0 && m_on==0){/*delay(2);*/ dpSetWait(device+\".Status.On\",FALSE);return;}          
		dpSet(device+\".Settings.OnOffCrate\",0); 
                fwDU_startTimeout(Time, domain, device, \"ERROR\");
	}
	if (command == \"ON\")
	{
            dpGet(device+\".Settings.OnOffCrate\",m_state);
            dpGet(device+\".Status.On\",m_on);                       
            if(m_state && m_on){/*delay(2);*/ dpSetWait(device+\".Status.On\",TRUE);return;}          
		dpSet(device+\".Settings.OnOffCrate\",1);
                fwDU_startTimeout(Time, domain, device, \"ERROR\"); 
	}  
  
}
"	0x101	07.07.2009 08:32:37.682
fwOT_FwWienerMarathon.states	_FwFsmObjectType	"ON", "FwStateOKPhysics", "", "", "", "OFF", "FwStateOKNotPhysics", "", "", "", "RECOVERING", "FwStateAttention2", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	07.07.2009 08:32:37.682
fwOT_FwWienerMarathon.actions	_FwFsmObjectType	"ON/OFF", "", "1", "", "0", "OFF/ON", "", "1", "", "0", "OFF/OFF", "", "1", "", "0", "ERROR/OFF", "", "1", "", "0", "ERROR/ON", "", "1", "", "0"	0x101	07.07.2009 08:32:37.682
fwOT_FwWienerMarathon.parameters	_FwFsmObjectType	"int estimatedTime = 0"	0x101	18.06.2009 15:12:43.687
fwOT_FwWienerMarathonChannel.panel	_FwFsmObjectType	"FwWienerMarathonChannel.pnl"	0x101	18.06.2009 15:12:43.718
fwOT_FwWienerMarathonChannel.components	_FwFsmObjectType	"", "", "FwWienerMarathonChannel_initialize(string domain, string device)
{
        dyn_string dpNames;
        
     int pos=strpos(device,\"/Channel\"); 
     string crate=substr(device,0,pos);         
     
        dpNames[1] = device + \".Status.On:_online.._value\";  
        dpNames[2] = crate + \".Status.On:_online.._value\";              

//        dpNames[3] = device + \".MeasurementCurrent:_online.._value\";  
                 
  	dpConnect(\"Check_Status_Channel\", TRUE, dpNames);  
  
}


Check_Status_Channel(dyn_string dp, dyn_int qval)
{
    string LogName, domain, device;
    string sdp;
    sdp = dp;
    int colon, dot, slash;
    colon = strpos(sdp, \":\");
    dot = strpos(sdp, \".\");
    device = substr(sdp, colon + 1, dot - colon - 1);
    LogName = fwDU_getLogicalName( device);
    slash = strpos(LogName, \"/\");
    domain = substr(LogName, 0, slash);
        
 //===============================================================  
     int pos=strpos(device,\"/Channel\"); 
     string crate=substr(device,0,pos);
     bool crate_status;
     dpGet(crate + \".Status.On:_online.._value\",crate_status); 
          
     float MIN_CURR = 0.5;
     float MIN_VOLT= 4;
     
     int StatOVC, StatOVV, StatOVP;
     
//     float MeasurementCurrent=qval[3];
//     float MeasurementSenseVoltage;
     
     int inv;
     
//     dpGet(device + \".MeasurementSenseVoltage:_online.._value\",MeasurementSenseVoltage);         
     dpGet(device + \".MeasurementCurrent:_online.._invalid\", inv); 
//     DebugN(device, \"--->>> Current \", MeasurementCurrent, \" inv \", inv);
     if( inv != 0 && crate_status !=0)
     {
       fwDU_setState(domain, device, \"ERROR\");//fwState = \"ERROR\";//\"POWER_FAIL\";
       return;
     }
     dpGet(device + \".Status.FailureMaxCurrent:_online.._value\", StatOVC);
     dpGet(device + \".Status.FailureMaxSenseVoltage:_online.._value\", StatOVV);
     dpGet(device + \".Status.FailureMaxTerminalVoltage:_online.._value\", StatOVP);
//     DebugN(\"   OVC, OVV, OVP\", StatOVC, StatOVV, StatOVP);
     if( StatOVC != 0)
     {
        fwDU_setState(domain, device, \"ERROR\");//fwState = \"ERROR\";//\"OVER_CURRENT\";
        return;
     }
     if( StatOVV != 0)
     {
        fwDU_setState(domain, device, \"ERROR\");//fwState = \"ERROR\";//\"OVER_VOLTAGE\";
        return;
     }
     if( StatOVP != 0)
     {
        fwDU_setState(domain, device, \"ERROR\");//fwState = \"ERROR\";//\"OVER_VOLTAGE_PROT\";
        return;
     }
//     if (MeasurementCurrent >= MIN_CURR)  
//     if (MeasurementSenseVoltage >=MIN_VOLT) 
     if(crate_status)
     {
	fwDU_setState(domain, device, \"ON\");//fwState = \"ON\";
        return;
     }
	fwDU_setState(domain, device, \"OFF\");//fwState = \"OFF\";        
    
}

", "FwWienerMarathonChannel_valueChanged( string domain, string device, string &fwState)
{
}
", "FwWienerMarathonChannel_doCommand(string domain, string device, string command)
{
// the following is to not to \\\\\\\"hang\\\\\\\" the status of the maraton channels
// in the case of we switch the maraton and there is no communication to maraton
// (PFC is off)  
bool status;
   dpGet(device+\".Status.On\",status);
   dpSet(device+\".Status.On\",status);    
}
"	0x101	07.07.2009 08:32:37.963
fwOT_FwWienerMarathonChannel.states	_FwFsmObjectType	"ON", "FwStateOKPhysics", "", "", "", "OFF", "FwStateOKNotPhysics", "", "", "", "RECOVERING", "FwStateAttention2", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	07.07.2009 08:32:37.963
fwOT_FwWienerMarathonChannel.actions	_FwFsmObjectType	"ON/OFF", "", "1", "", "0", "OFF/ON", "", "1", "", "0", "ERROR/OFF", "", "1", "", "0"	0x101	07.07.2009 08:32:37.963
fwOT_FwWienerMarathonChannel.parameters	_FwFsmObjectType	"int estimatedTime = 0"	0x101	18.06.2009 15:12:43.843
fwOT_FwWienerPS.panel	_FwFsmObjectType	"FwWienerPS.pnl"	0x101	18.06.2009 15:12:43.875
fwOT_FwWienerPS.components	_FwFsmObjectType	"unsigned General.Status.GetCurrentFlags
", "", "FwWienerPS_initialize(string domain, string device)
{
}
", "FwWienerPS_valueChanged( string domain, string device,
      unsigned General_dot_Status_dot_GetCurrentFlags, string &fwState)
{
  
  
  
      bool Stat, IsOn;
      int Stat_Int;
      bool IsError=FALSE; 
      
      dpGet(device + \".General.Status.GetACInLimit\", Stat_Int);
      if( Stat_Int == 0)IsError=TRUE;
      
      dpGet(device + \".General.Status.GetNoErrors\", Stat_Int);
      if( Stat_Int == 0)IsError=TRUE;
      
      dpGet(device + \".Fans.Status.GetFansOK\", Stat_Int);
      if( Stat_Int == 0)IsError=TRUE;
      
      dpGet(device + \".General.Status.GetEEPROMError\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag1\", Stat); 
      if( Stat == TRUE)IsError=TRUE;                        

      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag2\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag3\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag4\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag5\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag6\", Stat); 
      if( Stat == TRUE)IsError=TRUE;                        
 
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag7\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.ExtTempErrorFlag8\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag1\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag2\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag3\", Stat); 
      if( Stat == TRUE)IsError=TRUE;                        
 
      dpGet(device + \".Temperatures.Status.TempErrorFlag4\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag5\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag6\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag7\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      
      dpGet(device + \".Temperatures.Status.TempErrorFlag8\", Stat); 
      if( Stat == TRUE)IsError=TRUE;                        

      
      if(IsError==FALSE){
        dpGet(device + \".General.Status.GetPowerOn\", IsOn);       
        if(IsOn)fwState = \"ON\";
        else fwState = \"OFF\";    
      
      }
      else fwState = \"ERROR\";


}
", "FwWienerPS_doCommand(string domain, string device, string command)
{
        int Time = 5; 

	if (command == \"OFF\")
	{
		dpSet(device+\".Commands.OnOffCrate\",0);
            fwDU_startTimeout(Time, domain, device, \"ERROR\"); 
	}
	if (command == \"ON\")
	{
		dpSet(device+\".Commands.OnOffCrate\",1); 
            fwDU_startTimeout(Time, domain, device, \"ERROR\");
	}
}
"	0x101	07.07.2009 08:32:38.260
fwOT_FwWienerPS.states	_FwFsmObjectType	"ON", "FwStateOKPhysics", "", "", "", "OFF", "FwStateOKNotPhysics", "", "", "", "RECOVERING", "FwStateAttention2", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	07.07.2009 08:32:38.260
fwOT_FwWienerPS.actions	_FwFsmObjectType	"ON/OFF", "", "1", "", "0", "OFF/ON", "", "1", "", "0", "ERROR/OFF", "", "1", "", "0"	0x101	07.07.2009 08:32:38.260
fwOT_FwWienerPS.parameters	_FwFsmObjectType	"int estimatedTime = 0"	0x101	18.06.2009 15:12:44.000
fwOT_FwWienerChannel.panel	_FwFsmObjectType	"FwWienerChannel.pnl"	0x101	18.06.2009 15:12:44.031
fwOT_FwWienerChannel.components	_FwFsmObjectType	"bool Actual.CurrentFlag
", "", "FwWienerChannel_initialize(string domain, string device)
{
}
", "FwWienerChannel_valueChanged( string domain, string device,
      bool Actual_dot_CurrentFlag, string &fwState)
{
  
      bool Stat;
      bool IsError=FALSE; 
      float voltset, voltmeas, vdiff;
      dpGet(device + \".Actual.CurrentFlag\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      dpGet(device + \".Actual.OverVoltFlag\", Stat); 
      if( Stat == TRUE)IsError=TRUE;
      dpGet(device + \".Actual.OverVoltProtFlag\", Stat); 
      if( Stat == TRUE)IsError=TRUE;            
      
      if(IsError==FALSE){
        dpGet(device + \".Actual.VoltageValue\", voltmeas);       
        dpGet(device + \".Settings.VoltageSetpoint\", voltset);           
        vdiff=fabs(voltset-voltmeas);
        if(vdiff < 0.5)fwState = \"OFF\";
        else fwState = \"ON\";    
      
      }
      else fwState = \"ERROR\";


}
", "FwWienerChannel_doCommand(string domain, string device, string command)
{
}
"	0x101	07.07.2009 08:32:37.385
fwOT_FwWienerChannel.states	_FwFsmObjectType	"ON", "FwStateOKPhysics", "", "", "", "OFF", "FwStateOKNotPhysics", "", "", "", "RECOVERING", "FwStateAttention2", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	07.07.2009 08:32:37.385
fwOT_FwWienerChannel.actions	_FwFsmObjectType	"ON/OFF", "", "1", "", "0", "OFF/ON", "", "1", "", "0", "ERROR/OFF", "", "1", "", "0"	0x101	07.07.2009 08:32:37.385
fwOT_FwWienerChannel.parameters	_FwFsmObjectType	"int estimatedTime = 0"	0x101	18.06.2009 15:12:44.156
fwOT_CSC_LV_NODES.panel	_FwFsmObjectType	"CSC_LV_NODES.pnl"	0x101	18.06.2009 15:12:44.187
fwOT_CSC_LV_NODES.states	_FwFsmObjectType	"OFF", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|        when ( $ALL$FwCHILDREN in_state ON )  move_to ON|", "", "", "ERROR", "FwStateAttention3", "        when ( $ALL$FwCHILDREN in_state ON )  move_to ON|        when ( $ALL$FwCHILDREN in_state {ON,OFF} )  move_to OFF|", "", "", "ON", "FwStateOKPhysics", "   when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|   when ( $ANY$FwCHILDREN in_state OFF )  move_to OFF|", "", "", "STANDBY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|  when ( $ALL$FwCHILDREN in_state ON )  move_to ON| when ( $ANY$FwCHILDREN in_state OFF )  move_to OFF|", "", ""	0x101	07.07.2009 08:32:38.978
fwOT_CSC_LV_NODES.actions	_FwFsmObjectType	"OFF/ON", "", "1", "do ON $ALL$FwCHILDREN", "0", "OFF/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0", "OFF/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "ERROR/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "ERROR/ON", "", "1", "do ON $ALL$FwCHILDREN", "0", "ERROR/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0", "ON/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0", "ON/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "STANDBY/ON", "", "1", "do ON $ALL$FwCHILDREN", "0", "STANDBY/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0"	0x101	07.07.2009 08:32:38.978
fwOT_CSC_LV_NODES.parameters	_FwFsmObjectType		0x141	18.06.2009 15:12:44.281
fwOT_CSC_LV_TREE_NODES.panel	_FwFsmObjectType	"CSC_LV_TREE_NODES.pnl"	0x101	18.06.2009 15:12:44.312
fwOT_CSC_LV_TREE_NODES.states	_FwFsmObjectType	"OFF", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR,DEAD} ) move_to ERROR|        when ( $ALL$FwCHILDREN in_state ON )  move_to ON|", "", "", "ERROR", "FwStateAttention3", "        when ( $ALL$FwCHILDREN in_state ON )  move_to ON|        when ( $ALL$FwCHILDREN in_state {ON,OFF,RAMP,STANDBY} )  move_to OFF|", "", "", "ON", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR,DEAD} ) move_to ERROR|   when ( $ANY$FwCHILDREN in_state {OFF,RAMP,STANDBY} )  move_to OFF|", "", ""	0x101	07.07.2009 08:32:39.290
fwOT_CSC_LV_TREE_NODES.actions	_FwFsmObjectType	"OFF/ON", "", "1", "do ON $ALL$FwCHILDREN", "0", "OFF/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0", "OFF/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "ERROR/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "ERROR/ON", "", "1", "do ON $ALL$FwCHILDREN", "0", "ERROR/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0", "ON/OFF", "", "1", "do OFF $ALL$FwCHILDREN", "0", "ON/STANDBY", "", "1", "do ON $ALL$FwCHILDREN", "0"	0x101	07.07.2009 08:32:39.290
fwOT_CSC_LV_TREE_NODES.parameters	_FwFsmObjectType		0x141	18.06.2009 15:12:44.406
