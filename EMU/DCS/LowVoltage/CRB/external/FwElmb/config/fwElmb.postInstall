#uses "fwElmb/fwElmbConstants.ctl"
#uses "fwElmb/fwElmbUser.ctl"

main()
{
// Local Variables
// ---------------
  bool bRawExists = false;

  int iPos;
  int i, j;
	
  dyn_bool dbIsStandard;
  dyn_bool dbIsRaw;
  dyn_bool dbStandardIsStandard = makeDynBool(true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true,
                                              true);
  dyn_bool dbStandardIsRaw = makeDynBool(true,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false,
                                         false);
	
  dyn_string dsDpTypes;
  dyn_string dsElements;
  dyn_string dsTypes;
  dyn_string dsFunctions;
  dyn_string dsParameters;
  dyn_string dsPrefix;
  dyn_string dsDescriptions;
  dyn_string dsPDOdps;
  dyn_string dsStandardTypes = makeDynString("Raw ADC Value",
                                             "Direct ADC Voltage",
                                             "Voltage Divider",
                                             "Current",
                                             "NTC 10 kOhm",
                                             "Ptx 2-wire",
                                             "Ptx 4-wire",
                                             "RC_Temperature",
                                             "RC_Humidity",
                                             "RC_SupplyVoltage",
                                             "RC_TurbineCurrent");
  dyn_string dsStandardFunctions = makeDynString(ELMB_NO_INFO,
                                                 "%c1*%x1",
                                                 "%c1*%x1",
                                                 "%c1/%x1",
                                                 "1/(9.577e-4+2.404e-4*log(1.e-6*%c1*%x1/(2.5-1.e-6*%c1))+2.341e-7*pow(log(%x1*1.e-6*%c1/(2.5-1.e-6*%c1)),3))-273.15",
                                                 "(3.9083e-3-pow((1.5275e-5+2.31e-6*(1-%x1*1.e-6*%c1/(%x2*(2.5-1.e-6*%c1)))),0.5))/1.155e-6",
                                                 "(3.9083e-3-pow((1.5275e-5+2.31e-6*(1-%c2*%x1/(%c1*%x2))),0.5))/1.155e-6",
                                                 "(3740/(12.46-log((32768/(0.013107*%c1))-1)))-273",
                                                 "161*(((0.013107*%c1)/65536)-0.16)",
                                                 "20*(0.013107*%c1)/65536",
                                                 "((0.013107*%c1)+6810)/16730");
  dyn_string dsStandardParameters = makeDynString(ELMB_NO_INFO,
                                                  "1.0",
                                                  "100.0",
                                                  "1.0",
                                                  "1000000.0",
                                                  "1000000.0|100.0",
                                                  "100.0|100.0",
                                                  ELMB_NO_INFO,
                                                  ELMB_NO_INFO,
                                                  ELMB_NO_INFO,
                                                  ELMB_NO_INFO);
  dyn_string dsStandardPrefix = makeDynString(ELMB_AI_PREFIX,
                                              "voltage_",
                                              "DIVIDER_",
                                              "CURRENT_",
                                              "NTC_",
                                              "PT_2W_",
                                              "PT_4W_",
                                              "RC_Temperature_",
                                              "RC_Humidity_",
                                              "RC_SupplyVoltage_",
                                              "RC_TurbineCurrent_");
  dyn_string dsStandardDescriptions = makeDynString(ELMB_NO_INFO,
                                                    "Multiplication factor",
                                                    "Attenuation factor",
                                                    "Adapter resistance in Ohms (I = V/R)",
                                                    "Adapter pre-resistor in Ohms",
                                                    "Adapter pre-resistor in Ohms|Characteristic sensor resistance at 0 C",
                                                    "Adapter pre-resistor (Rs) in Ohms|Characteristic sensor resistance at 0 C",
                                                    ELMB_NO_INFO,
                                                    ELMB_NO_INFO,
                                                    ELMB_NO_INFO,
                                                    ELMB_NO_INFO);
  dyn_string dsStandardPDOdps = makeDynString(ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO,
                                              ELMB_NO_INFO);
  dyn_string dsElmbs;
  dyn_string dsDOs;
  dyn_string dsDIConfigs;
  dyn_string dsExceptionInfo;
	
// Executable Code
// ---------------
  DebugN("fwElmb: post install file");

  // Configure the OPC server to map invalid bits to quality flag and
  // a value of 10 seconds for the alive timer
  dpSetWait(ELMB_OPC_SERVER + ".InvalidMapping", true,
            ELMB_OPC_SERVER + ".QualInfoFilter.QualInfo", 1,
            ELMB_OPC_SERVER + ".QualInfoFilter.QualInfoDetail", 0,
            ELMB_OPC_SERVER + ".StateTimer", 10,
            ELMB_OPC_SERVER + ".ReconnectTimer", 10);
	
  // Check if the sensor information DP exists, and if not, create it
  if (!dpExists(ELMB_SENSOR_INFO_NAME))
    dpCreate(ELMB_SENSOR_INFO_NAME, ELMB_SENSOR_INFO_TYPE_NAME);
		
  // Now check what data is contained
  dpGet(ELMB_SENSOR_INFO_NAME + ".types", dsTypes,
        ELMB_SENSOR_INFO_NAME + ".functions", dsFunctions,
        ELMB_SENSOR_INFO_NAME + ".parameters", dsParameters,
        ELMB_SENSOR_INFO_NAME + ".prefix", dsPrefix,
        ELMB_SENSOR_INFO_NAME + ".parameterDescriptions", dsDescriptions,
        ELMB_SENSOR_INFO_NAME + ".isStandard", dbIsStandard,
        ELMB_SENSOR_INFO_NAME + ".isRaw", dbIsRaw,
        ELMB_SENSOR_INFO_NAME + ".pdoDp", dsPDOdps);
				
  // Add default names for any functions which do not have type names
  i = 1;
  while (dynlen(dsFunctions) > dynlen(dsTypes))
    dynAppend(dsTypes, "Sensor_" + i);
	
  // Remove any extra type names if there is not function for it
  while (dynlen(dsTypes) > dynlen(dsFunctions))
    dynRemove(dsTypes, dynlen(dsTypes));
	
  // For the rest of information for a sensor, it is not important if there are
  // too many entries, but it would cause errors if there are too few. Therefore,
  // we only need to (possibly) append some data
  while (dynlen(dsFunctions) > dynlen(dsParameters))
    dynAppend(dsParameters, ELMB_NO_INFO);
  i = 1;
  while (dynlen(dsFunctions) > dynlen(dsPrefix))
    dynAppend(dsPrefix, "Prefix_" + i);
  while (dynlen(dsFunctions) > dynlen(dsDescriptions))
    dynAppend(dsDescriptions, ELMB_NO_INFO);
		
  // We now have a relatively consistent collection of sensors that were in the system
  // Loop through these sensors, and append any that are not found in the 'Standard'
  // set
  for (i = 1; i <= dynlen(dsTypes); i++) {
    // Does this sensor already exist?
    if (dynContains(dsStandardTypes, dsTypes[i]) <= 0) {
      dynAppend(dsStandardTypes, dsTypes[i]);
      dynAppend(dsStandardFunctions, dsFunctions[i]);
      dynAppend(dsStandardParameters, dsParameters[i]);
      dynAppend(dsStandardPrefix, dsPrefix[i]);
      dynAppend(dsStandardDescriptions, dsDescriptions[i]);
      dynAppend(dbStandardIsStandard, false);
      if (bRawExists) {
        dynAppend(dbStandardIsRaw, dbIsRaw[i]);
        if (dpExists(dsPDOdps[i]))
          dynAppend(dsStandardPDOdps, dsPDOdps[i]);
        else
          dynAppend(dsStandardPDOdps, ELMB_NO_INFO);
      } else {
        dynAppend(dbStandardIsRaw, false);
        dynAppend(dsStandardPDOdps, ELMB_NO_INFO);
      }
    }
  }
	
  // Enter the completed set of sensor information back into the DP
  dpSetWait(ELMB_SENSOR_INFO_NAME + ".types", dsStandardTypes,
            ELMB_SENSOR_INFO_NAME + ".functions", dsStandardFunctions,
            ELMB_SENSOR_INFO_NAME + ".parameters", dsStandardParameters,
            ELMB_SENSOR_INFO_NAME + ".prefix", dsStandardPrefix,
            ELMB_SENSOR_INFO_NAME + ".parameterDescriptions", dsStandardDescriptions,
            ELMB_SENSOR_INFO_NAME + ".isStandard", dbStandardIsStandard,
            ELMB_SENSOR_INFO_NAME + ".isRaw", dbStandardIsRaw,
            ELMB_SENSOR_INFO_NAME + ".pdoDp", dsStandardPDOdps);
  
  // Need to check now whether to create some new datapoints and whether to
  // add some configs
  fwDevice_initialize();
  dsElmbs = dpNames(getSystemName() + "*", ELMB_TYPE_NAME);
  for (i = 1; i <= dynlen(dsElmbs); i++) {
    fwDevice_setDpFunction(dsElmbs[i], fwDevice_DPFUNCTION_SET, dsExceptionInfo);
    fwDevice_setAddress(dsElmbs[i], makeDynString(fwDevice_ADDRESS_DEFAULT), dsExceptionInfo);
    dsDOs = dpNames(dsElmbs[i] + "*", ELMB_DO_TYPE_NAME);
    if (dynlen(dsDOs) > 0) {
      for (j = 1; j <= dynlen(dsDOs); j++) {
        fwDevice_setAddress(dsDOs[j], makeDynString(fwDevice_ADDRESS_NONE), dsExceptionInfo);
      }
      fwElmb_createDigitalBytes(dsElmbs[i], true, dsExceptionInfo);
    }
    dsDIConfigs = dpNames(dsElmbs[i] + "*", ELMB_DI_CONFIG_TYPE_NAME);
    if (dynlen(dsDIConfigs) > 0) {
      for (j = 1; j <= dynlen(dsDIConfigs); j++) {
        fwDevice_setAddress(dsDIConfigs[j], makeDynString(fwDevice_ADDRESS_DEFAULT), dsExceptionInfo);
      }
      if (!fwElmb_checkPortAInputs(dsElmbs[i]))
        fwElmb_activatePortAMasks(dsElmbs[i], dsExceptionInfo, false);
    }
  }
						
  // Add a simulation manager with correct number into console
  fwInstallation_appendDriver("SIM",
                              "OPC DA Client -num 7",
                              "PVSS00opc",
                              "once",
                              30, 2, 2,
                              "-num 7");
  
  // Add a control manager with the correct number into console
  fwInstallation_appendManager(true,
                               "Control manager for ELMB invalid channels check",
                               "PVSS00ctrl",
                               "always",
                               30, 2, 1,
                               "fwElmb/fwElmbCheckInvalid.ctl -num 70");
                               

  if (dynlen(dsExceptionInfo) > 0) {
    DebugN("Post installation script executed with errors:");
    DebugN(dsExceptionInfo);
  } else {
    DebugN("Post installation script successfully executed. Have fun!!!!");
  }
  DebugN("***************************************************");
  DebugN("*                                                 *");
  DebugN("* If you find any problems please report them to: *");
  DebugN("*                                                 *");
  DebugN("*               James.Cook@cern.ch                *");
  DebugN("*                                                 *");
  DebugN("***************************************************");

}
