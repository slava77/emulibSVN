V 10
1
LANG:1 8 (NoName)
PANEL,575 139 617 177 N "_3DFace" 0
"main()
{
// Local Variables
// ---------------
	const int X_ORIGIN = 0;
	const int Y_ORIGIN = 0;
	const int BORDER = 10;
	
	int i, j, k;
	int x = X_ORIGIN;
	int y = Y_ORIGIN;
	int xMax = X_ORIGIN;
	int yMax = Y_ORIGIN;
	int btnW, btnH;
	int btnX, btnY;
	int txtW, txtH;
	int txtX, txtY;
	
	string sReference;
	
	dyn_int diSizeTitle;
	dyn_int diSizeInfo;
	
	dyn_string dsItems;
	dyn_string dsTemp;
	dyn_string dsTypes = makeDynString(ELMB_CAN_BUS_TYPE_NAME, ELMB_TYPE_NAME);
	dyn_string dsTitles = makeDynString(\"Bus Name\", \"ELMB Name\");
	dyn_string dsTitleReferences = makeDynString(\"busTitle\", \"elmbTitle\");

// Executable Code
// ---------------
	// Loop through all items the panel has to show
	for (i = 1; i <= dynlen(dsTypes); i++) {
		// Get all in the system
		dsItems = dpNames(\"*\", dsTypes[i]);
		
		// Check if any exist
		if (dynlen(dsItems) > 0) {
		
			// Add the title
			addSymbol(myModuleName(), myPanelName(),
								\"fwElmb/objects/fwElmbMonitorSetupTitleRef.pnl\", dsTitleReferences[i],
								makeDynString(\"$sTitle:\" + dsTitles[i]),
								x, y,
								0.0, 1.0, 1.0);
								
			// Get size of the title reference panel
			diSizeTitle = getPanelSize(\"fwElmb/objects/fwElmbMonitorSetupTitleRef.pnl\");
			
			// Adjust the size for the border (x only needs to worry about the
			// left border, but y needs to worry about border at top AND bottom)
			for (j = 1; j <= dynlen(diSizeTitle); j++)
				diSizeTitle[j] -= (BORDER * j);
		
			// Increase the y coordinate for the next 'row'
			y += diSizeTitle[2];
		
			// Now get the size of the information reference panel
			diSizeInfo = getPanelSize(\"fwElmb/objects/fwElmbMonitorSetupRef.pnl\");
			for (j = 1; j <= dynlen(diSizeInfo); j++)
				diSizeInfo[j] -= (BORDER * j);
							
			// Now loop through all items, adding the panel references
			for (j = 1; j <= dynlen(dsItems); j++) {
		
				// Split the name to be used as a reference
				dsTemp = strsplit(dsItems[j], fwDevice_HIERARCHY_SEPARATOR);
				sReference = dsTemp[dynlen(dsTemp)];
			
				// Add the panel reference
				addSymbol(myModuleName(), myPanelName(),
									\"fwElmb/objects/fwElmbMonitorSetupRef.pnl\", sReference,
									makeDynString(\"$sDpName:\" + dsItems[j]),
									x, y,
									0.0, 1.0, 1.0);
								
				// Increase the y coordinate for the next panel
				y += diSizeInfo[2];
			}	// End of loop for rows in column
		
			// This column is finished so check for maximum y
			if (y > yMax)
				yMax = y;
			
			// Reset the y coordinate for the next column
			y = Y_ORIGIN;
			
			// Set the values for x and the current maximum x
			if (diSizeTitle[1] > diSizeInfo[1])
				xMax += diSizeTitle[1];
			else
				xMax += diSizeInfo[1];
				
			// Add slight offset for clarity for next symbol
			x = xMax + BORDER;
			
		} // End if for any items existing
	} // End of loop for columns in panel
		
	// Add single border (but for left, right, top and bottom) back
	// to full panel size
	xMax += (2 * BORDER);
	yMax += (2 * BORDER);
	
	// Get the size of the OK button
	getValue(\"cmdOK\", \"size\", btnW, btnH);
	
	// Set all buttons to the same size
	setValue(\"cmdApply\", \"size\", btnW, btnH);
	setValue(\"cmdCancel\", \"size\", btnW, btnH);
	setValue(\"cmdActivate\", \"size\", btnW, btnH);
	setValue(\"cmdStop\", \"size\", btnW, btnH);
	
	// Add room for the button
	yMax += BORDER + btnH;
	
	// Position the buttons correctly
	btnX = xMax - BORDER - btnW;
	btnY = yMax - BORDER - btnH;
	setValue(\"cmdCancel\", \"position\", btnX, btnY);
	btnX = xMax - (2 * BORDER) - (2 * btnW);
	setValue(\"cmdApply\", \"position\", btnX, btnY);
	btnX = xMax - (3 * BORDER) - (3 * btnW);
	setValue(\"cmdOK\", \"position\", btnX, btnY);
	btnX = X_ORIGIN + BORDER;
	setValue(\"cmdActivate\", \"position\", btnX, btnY);
	btnX = X_ORIGIN + (2 * BORDER) + btnW;
	setValue(\"cmdStop\", \"position\", btnX, btnY);
	
	// Set the panel size
	setPanelSize(myModuleName(), myPanelName(), false, xMax, yMax);

	// Return to calling routine
	return;
}
" 0
EE E E 1 -1 -1 0  290 20
"" 0 1
E"void pnlSetValues()
{
// Local Variables
// ---------------
	int i;
	
	dyn_bool dbValues;
	
	dyn_string dsArguments;
	dyn_string dsValues;
	dyn_string dsArgumentsToSet;

// Executable Code
// ---------------
	// Get the data from the two list boxes, and reduce it to the actual
	// operations requested
	dsArguments = lstArguments.items;
	dsValues = lstValues.items;
	
	// Check the two arrays are the same length
	if (dynlen(dsArguments) != dynlen(dsValues)) {
		DebugN(\"Inconsistent arguments to values: \" + dynlen(dsArguments) + \" arguments, \" + dynlen(dsValues) + \" values\");
	} else {
		// Loop backwards through the array (as the last operations are the
		// ones that matter)
		for (i = dynlen(dsArguments); i > 0; i--) {
			if (dynContains(dsArgumentsToSet, dsArguments[i]) == 0) {
				dynAppend(dsArgumentsToSet, dsArguments[i]);
				if (dsValues[i] == \"TRUE\")
					dynAppend(dbValues, true);
				else
					dynAppend(dbValues, false);
			}
		}
		
//		DebugN(dsArgumentsToSet);
//		DebugN(dbValues);
		
		// Set all the values
		dpSet(dsArgumentsToSet, dbValues);
		
		// Now set the 'refresh' flag so that information in the control script is updated
		dpSet(ELMB_MONITOR_DPNAME + \".refresh\", true);
	}

	// Return to calling routine
	return;
}
" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
13 0
"cmdOK"
""
1 290 20 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
288 18 362 47
T 
1
LANG:1 2 OK
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Set the values
	pnlSetValues();
	
	// Close the panel
	PanelOff();

	// Return to calling routine
	return;
}" 0
 E E E
17 2
"lstArguments"
""
1 20 70 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
18 68 182 112
0
E
E
E

3 1
17 3
"lstValues"
""
1 190 70 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
188 68 372 112
0
E
E
E

3 1
13 5
"cmdApply"
""
1 370 20 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
368 18 442 47
T 
1
LANG:1 5 Apply
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Set the values
	pnlSetValues();

	// Return to calling routine
	return;
}" 0
 E E E
13 6
"cmdCancel"
""
1 450 20 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
6 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
448 18 522 47
T 
1
LANG:1 6 Cancel
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Close the panel
	PanelOff();

	// Return to calling routine
	return;
}" 0
 E E E
13 7
"cmdActivate"
""
1 20 20 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
6 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
18 18 92 47
T 
1
LANG:1 0 
"main()
{
// Local Variables
// ---------------
	bool bActive;

// Executable Code
// ---------------
	// Toggle the value
	dpGet(\"fwElmbMonitor.active\", bActive);
	dpSet(\"fwElmbMonitor.active\", !bActive);

	// Return to calling routine
	return;
}" 0
 E E "main()
{
	dpConnect(\"cbkElmbMonitoringActive\", \"fwElmbMonitor.active\");
}

void cbkElmbMonitoringActive(string argsDpe, bool argbActive)
{
	if (argbActive)
		this.text = \"Deactivate\";
	else
		this.text = \"Activate\";
}
" 0

13 8
"cmdStop"
""
1 100 20 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
7 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
98 18 172 47
T 
1
LANG:1 0 
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	dpSet(\"fwElmbMonitor.exit\", true);

	// Return to calling routine
	return;
}" 0
 E E "main()
{
	dpConnect(\"cbkElmbMonitoringRunning\", \"fwElmbMonitor.running\");
}

void cbkElmbMonitoringRunning(string argsDpe, bool argbRunning)
{
	if (argbRunning) {
		this.text = \"Stop\";
		this.enabled = true;
	} else {
		this.text = \"Stopped\";
		this.enabled = false;
	}
}
" 0

0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0