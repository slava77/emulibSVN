V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 367 188 N "_3DFace" 2
"$sDpName"
"$sPower"
E E E E E 1 -1 -1 0  125 95
""0  1
E "void pnlDisplayAlertDetails()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
  ChildPanelOnCentral(\"fwElmbPSU/fwElmbPSUSumAlertDetails.pnl\",
                      \"Alert Details\",
                      makeDynString(\"$sDpName:\" + $sDpName + \".\" + $sPower));

  // Return to calling routine
  return;
}

void pnlDisplayValues(bool argbShow = true)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
  if (argbShow) {
    txtCurrent.visible = true;
    txtVolts.visible = true;
  } else {
    txtCurrent.visible = false;
    txtVolts.visible = false;
  }

  // Return to calling routine
  return;
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
7 0
"ledPowerAndAlert"
""
1 125 60 E E E 1 E 1 E N "_WindowText" E N "FwStateOKNotPhysics" E E
 "main()
{
// Local Variables
// ---------------
	bool bAlert = true;
	bool bShowValues;
	bool bShowMilliAmps;
	
	int iReturn;
	int iFormat;
	
	string sText;
	string sAlertDetailsText;
	
	dyn_string dsMenu;

// Executable Code
// ---------------
	if (bAlert) {
		sAlertDetailsText = \"PUSH_BUTTON, Show alert details..., 1, 1\";
	} else {
		sAlertDetailsText = \"PUSH_BUTTON, Show alert details..., 1, 0\";
	}
	
	// Get the current display format settings
	dpGet($sDpName + \".\" + $sPower + \".showValues\", iFormat);
	if ((iFormat & EPSU_SHOW_VALUES) == 0)
		bShowValues = false;
	else
		bShowValues = true;
	if ((iFormat & EPSU_SHOW_MILLIAMPS) == 0)
		bShowMilliAmps = false;
	else
		bShowMilliAmps = true;

	// Set the menu as necessary
	if (bShowValues) {
		if (bShowMilliAmps) {
			dsMenu = makeDynString(	sAlertDetailsText,
															\"PUSH_BUTTON, Hide voltages/currents, 2, 1\",
															\"PUSH_BUTTON, Show Amps, 3, 1\");
		} else {
			dsMenu = makeDynString(	sAlertDetailsText,
															\"PUSH_BUTTON, Hide voltages/currents, 2, 1\",
															\"PUSH_BUTTON, Show milliAmps, 3, 1\");
		}
	} else {
		dsMenu = makeDynString(	sAlertDetailsText,
														\"PUSH_BUTTON, Show voltages/currents, 2, 1\");
	}

	// Display the popup menu
	if (popupMenu(dsMenu, iReturn) == 0) {
	
		// Action the required selection
		switch (iReturn) {
			case 1:
				pnlDisplayAlertDetails();
				break;
			case 2:
				if (bShowValues) {
					if (bShowMilliAmps) {
						iFormat = EPSU_SHOW_MILLIAMPS;
					} else {
						iFormat = 0x00;
					}
				} else {
					if (bShowMilliAmps) {
						iFormat = EPSU_SHOW_VALUES | EPSU_SHOW_MILLIAMPS;
					} else {
						iFormat = EPSU_SHOW_VALUES;
					}
				}
				break;
			case 3:
				if (bShowValues && bShowMilliAmps) {
					iFormat = EPSU_SHOW_VALUES;
				} else {
					iFormat = EPSU_SHOW_VALUES | EPSU_SHOW_MILLIAMPS;
				}
				break;
		}
		
		dpSet($sDpName + \".\" + $sPower + \".showValues\", iFormat);
	}

	// Return to calling routine
	return;
}" 0
 E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
// Local Variables
// ---------------
  int iFormat;
  int iType;
	
  string sPowerDp;
  string sVoltDpe;
  string sCurrentDpe;
  string sId;
  string sPortDpe;
  string sDoConfig;
  string sSystem;
  
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  // Set the title text
  lblTitleText.text = $sPower;
	
  // Get the DPE of the element to connect to
  dpGet($sDpName + \".power\", sPowerDp,
        $sDpName + \".\" + $sPower + \".current\", sCurrentDpe,
        $sDpName + \".\" + $sPower + \".volts\", sVoltDpe,
        $sDpName + \".\" + $sPower + \".showValues\", iFormat);
  
  // Get the system the information is stored on
  sSystem = dpSubStr($sDpName, DPSUB_SYS);
  sPowerDp = sSystem + sPowerDp;
  sCurrentDpe = sSystem + sCurrentDpe;
  sVoltDpe = sSystem + sVoltDpe;
  
  // Get the ID of the port and the parent of the port
  dpGet(sPowerDp + \".id\", sId);
  fwDevice_getParent(sPowerDp, sDoConfig, dsExceptionInfo);
  if (patternMatch(sId, \"A;*\"))
    sPortDpe = sDoConfig + fwDevice_HIERARCHY_SEPARATOR + ELMB_DO_PREFIX + \"Bytes.\" + ELMB_DO_PREFIX + \"A_read\";
  else
    sPortDpe = sDoConfig + fwDevice_HIERARCHY_SEPARATOR + ELMB_DO_PREFIX + \"Bytes.\" + ELMB_DO_PREFIX + \"C_read\";
	
  // Connect to the required elements
  dpConnect(\"cbkPowerSettings\",
            sPortDpe + \":_online.._invalid\",
            $sDpName + \".\" + $sPower + \":_alert_hdl.._act_state_color\",
            $sDpName + \".\" + $sPower + \":_alert_hdl.._act_state_text\",
            $sDpName + \".\" + $sPower + \":_alert_hdl.._active\");	
  dpConnect(\"cbkVolts\",
            sVoltDpe,
            sVoltDpe + \":_online.._invalid\",
            sVoltDpe + \":_alert_hdl.._act_state_color\",
            sVoltDpe + \":_alert_hdl.._act_state_text\",
            sVoltDpe + \":_alert_hdl.._active\");	
            
  // Check whether alert handling has been defined for the current
  dpGet(sCurrentDpe + \":_alert_hdl.._type\", iType);
  if (iType == DPCONFIG_NONE) {
    dpConnect(\"cbkCurrentWithOutAlert\",
              sCurrentDpe,
              sCurrentDpe + \":_online.._invalid\",
              $sDpName + \".\" + $sPower + \".showValues\");
  } else {
    dpConnect(\"cbkCurrentWithAlert\",
              sCurrentDpe,
              sCurrentDpe + \":_online.._invalid\",
              $sDpName + \".\" + $sPower + \".showValues\",
              sCurrentDpe + \":_alert_hdl.._act_state_color\",
              sCurrentDpe + \":_alert_hdl.._act_state_text\",
              sCurrentDpe + \":_alert_hdl.._active\");	
  }
  dpConnect(\"cbkShowValues\", $sDpName + \".\" + $sPower + \".showValues\");
	
  // Return to calling routine
  return;
}

void cbkPowerSettings(string sInvalidConfig, bool argbInvalid,
                      string sAlertColourDpe, string argsColour,
                      string sAlertTextDpe, string argsText,
                      string sAlertActiveDpe, string argbActive)
{
// Local Variables
// ---------------
  string sElementColour;
  
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  if (argbInvalid) {
    fwColour_convertStatusToColour(sElementColour, argsColour, false, argbInvalid, dsExceptionInfo);  
    this.backCol = sElementColour;
    this.toolTipText = \"Power state unknown\";
  } else if (argbActive) {
    fwColour_convertStatusToColour(sElementColour, argsColour, !argbActive, argbInvalid, dsExceptionInfo);  
    this.backCol = sElementColour;
    this.toolTipText = argsText;
  } else {
    this.backCol = \"FwStateOKNotPhysics\";
    this.toolTipText = \"\";
  }

  // Return to calling routine
  return;
}

void cbkVolts(string argsDpe, float argfValue,
              string argsConfigInvalid, bool argbInvalid,
              string sAlertColourDpe, string argsColour,
              string sAlertTextDpe, string argsText,
              string sAlertActiveDpe, string argbActive)
{
// Local Variables
// ---------------
  string sValue;
  string sElementColour;
  
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  if (argbInvalid) {
    fwColour_convertStatusToColour(sElementColour, argsColour, false, argbInvalid, dsExceptionInfo);  
    txtVolts.foreCol = sElementColour;
    txtVolts.toolTipText = \"Voltage value unknown\";
  } else if (argbActive) {
    fwColour_convertStatusToColour(sElementColour, argsColour, !argbActive, argbInvalid, dsExceptionInfo);  
    txtVolts.foreCol = sElementColour;
    txtVolts.toolTipText = argsText;
  } else {
    txtVolts.foreCol = \"FwStateOKNotPhysics\";
    txtVolts.toolTipText = \"\";
  }
  
  // Format the value
  sprintf(sValue, \"%1.2f V\", argfValue);
	
  // Display the value
  txtVolts.text = sValue;

  // Return to calling routine
  return;
}

void cbkCurrentWithAlert(string argsDpe, float argfValue,
                         string argsConfigInvalid, bool argbInvalid,
                         string argsShowFormat, int argiFormat,
                         string sAlertColourDpe, string argsColour,
                         string sAlertTextDpe, string argsText,
                         string sAlertActiveDpe, string argbActive)
{
// Local Variables
// ---------------
  string sValue;
  string sElementColour;
  
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  if (argbInvalid) {
    fwColour_convertStatusToColour(sElementColour, argsColour, false, argbInvalid, dsExceptionInfo);  
    txtCurrent.foreCol = sElementColour;
    txtCurrent.toolTipText = \"Current value unknown\";
  } else if (argbActive) {
    fwColour_convertStatusToColour(sElementColour, argsColour, !argbActive, argbInvalid, dsExceptionInfo);  
    txtCurrent.foreCol = sElementColour;
    txtCurrent.toolTipText = argsText;
  } else {
    txtCurrent.foreCol = \"FwStateOKNotPhysics\";
    txtCurrent.toolTipText = \"\";
  }
  
  // Format the value
  if ((argiFormat & EPSU_SHOW_MILLIAMPS) == 0)
    sprintf(sValue, \"%1.2f A\", argfValue);
  else
    sprintf(sValue, \"%1.1f mA\", argfValue * 1000.0);

  // Display the value
  txtCurrent.text = sValue;

  // Return to calling routine
  return;
}

void cbkCurrentWithOutAlert(string argsDpe, float argfValue,
                            string argsConfigInvalid, bool argbInvalid,
                            string argsShowFormat, int argiFormat)
{
// Local Variables
// ---------------
  string sValue;
  string sElementColour;
  
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  if (argbInvalid) {
    fwColour_convertStatusToColour(sElementColour, \"\", false, argbInvalid, dsExceptionInfo);  
    txtCurrent.foreCol = sElementColour;
    txtCurrent.toolTipText = \"Current value unknown\";
  } else {
    txtCurrent.foreCol = \"FwStateOKNotPhysics\";
    txtCurrent.toolTipText = \"\";
  }
  
  // Format the value
  if ((argiFormat & EPSU_SHOW_MILLIAMPS) == 0)
    sprintf(sValue, \"%1.2f A\", argfValue);
  else
    sprintf(sValue, \"%1.1f mA\", argfValue * 1000.0);
		
  // Display the value
  txtCurrent.text = sValue;

  // Return to calling routine
  return;
}

void cbkShowValues(string argsShowFormat, int iFormat)
{
// Local Variables
// ---------------
  string sValue;

// Executable Code
// ---------------
// Show or hide values as required
  if ((iFormat & EPSU_SHOW_VALUES) == 0) {
    pnlDisplayValues(false);
  } else {
    pnlDisplayValues();
  }

  // Return to calling routine
  return;
}
" 0
 E 0 1 1 0 1 E U  1 E 125 60 5 5
2 1
"lblTitleText"
""
1 70 50 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 52 118 68
0 2 0 "0s" 0 0 0 66 0 0  72 52 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
2 2
"txtVolts"
""
1 70 70 E E E 1 E 0 E N "_WindowText" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 72 178 88
0 2 0 "0s" 0 0 0 65 0 0  72 72 1
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
2 4
"txtCurrent"
""
1 70 90 E E E 1 E 0 E N "_WindowText" E N "_Transparent" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 92 178 108
0 2 0 "0s" 0 0 0 65 0 0  72 92 1
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0