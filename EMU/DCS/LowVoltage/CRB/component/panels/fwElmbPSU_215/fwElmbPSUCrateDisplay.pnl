V 11
1
LANG:1 18 fwEpsuCrateDisplay
PANEL,-1 -1 946 575 N "_3DFace" 1
"$sDpName"
"main()
{
// Local Variables
// ---------------
  int i;
  int x, y;
  int iMaxX = 0;
  int iMaxY = 0;
  int iMultiplier;
  int iBranchNumber;
	
  dyn_int diSize;
	
  dyn_string dsBranches;
  dyn_string dsTemp;

// Executable Code
// ---------------
  // Get which branches are in this crate
  dsBranches = dpNames($sDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", EPSU_BRANCH_DPT_NAME);
  dsTemp = strsplit($sDpName, fwDevice_HIERARCHY_SEPARATOR);
  lblCrate.text = dsTemp[dynlen(dsTemp)];
	
  // Check if there are any branches to be shown
  if (dynlen(dsBranches) > 0) {
	
    // Ensure 'warning' text not shown and that buttons are
    lblNoBranches.visible = false;
    cmdCalibration.visible = true;
    cmdSwitchAll.visible = true;
    cmdDetailFormat.visible = true;
    cmdReadPowerSettings.visible = true;

    // Get the size of the panel that is to be entered
    diSize = getPanelSize(\"fwElmbPSU/objects/fwElmbPSUBranchRef.pnl\");
	
    // Enter the panel symbols for the existing branches in the correct place
    for (i = 1; i <= dynlen(dsBranches); i++) {
	
      // Get which branch this is
      dpGet(dsBranches[i] + \".id\", iBranchNumber);
		
      // Set the y coordinate
      if ((iBranchNumber % 2) == 1)
        y = diSize[2] + 10;
      else
        y = 30;
			
      // Calculate the x coordinate
      iMultiplier = (iBranchNumber / 2);
      x = iMultiplier * (diSize[1] - 16);
		
      // Check for maximum
      if (y > iMaxY)
        iMaxY = y;
      if (x > iMaxX)
        iMaxX = x;
			
      // Display the branch panel
      addSymbol(myModuleName(),
                myPanelName(),
                \"fwElmbPSU/objects/fwElmbPSUBranchRef.pnl\",
                \"Branch\" + iBranchNumber,
                makeDynString(\"$sDpName:\" + dsBranches[i]),
                x, y,
                0.0, 1.0, 1.0);
    }
	
    // Now we have the max x and y, so calculate size of panel required
//    iMaxX += diSize[1];
//    iMaxY += diSize[2];
    // This cannot be done as it is a root panel
//    setPanelSize(myModuleName(), myPanelName(), FALSE, iMaxX, iMaxY);
  
    // Read power settings to show correct data in panel
    pnlReadPower();
  } else {
    // Ensure 'warning' text is shown and that buttons are not
    lblNoBranches.visible = true;
    cmdCalibration.visible = false;
    cmdSwitchAll.visible = false;
    cmdDetailFormat.visible = false;
//    cmdShowAlerts.visible = false;
    cmdReadPowerSettings.visible = false;
  }

  // Return to calling routine
  return;
}" 0
 "main()
{
	int i;
}" 0
 E E E 1 -1 -1 0  60 110
""0  1
E "void pnlReadPower()
{
  string sElmb;
  string sSystem;
  dyn_string dsExceptionInfo;
  dpGet($sDpName + \".node\", sElmb);
  sSystem = dpSubStr($sDpName, DPSUB_SYS);
  fwElmbUser_synchronizeDoBytes(sSystem + sElmb, dsExceptionInfo);
 // if (dynlen(dsExceptionInfo) > 0)
 //   fwExceptionHandling_display(dsExceptionInfo);
 // fwElmbUser_getDoBytes(sSystem + sElmb, dsExceptionInfo);
  return;
}" 0
 2
"CBRef" "1"
"EClose" "main()
{
	int i;
}" 0

""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 0
"lblNoBranches"
""
1 258 120 E E E 1 E 0 E N "_WindowText" E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 260 122 686 148
1 2 0 "0s" 0 0 0 65 0 0  260 122 1
1
LANG:1 26 Arial,-1,19,5,40,0,0,0,0,0
0 1
LANG:1 45 This CAN PSU Crate does not have any branches
2 6
"txtTitle"
""
1 60 30 E E E 1 E 1 E N "schwarz" E N "_Transparent" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 12 388 36
0 2 0 "0s" 0 0 0 64 0 0  12 12 1
2
LANG:1 26 Arial,-1,19,5,40,0,0,0,0,0
LANG:0 70 -microsoft windows-arial-medium-r-normal-*-*-160-100-100-*-*-iso8859-1
0 2
LANG:1 41 ELMB PSU Crate Operation Panel for Crate:
LANG:0 11 DP-Funktion
2 11
"lblCrate"
""
1 390 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 392 12 668 38
0 2 0 "0s" 0 0 0 64 0 0  392 12 1
1
LANG:1 26 Arial,-1,19,5,69,0,0,0,0,0
0 1
LANG:1 0 
26 1
"cmdCalibration"
""
1 10 540 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  8 538 102 567
 0 1
LANG:1 11 Calibration
"" 0 0 0 0 0
 2 0 1
LANG:1 3 CAN
"cmdCAN" 0 0 0 0 0
 2 1 1
LANG:1 8 Currents
"cmdCANCurrents" 0 0 0 0 0
 1 1
LANG:1 8 Voltages
"cmdCANVoltages" 0 0 0 0 0
 0 1
LANG:1 18 Analog and Digital
"cmdAD" 0 0 0 0 0
 2 1 1
LANG:1 8 Currents
"cmdADCurrents" 0 0 0 0 0
 1 1
LANG:1 8 Voltages
"cmdADVoltages" 0 0 0 0 0
 E "main(string id)
{
// Local Variables
// ---------------
	bool bDisplay = true;
	
	dyn_string dsParameters;

// Executable Code
// ---------------
	if (id == \"cmdCANCurrents\") {
		dsParameters = makeDynString(\"$sDpName:\" + $sDpName, \"$sPower:CAN\", \"$sIorV:current\");
	} else if (id == \"cmdCANVoltages\") {
		dsParameters = makeDynString(\"$sDpName:\" + $sDpName, \"$sPower:CAN\", \"$sIorV:volts\");
	} else if (id == \"cmdADCurrents\") {
		dsParameters = makeDynString(\"$sDpName:\" + $sDpName, \"$sPower:AD\", \"$sIorV:current\");
	} else if (id == \"cmdADVoltages\") {
		dsParameters = makeDynString(\"$sDpName:\" + $sDpName, \"$sPower:AD\", \"$sIorV:volts\");
	} else {
		bDisplay = false;
	}
	
	if (bDisplay) {
		ChildPanelOnCentral(\"fwElmbPSU/objects/fwElmbPSUBranchCalibrationRef.pnl\",
												\"Crate Calibration\",
												dsParameters);
	}
														
	// Return to calling routine
	return;
}" 0
0 
26 2
"cmdSwitchAll"
""
1 110 540 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  108 538 202 567
 0 1
LANG:1 10 Switch All
"" 0 0 0 0 0
 2 1 1
LANG:1 2 On
"cmdAllOn" 0 0 0 0 0
 1 1
LANG:1 3 Off
"cmdAllOff" 0 0 0 0 0
 E "main(string id)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
  // Check whether to switch all on or off
  if (id == \"cmdAllOn\")
    fwElmbPSU_switchPower($sDpName);
  else
    fwElmbPSU_switchPower($sDpName, false);
														
  // Return to calling routine
  return;
}" 0
0 
26 3
"cmdDetailFormat"
""
1 210 540 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  208 538 302 567
 0 1
LANG:1 7 Details
"" 0 0 0 0 0
 2 0 1
LANG:1 3 CAN
"cmdCAN" 0 0 0 0 0
 3 1 1
LANG:1 22 Show Currents/Voltages
"cmdShowCANIV" 0 0 0 0 0
 1 1
LANG:1 22 Hide Currents/Voltages
"cmdHideCANIV" 0 0 0 0 0
 0 1
LANG:1 22 Display Currents as...
"cmdDisplayCANCurrents" 0 0 0 0 0
 2 1 1
LANG:1 4 Amps
"cmdDisplayCANAmps" 0 0 0 0 0
 1 1
LANG:1 9 milliAmps
"cmdDisplayCANmilliAmps" 0 0 0 0 0
 0 1
LANG:1 18 Analog and Digital
"cmdAD" 0 0 0 0 0
 3 1 1
LANG:1 22 Show Currents/Voltages
"cmdShowADIV" 0 0 0 0 0
 1 1
LANG:1 22 Hide Currents/Voltages
"cmdHideADIV" 0 0 0 0 0
 0 1
LANG:1 22 Display Currents as...
"cmdDisplayADCurrents" 0 0 0 0 0
 2 1 1
LANG:1 4 Amps
"cmdDisplayADAmps" 0 0 0 0 0
 1 1
LANG:1 9 milliAmps
"cmdDisplayADmilliAmps" 0 0 0 0 0
 E "main(string id)
{
// Local Variables
// ---------------
	bool bSet;
	
	int i;
	int iFormat;
	int iNewFormat;
	
	string sPower;
	
	dyn_string dsBranches;

// Executable Code
// ---------------
	// Get all branches
	dsBranches = dpNames($sDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", EPSU_BRANCH_DPT_NAME);

	// Check what to do
	if (id == \"cmdShowCANIV\") {
		sPower = \"CAN\";
		bSet = true;
		iNewFormat = EPSU_SHOW_VALUES;
	} else if (id == \"cmdHideCANIV\") {
		sPower = \"CAN\";
		bSet = false;
		iNewFormat = ~EPSU_SHOW_VALUES;
	} else if (id == \"cmdDisplayCANAmps\") {
		sPower = \"CAN\";
		bSet = false;
		iNewFormat = ~EPSU_SHOW_MILLIAMPS;
	} else if (id == \"cmdDisplayCANmilliAmps\") {
		sPower = \"CAN\";
		bSet = true;
		iNewFormat = EPSU_SHOW_MILLIAMPS;
	} else if (id == \"cmdShowADIV\") {
		sPower = \"AD\";
		bSet = true;
		iNewFormat = EPSU_SHOW_VALUES;
	} else if (id == \"cmdHideADIV\") {
		sPower = \"AD\";
		bSet = false;
		iNewFormat = ~EPSU_SHOW_VALUES;
	} else if (id == \"cmdDisplayADAmps\") {
		sPower = \"AD\";
		bSet = false;
		iNewFormat = ~EPSU_SHOW_MILLIAMPS;
	} else if (id == \"cmdDisplayADmilliAmps\") {
		sPower = \"AD\";
		bSet = true;
		iNewFormat = EPSU_SHOW_MILLIAMPS;
	}
		
	// Loop through all branches and action whatever was requested
	if (bSet) {
		for (i = 1; i <= dynlen(dsBranches); i++) {
			dpGet(dsBranches[i] + \".\" + sPower + \".showValues\", iFormat);
			iFormat |= iNewFormat;
			dpSet(dsBranches[i] + \".\" + sPower + \".showValues\", iFormat);
		}
	} else {
		for (i = 1; i <= dynlen(dsBranches); i++) {
			dpGet(dsBranches[i] + \".\" + sPower + \".showValues\", iFormat);
			iFormat &= iNewFormat;
			dpSet(dsBranches[i] + \".\" + sPower + \".showValues\", iFormat);
		}
	}

	// Return to calling routine
	return;
}" 0
0 
13 4
"cmdClose"
""
1 846 540 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  844 538 938 567

T 
1
LANG:1 5 Close
"main()
{
	PanelOff();
}" 0
 E E E
1 17 0 "" 0
0
13 10
"cmdReadPowerSettings"
""
1 310 540 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  308 538 402 567

T 
1
LANG:1 11 Read Power 
"main()
{
  pnlReadPower();
  return;
}" 0
 E E E
2 14
"lblCrateIs"
""
1 470 540 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 470 540 529 559
0 2 2 "0s" 0 0 0 64 0 0  470 540 1
1
LANG:1 26 Arial,-1,16,5,50,0,0,0,0,0
0 1
LANG:1 9 Crate is:
2 16
"lblCrateState"
""
1 530 540 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  string sSystem;
  string sElmb;
  dpGet($sDpName + \".node\", sElmb);
  sSystem = dpSubStr($sDpName, DPSUB_SYS);
  dpConnect(\"cbkCrateState\", sSystem + sElmb + \".state.noToggle\");
}

void cbkCrateState(string sDpe, unsigned uValue)
{
  if (uValue == 0x05) {
    this.text = \"Operational\";
  } else if (uValue == 0x04) {
    this.text = \"Stopped\";
  } else if (uValue == 0x7f) {
    this.text = \"Pre-operational\";
  } else if (uValue == 0x01) {
    this.text = \"DISCONNECTED\";
  } else {
    this.text = \"In an UNKNOWN state\";
  }
}" 0
 E 0 1 1 2 1 E U  1 E 530 540 830 570
0 2 2 "0s" 0 0 0 64 0 0  530 540 1
1
LANG:1 26 Arial,-1,16,5,50,0,0,0,0,0
0 1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group2" -1
"objects\\fwGeneral\\fwHelpButton.pnl" 394 10 T 4 1 0 1 516 0
1
"$sPanelRelativePath""fwElmbPSU/fwElmbPSUCrateDisplay"
0
