V 10
1
LANG:1 8 (NoName)
PANEL,346 228 489 473 N "_3DFace" 0
EEE E E 1 -1 -1 0  10 11
"" 0 1
E"
void pnlUpdateCANBuses(string sCANbus = \"\")
{
// Local Variables
// ---------------
	int iSelection;
	int iCount;
	int iFilter;
	int iPos = 0;
	
	dyn_string dsBuses;
	dyn_string dsExceptionInfo;

// Executable Code
// ---------------
	// Check which filtering to apply
	iSelection = radBusFilter.number;

	switch (iSelection) {
		case 1:
			iFilter = EPSU_FILTER_BUS_HASCRATES;
			break;
		case 2:
			iFilter = EPSU_FILTER_BUS_NOTHASCRATES;
			break;
		default:
			iFilter = EPSU_FILTER_BUS_ALL;
			break;
	}
	
	// Get the specified buses
	iCount = fwElmbPSU_getAvailableBuses(	iFilter,
																				getSystemName(),
																				getSystemName(),
																				dsBuses,
																				dsExceptionInfo,
																				false);
																		
	// Check some Buses were found
	if (iCount > 0) {
		cmbCANBus.items = dsBuses;
		cmbCANBus.enabled = true;
		if (strlen(sCANbus) > 0)
			iPos = dynContains(dsBuses, sCANbus);
			
		if (iPos > 0)
			cmbCANBus.selectedPos = iPos;
		else
			cmbCANBus.selectedPos = 1;
	} else {
		cmbCANBus.deleteAllItems();
		cmbCANBus.enabled = false;
	}
	
	// Update controls showing information for selected bus
	pnlUpdateForCANBus();
		
	// Return to calling routine
	return;
}

void pnlUpdateForELMB()
{
// Local Variables
// ---------------
	int iNodeID;
	
	string sBus;
	string sDpBus;
	string sELMB;
	string sNodeID;
	string sText = \"No ELMB selected\";

// Executable Code
// ---------------
	// Check which (if any) ELMB Node has been selected
	sELMB = cmbElmb.text;
	if (strlen(sELMB) > 0) {
	
		// Get other required information
		sBus = cmbCANBus.selectedText;
		sDpBus = VENDOR_NAME + fwDevice_HIERARCHY_SEPARATOR + sBus;
		
		// Get the node ID
		dpGet(sDpBus + fwDevice_HIERARCHY_SEPARATOR + sELMB + \".id\", sNodeID);
		iNodeID = sNodeID;
		
		// Convert the value to hex, but also show the decimal value
		sprintf(sText, \"0x%02x (%d dec.)\", iNodeID, iNodeID);
		
		// Enable Crate creation controls
		frmCrate.enabled = true;
		lblCrateName.enabled = true;
		txtCrateName.enabled = true;
		lblComment.enabled = true;
		txtComment.enabled = true;
		cmdOK.enabled = true;
		cmdApply.enabled = true;
	} else {
		// Disable Crate creation controls
		frmCrate.enabled = false;
		lblCrateName.enabled = false;
		txtCrateName.enabled = false;
		lblComment.enabled = false;
		txtComment.enabled = false;
		cmdOK.enabled = false;
		cmdApply.enabled = false;
	}
	
	// Display the node ID
	txtNodeID.text = sText;

	// Return to calling routine
	return;
}

void pnlUpdateForCANBus(string sElmb = \"\")
{
// Local Variables
// ---------------
	int iNodeCount;
	int iPos = 0;
	
	string sBus;
	string sDpBus;
	string sBusSpeed = \"No bus selected\";
	string sInterfaceCard = \"No bus selected\";
	string sInterfacePort = \"No bus selected\";
	string sNodeCount = \"No bus selected\";
	
	dyn_string dsChildren;
	dyn_string dsExceptionInfo;

// Executable Code
// ---------------
	// Check which (if any) CAN bus has been selected
	sBus = cmbCANBus.selectedText;
	if (strlen(sBus) > 0) {
		// Create full DP name
		sDpBus = VENDOR_NAME + fwDevice_HIERARCHY_SEPARATOR + sBus;
		
		// Get the required information
		dpGet(sDpBus + \".id\", sInterfaceCard,
					sDpBus + \".interfacePort\", sInterfacePort,
					sDpBus + \".busSpeed\", sBusSpeed);
					
		// Get the available nodes on this bus
		iNodeCount = fwElmbPSU_getAvailableELMBs(sDpBus, dsChildren, dsExceptionInfo, false);
		if (dynlen(dsExceptionInfo) > 0) {
			fwExceptionHandling_display(dsExceptionInfo);
			return;
		}
					
		// Enable required controls for selection or creation of ELMB
		frmELMBNode.enabled = true;
		cmdCreateELMBNode.enabled = true;
		lblElmb.enabled = true;

		if (dynlen(dsChildren) > 0) {
			// Enter list of nodes into correct combo box
			cmbElmb.items = dsChildren;
			cmbElmb.enabled = true;
			if (strlen(sElmb) > 0)
				iPos = dynContains(dsChildren, sElmb);
			if (iPos > 0)
				cmbElmb.selectedPos = iPos;
			else
				cmbElmb.selectedPos = 1;
			lblNodeID.enabled = true;
			txtNodeID.enabled = true;
			sprintf(sNodeCount, \"%d\", iNodeCount);
		} else {
			// Empty the list
			cmbElmb.enabled = false;
			cmbElmb.deleteAllItems();
			cmbElmb.text = \"\";
			lblNodeID.enabled = false;
			txtNodeID.enabled = false;
			sNodeCount = \"None\";
		}
		
	} else {
		// Disable controls for selection or creation of ELMB
		frmELMBNode.enabled = false;
		cmbElmb.enabled = false;
		cmdCreateELMBNode.enabled = false;
		lblElmb.enabled = false;
		cmbElmb.deleteAllItems();
		cmbElmb.text = \"\";
		lblNodeID.enabled = false;
		txtNodeID.enabled = false;
	}
	
	// Display the information
	txtBusSpeed.text = sBusSpeed;
	txtInterfaceCard.text = sInterfaceCard;
	txtInterfacePort.text = sInterfacePort;
	txtNodesOnBus.text = sNodeCount;
	
	pnlUpdateForELMB();

	// Return to calling routine
	return;
}

dyn_string pnlGetChildren(string argsParent)
{
// Local Variables
// ---------------
	int i;
	
	dyn_string dsChildren;
	dyn_string dsTemp;
	dyn_string dsExceptionInfo;
	
// Executable Code
// ---------------
	// Get all children
	fwDevice_getChildren(	argsParent,
												fwDevice_HARDWARE,
												dsChildren,
												dsExceptionInfo);
	
	// Remove all but the last part of the name, so as not to show the hierarchy
	for (i = 1; i <= dynlen(dsChildren); i++) {
		dsTemp = strsplit(dsChildren[i], fwDevice_HIERARCHY_SEPARATOR);
		dsChildren[i] = dsTemp[dynlen(dsTemp)];
	}

	// Return to calling routine
	return (dsChildren);
}

void pnlCreateCrate()
{
// Local Variables
// ---------------
	string sDpCrate = EPSU_VENDOR_NAME + fwDevice_HIERARCHY_SEPARATOR;
	string sDpElmb = VENDOR_NAME + fwDevice_HIERARCHY_SEPARATOR;
	string sBus;
	string sElmb;
	string sCrate;
	string sComment;
	
	dyn_string dsExceptionInfo;

// Executable Code
// ---------------
	// Get the bus, the ELMB and the Crate names
	sBus = cmbCANBus.selectedText;
	sElmb = cmbElmb.selectedText;
	sCrate = txtCrateName.text;
	sComment = txtComment.text;
	
	// Check valid names have been selected
	if ((strlen(sBus) > 0) && (strlen(sElmb) > 0)) {
	
		// Start the progress bar
		fwOpenProgressBar(\"Create PSU Crate\", \"Creating PSU Crate \" + sCrate, 1);
	
		// Create the full DP names
		sDpCrate += sCrate;
		sDpElmb += sBus + fwDevice_HIERARCHY_SEPARATOR + sElmb;
		
		// Call function to create the Crate
		if (fwElmbPSU_createCrate(sDpCrate, sDpElmb, sComment, dsExceptionInfo)) {
			// Stop the progress bar
			fwCloseProgressBar(\"Crate \" + sCrate + \" has been created successfully\");
		} else {
	
			// Stop the progress bar
			fwCloseProgressBar(\"Error(s) occurred while creating crate \" + sCrate);
			
			// Display the error
			fwExceptionHandling_display(dsExceptionInfo);
		}
		
		// Call function to update all necessary information
		pnlUpdateForCANBus();
	}

	// Return to calling routine
	return;
}" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 1
"txtTitle"
""
1 10 11 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
2 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 12 12 303 34
0 2 2 "s" 0 0 0 192 0 0  12 12
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-160-100-100-*-*-iso8859-1|-19,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 31 Create ELMB Power Monitor Crate
30 2
"frmCANBus"
""
1 10 220 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
3 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
E E 0 1 1 0 1 E U  0 E 10 40 480 220
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 7 CAN Bus
30 3
"frmELMBNode"
""
1 10 320 E E E 0 E 1 E N "_3DText" E N "_Transparent" E E
 E E
4 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
E E 0 1 1 0 1 E U  0 E 10 230 480 320
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 9 ELMB Node
2 6
"lblCANBus"
""
1 20 100 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
7 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 102 78 118
0 2 0 "s" 0 0 0 64 0 0  22 102
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 8 CAN bus:
2 7
"lblCANBusInstructions"
""
1 20 60 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
8 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 62 428 88
0 2 0 "s" 0 0 0 64 0 0  22 62
 2
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 77 Select which CAN bus the crate will be connected to. You may create a new CAN
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 66 bus by clicking on the button labeled 'Create New...' if required.
2 8
"lblInterfaceCard"
""
1 20 130 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
9 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 132 138 148
0 2 0 "s" 0 0 0 64 0 0  22 132
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 20 Interface Card Type:
2 9
"lblInterfacePort"
""
1 20 150 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
10 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 152 103 168
0 2 0 "s" 0 0 0 64 0 0  22 152
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 15 Interface Port:
2 10
"lblBusSpeed"
""
1 20 170 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
11 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 172 128 188
0 2 0 "s" 0 0 0 64 0 0  22 172
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 16 Bus Speed (bps):
2 11
"txtInterfaceCard"
""
1 160 130 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 162 132 328 148
0 2 0 "s" 0 0 0 64 0 0  162 132
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
2 12
"txtInterfacePort"
""
1 160 150 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
13 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 162 152 328 168
0 2 0 "s" 0 0 0 64 0 0  162 152
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
2 13
"txtBusSpeed"
""
1 160 170 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
14 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 162 172 328 188
0 2 0 "s" 0 0 0 64 0 0  162 172
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
2 15
"lblElmb"
""
1 20 260 E E E 0 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
16 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 262 94 278
0 2 0 "s" 0 0 0 64 0 0  22 262
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 10 ELMB node:
2 17
"lblNodesOnBus"
""
1 20 190 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
18 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 192 138 208
0 2 0 "s" 0 0 0 64 0 0  22 192
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 23 Available Nodes on Bus:
2 18
"txtNodesOnBus"
""
1 160 190 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
19 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 162 192 328 208
0 2 0 "s" 0 0 0 64 0 0  162 192
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
2 19
"lblNodeID"
""
1 20 290 E E E 0 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
20 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 292 80 310
0 2 0 "s" 0 0 0 64 0 0  22 292
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 8 Node ID:
2 20
"txtNodeID"
""
1 110 290 E E E 0 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
21 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 112 292 228 308
0 2 0 "s" 0 0 0 64 0 0  112 292
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
30 21
"frmCrate"
""
1 10 430 E E E 0 E 1 E N "_3DText" E N "_Transparent" E E
 E E
21 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
E E 0 1 1 0 1 E U  0 E 10 330 480 430
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 11 Power Crate
2 22
"lblCrateName"
""
1 20 360 E E E 0 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
22 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 362 94 378
0 2 0 "s" 0 0 0 64 0 0  22 362
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 11 Crate Name:
2 28
"lblComment"
""
1 20 390 E E E 0 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
28 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 392 88 408
0 2 0 "s" 0 0 0 64 0 0  22 392
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 8 Comment:
2 37
"lblBusFilter"
""
1 340 100 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
36 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 342 102 378 118
0 2 0 "s" 0 0 0 64 0 0  342 102
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 5 Show:
13 4
"cmdCreateCANBus"
""
1 230 100 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
228 98 322 125
T 
1
LANG:1 13 Create New...
"main()
{
// Local Variables
// ---------------
 	dyn_float df;
 	
	dyn_string ds;

// Executable Code
// ---------------
	// Display panel to allow a CAN bus to be created
 	ChildPanelOnCentralModalReturn(	\"fwElmb/fwElmbCANbusCreate.pnl\",
 																	\"Create new CANbus\",
 																	makeDynString(\"$sDpName:\" + VENDOR_NAME),
 																	df, ds);
 																	
 	// Update the CAN buses (which automatically updates other information in the panel)
	if (df[1] > 0) {
		pnlUpdateCANBuses(ds[1]);
	} else {
		pnlUpdateCANBuses();
	}

	// Return to calling routine
	return;
}" 0
 E E E
22 5
"cmbCANBus"
""
1 100 100 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
6 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
98 98 222 125
0
"main()
{
// Local Variables
// ---------------
// None
	
// Executable Code
// ---------------
	// Call function to update all necessary information
	pnlUpdateCANBuses();

	// Return to calling routine
	return;
}" 0

"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Call function to update all necessary information
	pnlUpdateForCANBus();

	// Return to calling routine
	return;
}" 0

E
 0 0
22 14
"cmbElmb"
""
1 100 260 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
15 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
98 258 222 285
0
E
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Call function to update all necessary information
	pnlUpdateForELMB();

	// Return to calling routine
	return;
}" 0

E
 0 0
13 16
"cmdCreateELMBNode"
""
1 230 260 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
17 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
228 258 322 285
T 
1
LANG:1 13 Create New...
"main()
{
// Local Variables
// ---------------
	string sDpName = VENDOR_NAME + fwDevice_HIERARCHY_SEPARATOR;
	string sBus;
	
	dyn_float df;
	
	dyn_string ds;

// Executable Code
// ---------------
	// Get which bus the ELMB should be created on
	sBus = cmbCANBus.selectedText;
	
	// Check a valid name has been selected
	if (strlen(sBus) > 0) {
	
		// Create the full DP name
		sDpName += sBus;
	
		// Display panel to allow an ELMB to be created
	 	ChildPanelOnCentralModalReturn(	\"fwElmb/fwElmbNodeCreate.pnl\",
	 																	\"Create ELMB Node\",
	 																	makeDynString(\"$sDpName:\" + sDpName),
	 																	df, ds);
 																	
	 	// Call function to update all necessary information
		if (df[1] > 0) {
			pnlUpdateForCANBus(ds[1]);
		} else {
			pnlUpdateForCANBus();
		}
	}

	// Return to calling routine
	return;
}" 0
 E E E
14 27
"txtCrateName"
""
1 100 360 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
27 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
98 358 332 385
3 "s" 0 0 0 0 0 0 
E
E
E
14 29
"txtComment"
""
1 100 390 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
29 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
98 388 472 415
3 "s" 0 0 0 0 0 0 
E
E
E
19 36
"radBusFilter"
""
1 340 120 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
35 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
338 118 462 212
3
T 
1
LANG:1 9 All buses
 1
1
LANG:1 0 
 E  E  0 0 0 0 0
T 
1
LANG:1 15 Buses with PSUs
 0
1
LANG:1 0 
 E  E  0 0 0 0 0
T 
1
LANG:1 18 Buses without PSUs
 0
1
LANG:1 0 
 E  E  0 0 0 0 0
 1
E
"main(int button)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Call function to update all necessary information
	pnlUpdateCANBuses();
	
	// Return to calling routine
	return;
}" 0

13 38
"cmdOK"
""
1 250 440 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
37 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
248 438 322 465
T 
1
LANG:1 2 OK
"main()
{
	pnlCreateCrate();
	PanelOff(myPanelName());
}" 0
 E E E
13 39
"cmdApply"
""
1 330 440 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
38 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
328 438 402 465
T 
1
LANG:1 5 Apply
"main()
{
	pnlCreateCrate();
}" 0
 E E E
13 40
"cmdClose"
""
1 410 440 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
39 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
408 438 482 465
T 
1
LANG:1 5 Close
"main()
{
	PanelOff(myPanelName());
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0