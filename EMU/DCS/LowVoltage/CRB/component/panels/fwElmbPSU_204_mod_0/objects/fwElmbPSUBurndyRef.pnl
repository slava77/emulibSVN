V 10
1
LANG:1 8 (NoName)
PANEL,463 299 166 96 N "_3DFace" 1
"$sDpName"
EEE E E 1 -1 -1 0  31 31
"" 0 1
E"/*
bool pnlWaitForValue()
{
// Local Variables
// ---------------
	bool bTimeout;
	bool bActivateAlerts;
	
	unsigned uSyncInterval;
	
	string sCrateName;
	string sNode;
	string sBus;
	string sPowerDpe;
	string sADIDpe;
	
	time tTimeout;
	
	dyn_string dsTemp;
	dyn_string dsDpNamesToWaitFor;
	dyn_string dsDpNamesReturn;
	
	dyn_anytype daConditions;
	dyn_anytype daReturnedValues;

// Executable Code
// ---------------
	// Get the maximum amount of time to wait (which is the sync interval)
	dsTemp = strsplit($sDpName, fwDevice_HIERARCHY_SEPARATOR);
	sCrateName = dsTemp[1] + fwDevice_HIERARCHY_SEPARATOR + dsTemp[2];
	dpGet(sCrateName + \".node\", sNode);
	dsTemp = strsplit(sNode, fwDevice_HIERARCHY_SEPARATOR);
	sBus = dsTemp[1] + fwDevice_HIERARCHY_SEPARATOR + dsTemp[2];
	dpGet(sBus + \".syncInterval\", uSyncInterval);
	
	if (uSyncInterval <= 0) {
		DebugTN(\"Sync interval is invalid, no values will be updated\");
		return (true);
	}
	
	// Set the timeout to a bit bigger than the sync interval
	tTimeout = 1.1 * uSyncInterval / 1000;
	
	// Get the DP values to wait for
	dpGet($sDpName + \".power\", sPowerDpe,
				$sDpName + \".AD.current\", sADIDpe);

	// Set up parameters to wait for the bootup	
	dsDpNamesToWaitFor = makeDynString(sPowerDpe + \":_online.._value\", sADIDpe + \":_online.._value\");
	dsDpNamesReturn = dsDpNamesToWaitFor;
		
	// Wait up to the time limit for the values
	dpWaitForValue(	dsDpNamesToWaitFor,
									daConditions,
									dsDpNamesReturn,
									daReturnedValues,
									tTimeout,
									bTimeout);
									
	// Check whether timeout has expired or a value has changed
	if (bTimeout) {
		DebugTN(\"Timeout expired while waiting for new value for \" + $sDpName);
		bActivateAlerts = true;
	} else {
		// Check whether the power was switched back off
		if (daReturnedValues[1]) {
			DebugTN(\"Power has been switched back off for \" + $sDpName);
			bActivateAlerts = false;
		} else {
			DebugTN(\"Received new values after power on for \" + $sDpName);
			// Give one more second before activating the alerts (to allow all values to update)
			delay(1);
			bActivateAlerts = true;
		}
	}

	// Return to calling routine
	return (bActivateAlerts);
}
*/" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
7 0
"burndyConnector"
""
1 31 31 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 "main()
{
// Local Variables
// ---------------
	int iReturn;
	
	string sPowerDpe;
	string sControlledBus;
	
	dyn_string dsMenu;

// Executable Code
// ---------------
	// Check whether a controlled bus has been assigned
	dpGet($sDpName + \".bus\", sControlledBus);
	
	// Create the dyn_string required for the popup menu
	if (strlen(sControlledBus) > 0) {
		dsMenu = makeDynString(	\"PUSH_BUTTON, Switch ON, 1, 1\",
														\"PUSH_BUTTON, Switch OFF, 2, 1\",
														\"PUSH_BUTTON, Show States, 3, 0\",
														\"CASCADE_BUTTON, Send Command, 1\",
														\"Send Command\",
														\"PUSH_BUTTON, Start, 4, 1\",
														\"PUSH_BUTTON, Stop, 5, 1\",
														\"PUSH_BUTTON, Reset, 6, 1\");
	} else {
		dsMenu = makeDynString(	\"PUSH_BUTTON, Switch ON, 1, 1\",
														\"PUSH_BUTTON, Switch OFF, 2, 1\",
														\"PUSH_BUTTON, Show States, 3, 0\",
														\"CASCADE_BUTTON, Send Command, 1\",
														\"Send Command\",
														\"PUSH_BUTTON, Bus not assigned, 7, 0\");
	}

	// Display the popup menu
	if (popupMenu(dsMenu, iReturn) == 0) {
	
		// Action the required selection
		switch (iReturn) {
			case 1:	// Switch ON power
				fwElmbPSU_switchPower($sDpName);
				break;
			case 2:	// Switch OFF power
				fwElmbPSU_switchPower($sDpName, false, false);
				break;
			case 3:	// Display panel showing the states of each ELMB on the bus
				// ************* NOT YET IMPLEMENTED ******************
				break;
			case 4:	// Send NMT Start command to bus
				dpSet(sControlledBus + \".management\", 1);
				break;
			case 5:	// Send NMT Stop command to bus
				dpSet(sControlledBus + \".management\", 2);
				break;
			case 6:	// Send NMT Reset command to bus
				dpSet(sControlledBus + \".management\", 129);
				break;
		}
	}

	// Return to calling routine
	return;
}" 0
 E
1 0 0 0 0 0
EE E
0
1
LANG:1 31 Right click for control options
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  2 0 3 "pictures/fwElmbPSU_burndy.bmp" 13434828 E 33 32 23 22
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0