<?xml version="1.0"?>

<xsl:transform 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:c="http://cms.cern.ch/emu/afeb/teststand/configuration" 
    version="1.0">

  <xsl:output method="html" indent="yes"/>


  <xsl:template match="//c:configuration">
    <table class="configuration">
      <tr>
	<td><xsl:apply-templates select="c:testedDevice"/></td>
	<td><xsl:apply-templates select="c:crate"/></td>
	<td><xsl:apply-templates select="c:inputs"/></td>
	<td><xsl:apply-templates select="c:measurements"/></td>
      </tr>
    </table>
    <input type="submit" name="config" value="save"/>
    <input type="submit" name="config" value="load"/>
  </xsl:template>

  <!-- xpath to element within the c namespace-->
  <xsl:template name="elementPath">
    <xsl:for-each select="(ancestor-or-self::c:*)"><xsl:variable name="NAME" select="name()"/>/<xsl:value-of select="name()"/>[<xsl:value-of select="1+count(preceding-sibling::c:*[name()=$NAME])"/>]</xsl:for-each>
  </xsl:template>

  <!-- generate options from metadata -->
  <xsl:template name="options">
    <xsl:param name="TAG"/>
    <xsl:param name="ATTR"/>
    <xsl:for-each select="//c:metadata/c:tag[@c:name=$TAG]/c:attr[@c:name=$ATTR]">
      <option title="{@c:description}" value="{@c:value}"><xsl:value-of select="@c:value"/></option>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="c:testedDevice">
    <table class="device">
      <tr>
	<th colspan="2">Tested Device</th>
      </tr>
      <tr>
	<th>type</th>
	<td>
	  <select>
	    <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	    <xsl:call-template name="options">
	      <xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
	      <xsl:with-param name="ATTR">c:type</xsl:with-param>
	    </xsl:call-template>
	  </select>
	</td>
      </tr>
    </table>
  </xsl:template>

  <xsl:template match="c:crate">
    <table class="crate">
      <tr>
	<th colspan="3">Modules in crate</th>
      </tr>
      <tr>
	<th>slot</th>
	<th>name</th>
	<th>type</th>
      </tr>
      <xsl:for-each select="c:module">
	<tr>
	  <th><xsl:value-of select="@c:slot"/></th>
	  <td>
	    <select>
	      <option title="Empty slot." value="">-</option>
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		<xsl:with-param name="ATTR">c:name</xsl:with-param>
	      </xsl:call-template>
	    </select>
	  </td>
	  <td>
	    <select>
	      <option title="Empty slot." value="">-</option>
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		<xsl:with-param name="ATTR">c:type</xsl:with-param>
	      </xsl:call-template>
	    </select>
	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

  <xsl:template match="c:inputs">
    <table class="crate">
      <tr>
	<th colspan="5">Device-to-module mapping</th>
      </tr>
      <tr>
	<th>socket</th>
	<th>device id</th>
	<th>TDC slot</th>
	<th>TDC input</th>
	<th>signal convertet slot</th>
      </tr>
      <xsl:for-each select="c:testedDevice">
	<tr>
	  <th><xsl:value-of select="@c:socket"/></th>
	  <td>
	    <input type="text" title="The unique id of this device.">
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:attribute name="value"><xsl:value-of select="format-number(@c:socket,'00')"/></xsl:attribute>
	    </input>
	  </td>
	  <td>
	    <select>
	      <option title="Empty socket." value="">-</option>
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		<xsl:with-param name="ATTR">c:tdcSlot</xsl:with-param>
	      </xsl:call-template>
	    </select>
	  </td>
	  <td>
	    <select>
	      <option title="Empty socket." value="">-</option>
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		<xsl:with-param name="ATTR">c:tdcInput</xsl:with-param>
	      </xsl:call-template>
	    </select>
	  </td>
	  <td>
	    <select>
	      <option title="Empty socket." value="">-</option>
	      <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		<xsl:with-param name="ATTR">c:signalConverterSlot</xsl:with-param>
	      </xsl:call-template>
	    </select>
	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

  <xsl:template match="c:measurements">
    <table class="measurements">
      <tr>
	<th colspan="5">Measurements</th>
      </tr>
      <xsl:for-each select="c:measurement">
	<tr>
	  <td>

	    <table class="measurement">
	      <tr>
		<th>selected</th><th>type</th><th>name</th>
	      </tr>
	      <tr>
		<td>
		  <input type="checkbox" title="Check if this measurement is to be performed.">
		    <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
		    <xsl:if test="@c:enabled='1'">
		      <xsl:attribute name="checked">checked</xsl:attribute>
		    </xsl:if>
		  </input>
		</td>
		<td>
		  <select>
		    <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
		    <xsl:call-template name="options">
		      <xsl:with-param name="TAG"><xsl:value-of select="name()"/></xsl:with-param>
		      <xsl:with-param name="ATTR">c:type</xsl:with-param>
		    </xsl:call-template>
		  </select>
		</td>
	      <td>
		<input type="text" title="The name of this measurement.">
		  <xsl:attribute name="name"><xsl:call-template name="elementPath"/></xsl:attribute>
		  <xsl:attribute name="value"><xsl:value-of select="@c:name"/></xsl:attribute>
		</input>
	      </td>
	      </tr>
	    </table>

	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

</xsl:transform>
