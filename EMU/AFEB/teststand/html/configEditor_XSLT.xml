<?xml version="1.0"?>

<xsl:transform 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:c="http://cms.cern.ch/emu/afeb/teststand/configuration" 
    version="1.0">

  <xsl:output method="html" indent="yes"/>


  <xsl:template match="//c:configuration">
    <p>
      <input type="submit" name="config" value="save" class="submit" title="Save this configuration."/> as 
      <!-- for-each: just to set the current node for the templates called by name: -->
      <xsl:for-each select="@c:name">
	<input type="text" title="The name of this configuration." size="20">
	  <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
	  <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
	</input>
      </xsl:for-each>
      <div style="float: right;">Saved at <xsl:value-of select="@c:dateTime"/></div>
    </p>
    <table class="layout">
      <tr>
	<td><xsl:apply-templates select="c:measurements"/></td>
	<td><xsl:apply-templates select="c:testedDevice"/></td>
	<td><xsl:apply-templates select="c:crate"/></td>
	<td><xsl:apply-templates select="c:inputs"/></td>
      </tr>
    </table>
  </xsl:template>

  <!-- xpath to element within the c namespace-->
  <xsl:template name="elementXPath">
    <xsl:for-each select="(ancestor-or-self::c:*)"><xsl:variable name="NAME" select="name()"/>/<xsl:value-of select="name()"/>[<xsl:value-of select="1+count(preceding-sibling::c:*[name()=$NAME])"/>]</xsl:for-each>
  </xsl:template>

  <!-- xpath to attribute within the c namespace-->
  <xsl:template name="attributeXPath">    
    <xsl:for-each select="ancestor::c:*"><xsl:variable name="NAME" select="name()"/>/<xsl:value-of select="name()"/>[<xsl:value-of select="1+count(preceding-sibling::c:*[name()=$NAME])"/>]</xsl:for-each>/@<xsl:value-of select="name()"/>
  </xsl:template>

  <!-- generate options from metadata -->
  <xsl:template name="options">
    <xsl:param name="TAG"/>
    <xsl:param name="ATTR"/>
    <xsl:param name="SELVAL"/>
    <xsl:for-each select="//c:metadata/c:tag[@c:name=$TAG]/c:attr[@c:name=$ATTR]">
      <option title="{@c:description}" value="{@c:value}">
	<xsl:if test="@c:value=$SELVAL"><xsl:attribute name="selected">selected</xsl:attribute></xsl:if>
	<xsl:value-of select="@c:value"/>
      </option>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="c:testedDevice">
    <table class="device">
      <tr>
	<th colspan="2">Tested device</th>
      </tr>
      <tr>
	<th>type</th>
	<td>
	  <!-- for-each: just to set the current node for the templates called by name: -->
	  <xsl:for-each select="@c:type">
	    <select>
	      <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG" select="name(..)"/>
		<xsl:with-param name="ATTR" select="name()"/>
		<xsl:with-param name="SELVAL" select="."/>
	      </xsl:call-template>
	    </select>
	  </xsl:for-each>
	</td>
      </tr>
    </table>
  </xsl:template>

  <xsl:template match="c:crate">
    <table class="crate">
      <tr>
	<th colspan="3">Modules in crate number
	  <!-- for-each: just to set the current node for the templates called by name: -->
	  <xsl:for-each select="@c:number">
	    <select>
	      <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
	      <xsl:call-template name="options">
		<xsl:with-param name="TAG" select="name(..)"/>
		<xsl:with-param name="ATTR" select="name()"/>
		<xsl:with-param name="SELVAL" select="."/>
	      </xsl:call-template>
	    </select>
	  </xsl:for-each>
	</th>
      </tr>
      <tr>
	<th>slot</th>
	<th>name</th>
	<th>type</th>
      </tr>
      <xsl:for-each select="c:module">
	<tr>
	  <th><xsl:value-of select="@c:slot"/></th>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:name">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<option title="Empty slot." value="">-</option>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </td>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:type">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<option title="Empty slot." value="">-</option>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

  <xsl:template match="c:inputs">
    <table class="crate">
      <tr>
	<th colspan="5">Device-to-module mapping</th>
      </tr>
      <tr>
	<th>socket</th>
	<th>device id</th>
	<th>TDC slot</th>
	<th>TDC input</th>
	<th>signal convertet slot</th>
      </tr>
      <xsl:for-each select="c:testedDevice">
	<tr>
	  <th><xsl:value-of select="@c:socket"/></th>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:id">
	      <input type="text" title="The unique id of this device." size="10">
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
	      </input>
	    </xsl:for-each>
	  </td>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:tdcSlot">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<option title="Empty socket." value="">-</option>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </td>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:tdcInput">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<option title="Empty socket." value="">-</option>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </td>
	  <td>
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:signalConverterSlot">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<option title="Empty socket." value="">-</option>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

  <xsl:template match="c:measurements">
    <table class="measurements">
      <tr>
	<th colspan="5">Measurements</th>
      </tr>
      <xsl:for-each select="c:measurement">
	<tr>
	  <th>
	    select
	    <!-- for-each: just to set the current node for the templates called by name: -->
	    <xsl:for-each select="@c:enabled">
	      <select>
		<xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
		<xsl:call-template name="options">
		  <xsl:with-param name="TAG" select="name(..)"/>
		  <xsl:with-param name="ATTR" select="name()"/>
		  <xsl:with-param name="SELVAL" select="."/>
		</xsl:call-template>
	      </select>
	    </xsl:for-each>
	  </th>
	  <td>

	    <table class="layout">
	      <tr>
		<td>

		  <table class="layout">
		    <tr>
		      <th>type</th><th>name</th>
		    </tr>
		    <tr>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="@c:type">
			  <select>
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:call-template name="options">
			      <xsl:with-param name="TAG" select="name(..)"/>
			      <xsl:with-param name="ATTR" select="name()"/>
			      <xsl:with-param name="SELVAL" select="."/>
			    </xsl:call-template>
			  </select>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="@c:name">
			  <input type="text" title="The name of this measurement.">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		    </tr>
		  </table>

		</td>
	      </tr>
	      <tr>
		<td>

		  <table class="layout">
		    <tr><th rowspan="2">Pulse Generator</th><th>slot</th><th>min</th><th>max</th><th>step</th><th>N</th></tr>
		    <tr>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:PulseGenerator/@c:slot">
			  <select>
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:call-template name="options">
			      <xsl:with-param name="TAG" select="name(..)"/>
			      <xsl:with-param name="ATTR" select="name()"/>
			      <xsl:with-param name="SELVAL" select="."/>
			    </xsl:call-template>
			  </select>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:PulseGenerator/@c:amplitudeMin">
			  <input type="text" title="The lowest pulse amplitude." size="3">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:PulseGenerator/@c:amplitudeMax">
			  <input type="text" title="The highest pulse amplitude." size="3">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:PulseGenerator/@c:amplitudeStep">
			  <input type="text" title="The pulse amplitude increment." size="3">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:PulseGenerator/@c:nPulses">
			  <input type="text" title="The number of pulses at each amplitude." size="4">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		    </tr>
		  </table>

		</td>
	      </tr>
	      <tr>
		<td>

		  <table class="layout">
		    <tr><th rowspan="2">Signal Converter</th><th>threshold value</th></tr>
		    <tr>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:SignalConverter/@c:thresholdValue">
			  <input type="text" title="The threshold value." size="4">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		    </tr>
		  </table>

		</td>
	      </tr>
	      <tr>
		<td>

		  <table class="layout">
		    <tr><th rowspan="2">TDC</th><th>minimum time</th><th>maximum time</th></tr>
		    <tr>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:TDC/@c:timeMin">
			  <input type="text" title="The minimum TDC time recoreded." size="4">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		      <td>
			<!-- for-each: just to set the current node for the templates called by name: -->
			<xsl:for-each select="c:TDC/@c:timeMax">
			  <input type="text" title="The maximum TDC time recoreded." size="4">
			    <xsl:attribute name="name"><xsl:call-template name="attributeXPath"/></xsl:attribute>
			    <xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
			  </input>
			</xsl:for-each>
		      </td>
		    </tr>
		  </table>

		</td>
	      </tr>

	    </table>

	  </td>
	</tr>
      </xsl:for-each>
    </table>
  </xsl:template>

</xsl:transform>
