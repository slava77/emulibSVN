//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v3.0-03/04/2009 09:20 AM(valikov)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.03.05 at 07:17:06 PM CET 
//


package org.cern.cms.csc.dw.model.fact;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for DqmCscFactType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DqmCscFactType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.cern.ch/cms/csc/dw/model}factType">
 *       &lt;sequence>
 *         &lt;element name="online" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT1" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT1_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT10" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT10_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT11" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT11_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT12" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT12_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT13" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT13_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT14" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT14_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT15" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT15_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT16" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT16_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT17" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT17_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT18" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT18_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT19" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT19_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT2" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT2_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT3" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT3_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT4" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT4_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT5" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT5_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT6" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT6_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT7" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT7_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT8" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT8_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT9" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_FORMAT_ERRORS_BIT9_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_HOT_CHAMBER" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_HOT_CHAMBER_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_LOW_EFF_CHAMBER" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_LOW_EFF_CHAMBER_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_BWORDS" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_BWORDS_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_FORMAT_ERRORS" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_FORMAT_ERRORS_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_INPUT_FIFO_FULL" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_INPUT_FIFO_FULL_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_INPUT_TIMEOUT" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_INPUT_TIMEOUT_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_L1A_OUT_OF_SYNC" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITH_L1A_OUT_OF_SYNC_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_ALCT" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_ALCT_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_CFEB" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_CFEB_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_CLCT" type="{http://www.w3.org/2001/XMLSchema}long" minOccurs="0"/>
 *         &lt;element name="CSC_WITHOUT_CLCT_F" type="{http://www.w3.org/2001/XMLSchema}float" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DqmCscFactType", propOrder = {
    "online",
    "formatErrorDmbTrailerMissing",
    "formatErrorDmbTrailerMissingFraction",
    "formatErrorTmbWordCountError",
    "formatErrorTmbWordCountErrorFraction",
    "formatErrorTmbCrcError",
    "formatErrorTmbCrcErrorFraction",
    "formatErrorCfebWordCountPerSampleError",
    "formatErrorCfebWordCountPerSampleErrorFraction",
    "formatErrorCfebSampleCountError",
    "formatErrorCfebSampleCountErrorFraction",
    "formatErrorCfebCrcError",
    "formatErrorCfebCrcErrorFraction",
    "formatErrorDduEventSizeLimitError",
    "formatErrorDduEventSizeLimitErrorFraction",
    "formatErrorCWords",
    "formatErrorCWordsFraction",
    "formatErrorAlctDavError",
    "formatErrorAlctDavErrorFraction",
    "formatErrorTmbDavError",
    "formatErrorTmbDavErrorFraction",
    "formatErrorCfebDavError",
    "formatErrorCfebDavErrorFraction",
    "formatErrorDmbHeaderMissing",
    "formatErrorDmbHeaderMissingFraction",
    "formatErrorAlctTrailerMissing",
    "formatErrorAlctTrailerMissingFraction",
    "formatErrorAlctHeaderMissing",
    "formatErrorAlctHeaderMissingFraction",
    "formatErrorAlctWordCountError",
    "formatErrorAlctWordCountErrorFraction",
    "formatErrorAlctCrcError",
    "formatErrorAlctCrcErrorFraction",
    "formatErrorAlctTrailerBitError",
    "formatErrorAlctTrailerBitErrorFraction",
    "formatErrorTmbTrailerMissing",
    "formatErrorTmbTrailerMissingFraction",
    "formatErrorTmbHeaderMissing",
    "formatErrorTmbHeaderMissingFraction",
    "hotChamber",
    "hotChamberFraction",
    "lowEfficiencyChamber",
    "lowEfficiencyChamberFraction",
    "withBwords",
    "withBwordsFraction",
    "withFormatErrors",
    "withFormatErrorsFraction",
    "withInputFifoFull",
    "withInputFifoFullFraction",
    "withInputTimeout",
    "withInputTimeoutFraction",
    "withL1AOutOfSync",
    "withL1AOutOfSyncFraction",
    "withoutAlct",
    "withoutAlctFraction",
    "withoutCfeb",
    "withoutCfebFraction",
    "withoutClct",
    "withoutClctFraction"
})
@Entity(name = "org.cern.cms.csc.dw.model.fact.DqmCscFact")
@Table(name = "CDW_DQM_CSC_FACTS")
public class DqmCscFact
    extends Fact
    implements Serializable, Equals, HashCode, ToString
{

    protected boolean online;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT1")
    protected Long formatErrorDmbTrailerMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT1_F")
    protected Float formatErrorDmbTrailerMissingFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT10")
    protected Long formatErrorTmbWordCountError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT10_F")
    protected Float formatErrorTmbWordCountErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT11")
    protected Long formatErrorTmbCrcError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT11_F")
    protected Float formatErrorTmbCrcErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT12")
    protected Long formatErrorCfebWordCountPerSampleError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT12_F")
    protected Float formatErrorCfebWordCountPerSampleErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT13")
    protected Long formatErrorCfebSampleCountError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT13_F")
    protected Float formatErrorCfebSampleCountErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT14")
    protected Long formatErrorCfebCrcError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT14_F")
    protected Float formatErrorCfebCrcErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT15")
    protected Long formatErrorDduEventSizeLimitError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT15_F")
    protected Float formatErrorDduEventSizeLimitErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT16")
    protected Long formatErrorCWords;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT16_F")
    protected Float formatErrorCWordsFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT17")
    protected Long formatErrorAlctDavError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT17_F")
    protected Float formatErrorAlctDavErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT18")
    protected Long formatErrorTmbDavError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT18_F")
    protected Float formatErrorTmbDavErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT19")
    protected Long formatErrorCfebDavError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT19_F")
    protected Float formatErrorCfebDavErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT2")
    protected Long formatErrorDmbHeaderMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT2_F")
    protected Float formatErrorDmbHeaderMissingFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT3")
    protected Long formatErrorAlctTrailerMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT3_F")
    protected Float formatErrorAlctTrailerMissingFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT4")
    protected Long formatErrorAlctHeaderMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT4_F")
    protected Float formatErrorAlctHeaderMissingFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT5")
    protected Long formatErrorAlctWordCountError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT5_F")
    protected Float formatErrorAlctWordCountErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT6")
    protected Long formatErrorAlctCrcError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT6_F")
    protected Float formatErrorAlctCrcErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT7")
    protected Long formatErrorAlctTrailerBitError;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT7_F")
    protected Float formatErrorAlctTrailerBitErrorFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT8")
    protected Long formatErrorTmbTrailerMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT8_F")
    protected Float formatErrorTmbTrailerMissingFraction;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT9")
    protected Long formatErrorTmbHeaderMissing;
    @XmlElement(name = "CSC_FORMAT_ERRORS_BIT9_F")
    protected Float formatErrorTmbHeaderMissingFraction;
    @XmlElement(name = "CSC_HOT_CHAMBER")
    protected Long hotChamber;
    @XmlElement(name = "CSC_HOT_CHAMBER_F")
    protected Float hotChamberFraction;
    @XmlElement(name = "CSC_LOW_EFF_CHAMBER")
    protected Long lowEfficiencyChamber;
    @XmlElement(name = "CSC_LOW_EFF_CHAMBER_F")
    protected Float lowEfficiencyChamberFraction;
    @XmlElement(name = "CSC_WITH_BWORDS")
    protected Long withBwords;
    @XmlElement(name = "CSC_WITH_BWORDS_F")
    protected Float withBwordsFraction;
    @XmlElement(name = "CSC_WITH_FORMAT_ERRORS")
    protected Long withFormatErrors;
    @XmlElement(name = "CSC_WITH_FORMAT_ERRORS_F")
    protected Float withFormatErrorsFraction;
    @XmlElement(name = "CSC_WITH_INPUT_FIFO_FULL")
    protected Long withInputFifoFull;
    @XmlElement(name = "CSC_WITH_INPUT_FIFO_FULL_F")
    protected Float withInputFifoFullFraction;
    @XmlElement(name = "CSC_WITH_INPUT_TIMEOUT")
    protected Long withInputTimeout;
    @XmlElement(name = "CSC_WITH_INPUT_TIMEOUT_F")
    protected Float withInputTimeoutFraction;
    @XmlElement(name = "CSC_WITH_L1A_OUT_OF_SYNC")
    protected Long withL1AOutOfSync;
    @XmlElement(name = "CSC_WITH_L1A_OUT_OF_SYNC_F")
    protected Float withL1AOutOfSyncFraction;
    @XmlElement(name = "CSC_WITHOUT_ALCT")
    protected Long withoutAlct;
    @XmlElement(name = "CSC_WITHOUT_ALCT_F")
    protected Float withoutAlctFraction;
    @XmlElement(name = "CSC_WITHOUT_CFEB")
    protected Long withoutCfeb;
    @XmlElement(name = "CSC_WITHOUT_CFEB_F")
    protected Float withoutCfebFraction;
    @XmlElement(name = "CSC_WITHOUT_CLCT")
    protected Long withoutClct;
    @XmlElement(name = "CSC_WITHOUT_CLCT_F")
    protected Float withoutClctFraction;

    /**
     * Gets the value of the online property.
     * 
     */
    @Basic
    @Column(name = "FCT_ONLINE")
    public boolean isOnline() {
        return online;
    }

    /**
     * Sets the value of the online property.
     * 
     */
    public void setOnline(boolean value) {
        this.online = value;
    }

    @Transient
    public boolean isSetOnline() {
        return true;
    }

    /**
     * Gets the value of the formatErrorDmbTrailerMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT1", precision = 20, scale = 10)
    public Long getFormatErrorDmbTrailerMissing() {
        return formatErrorDmbTrailerMissing;
    }

    /**
     * Sets the value of the formatErrorDmbTrailerMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorDmbTrailerMissing(Long value) {
        this.formatErrorDmbTrailerMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorDmbTrailerMissing() {
        return (this.formatErrorDmbTrailerMissing!= null);
    }

    /**
     * Gets the value of the formatErrorDmbTrailerMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT1_F", precision = 20, scale = 10)
    public Float getFormatErrorDmbTrailerMissingFraction() {
        return formatErrorDmbTrailerMissingFraction;
    }

    /**
     * Sets the value of the formatErrorDmbTrailerMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorDmbTrailerMissingFraction(Float value) {
        this.formatErrorDmbTrailerMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorDmbTrailerMissingFraction() {
        return (this.formatErrorDmbTrailerMissingFraction!= null);
    }

    /**
     * Gets the value of the formatErrorTmbWordCountError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT10", precision = 20, scale = 10)
    public Long getFormatErrorTmbWordCountError() {
        return formatErrorTmbWordCountError;
    }

    /**
     * Sets the value of the formatErrorTmbWordCountError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorTmbWordCountError(Long value) {
        this.formatErrorTmbWordCountError = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbWordCountError() {
        return (this.formatErrorTmbWordCountError!= null);
    }

    /**
     * Gets the value of the formatErrorTmbWordCountErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT10_F", precision = 20, scale = 10)
    public Float getFormatErrorTmbWordCountErrorFraction() {
        return formatErrorTmbWordCountErrorFraction;
    }

    /**
     * Sets the value of the formatErrorTmbWordCountErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorTmbWordCountErrorFraction(Float value) {
        this.formatErrorTmbWordCountErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbWordCountErrorFraction() {
        return (this.formatErrorTmbWordCountErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorTmbCrcError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT11", precision = 20, scale = 10)
    public Long getFormatErrorTmbCrcError() {
        return formatErrorTmbCrcError;
    }

    /**
     * Sets the value of the formatErrorTmbCrcError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorTmbCrcError(Long value) {
        this.formatErrorTmbCrcError = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbCrcError() {
        return (this.formatErrorTmbCrcError!= null);
    }

    /**
     * Gets the value of the formatErrorTmbCrcErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT11_F", precision = 20, scale = 10)
    public Float getFormatErrorTmbCrcErrorFraction() {
        return formatErrorTmbCrcErrorFraction;
    }

    /**
     * Sets the value of the formatErrorTmbCrcErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorTmbCrcErrorFraction(Float value) {
        this.formatErrorTmbCrcErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbCrcErrorFraction() {
        return (this.formatErrorTmbCrcErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorCfebWordCountPerSampleError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT12", precision = 20, scale = 10)
    public Long getFormatErrorCfebWordCountPerSampleError() {
        return formatErrorCfebWordCountPerSampleError;
    }

    /**
     * Sets the value of the formatErrorCfebWordCountPerSampleError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorCfebWordCountPerSampleError(Long value) {
        this.formatErrorCfebWordCountPerSampleError = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebWordCountPerSampleError() {
        return (this.formatErrorCfebWordCountPerSampleError!= null);
    }

    /**
     * Gets the value of the formatErrorCfebWordCountPerSampleErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT12_F", precision = 20, scale = 10)
    public Float getFormatErrorCfebWordCountPerSampleErrorFraction() {
        return formatErrorCfebWordCountPerSampleErrorFraction;
    }

    /**
     * Sets the value of the formatErrorCfebWordCountPerSampleErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorCfebWordCountPerSampleErrorFraction(Float value) {
        this.formatErrorCfebWordCountPerSampleErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebWordCountPerSampleErrorFraction() {
        return (this.formatErrorCfebWordCountPerSampleErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorCfebSampleCountError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT13", precision = 20, scale = 10)
    public Long getFormatErrorCfebSampleCountError() {
        return formatErrorCfebSampleCountError;
    }

    /**
     * Sets the value of the formatErrorCfebSampleCountError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorCfebSampleCountError(Long value) {
        this.formatErrorCfebSampleCountError = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebSampleCountError() {
        return (this.formatErrorCfebSampleCountError!= null);
    }

    /**
     * Gets the value of the formatErrorCfebSampleCountErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT13_F", precision = 20, scale = 10)
    public Float getFormatErrorCfebSampleCountErrorFraction() {
        return formatErrorCfebSampleCountErrorFraction;
    }

    /**
     * Sets the value of the formatErrorCfebSampleCountErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorCfebSampleCountErrorFraction(Float value) {
        this.formatErrorCfebSampleCountErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebSampleCountErrorFraction() {
        return (this.formatErrorCfebSampleCountErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorCfebCrcError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT14", precision = 20, scale = 10)
    public Long getFormatErrorCfebCrcError() {
        return formatErrorCfebCrcError;
    }

    /**
     * Sets the value of the formatErrorCfebCrcError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorCfebCrcError(Long value) {
        this.formatErrorCfebCrcError = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebCrcError() {
        return (this.formatErrorCfebCrcError!= null);
    }

    /**
     * Gets the value of the formatErrorCfebCrcErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT14_F", precision = 20, scale = 10)
    public Float getFormatErrorCfebCrcErrorFraction() {
        return formatErrorCfebCrcErrorFraction;
    }

    /**
     * Sets the value of the formatErrorCfebCrcErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorCfebCrcErrorFraction(Float value) {
        this.formatErrorCfebCrcErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebCrcErrorFraction() {
        return (this.formatErrorCfebCrcErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorDduEventSizeLimitError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT15", precision = 20, scale = 10)
    public Long getFormatErrorDduEventSizeLimitError() {
        return formatErrorDduEventSizeLimitError;
    }

    /**
     * Sets the value of the formatErrorDduEventSizeLimitError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorDduEventSizeLimitError(Long value) {
        this.formatErrorDduEventSizeLimitError = value;
    }

    @Transient
    public boolean isSetFormatErrorDduEventSizeLimitError() {
        return (this.formatErrorDduEventSizeLimitError!= null);
    }

    /**
     * Gets the value of the formatErrorDduEventSizeLimitErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT15_F", precision = 20, scale = 10)
    public Float getFormatErrorDduEventSizeLimitErrorFraction() {
        return formatErrorDduEventSizeLimitErrorFraction;
    }

    /**
     * Sets the value of the formatErrorDduEventSizeLimitErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorDduEventSizeLimitErrorFraction(Float value) {
        this.formatErrorDduEventSizeLimitErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorDduEventSizeLimitErrorFraction() {
        return (this.formatErrorDduEventSizeLimitErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorCWords property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT16", precision = 20, scale = 10)
    public Long getFormatErrorCWords() {
        return formatErrorCWords;
    }

    /**
     * Sets the value of the formatErrorCWords property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorCWords(Long value) {
        this.formatErrorCWords = value;
    }

    @Transient
    public boolean isSetFormatErrorCWords() {
        return (this.formatErrorCWords!= null);
    }

    /**
     * Gets the value of the formatErrorCWordsFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT16_F", precision = 20, scale = 10)
    public Float getFormatErrorCWordsFraction() {
        return formatErrorCWordsFraction;
    }

    /**
     * Sets the value of the formatErrorCWordsFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorCWordsFraction(Float value) {
        this.formatErrorCWordsFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorCWordsFraction() {
        return (this.formatErrorCWordsFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctDavError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT17", precision = 20, scale = 10)
    public Long getFormatErrorAlctDavError() {
        return formatErrorAlctDavError;
    }

    /**
     * Sets the value of the formatErrorAlctDavError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctDavError(Long value) {
        this.formatErrorAlctDavError = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctDavError() {
        return (this.formatErrorAlctDavError!= null);
    }

    /**
     * Gets the value of the formatErrorAlctDavErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT17_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctDavErrorFraction() {
        return formatErrorAlctDavErrorFraction;
    }

    /**
     * Sets the value of the formatErrorAlctDavErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctDavErrorFraction(Float value) {
        this.formatErrorAlctDavErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctDavErrorFraction() {
        return (this.formatErrorAlctDavErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorTmbDavError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT18", precision = 20, scale = 10)
    public Long getFormatErrorTmbDavError() {
        return formatErrorTmbDavError;
    }

    /**
     * Sets the value of the formatErrorTmbDavError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorTmbDavError(Long value) {
        this.formatErrorTmbDavError = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbDavError() {
        return (this.formatErrorTmbDavError!= null);
    }

    /**
     * Gets the value of the formatErrorTmbDavErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT18_F", precision = 20, scale = 10)
    public Float getFormatErrorTmbDavErrorFraction() {
        return formatErrorTmbDavErrorFraction;
    }

    /**
     * Sets the value of the formatErrorTmbDavErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorTmbDavErrorFraction(Float value) {
        this.formatErrorTmbDavErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbDavErrorFraction() {
        return (this.formatErrorTmbDavErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorCfebDavError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT19", precision = 20, scale = 10)
    public Long getFormatErrorCfebDavError() {
        return formatErrorCfebDavError;
    }

    /**
     * Sets the value of the formatErrorCfebDavError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorCfebDavError(Long value) {
        this.formatErrorCfebDavError = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebDavError() {
        return (this.formatErrorCfebDavError!= null);
    }

    /**
     * Gets the value of the formatErrorCfebDavErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT19_F", precision = 20, scale = 10)
    public Float getFormatErrorCfebDavErrorFraction() {
        return formatErrorCfebDavErrorFraction;
    }

    /**
     * Sets the value of the formatErrorCfebDavErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorCfebDavErrorFraction(Float value) {
        this.formatErrorCfebDavErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorCfebDavErrorFraction() {
        return (this.formatErrorCfebDavErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorDmbHeaderMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT2", precision = 20, scale = 10)
    public Long getFormatErrorDmbHeaderMissing() {
        return formatErrorDmbHeaderMissing;
    }

    /**
     * Sets the value of the formatErrorDmbHeaderMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorDmbHeaderMissing(Long value) {
        this.formatErrorDmbHeaderMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorDmbHeaderMissing() {
        return (this.formatErrorDmbHeaderMissing!= null);
    }

    /**
     * Gets the value of the formatErrorDmbHeaderMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT2_F", precision = 20, scale = 10)
    public Float getFormatErrorDmbHeaderMissingFraction() {
        return formatErrorDmbHeaderMissingFraction;
    }

    /**
     * Sets the value of the formatErrorDmbHeaderMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorDmbHeaderMissingFraction(Float value) {
        this.formatErrorDmbHeaderMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorDmbHeaderMissingFraction() {
        return (this.formatErrorDmbHeaderMissingFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctTrailerMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT3", precision = 20, scale = 10)
    public Long getFormatErrorAlctTrailerMissing() {
        return formatErrorAlctTrailerMissing;
    }

    /**
     * Sets the value of the formatErrorAlctTrailerMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctTrailerMissing(Long value) {
        this.formatErrorAlctTrailerMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctTrailerMissing() {
        return (this.formatErrorAlctTrailerMissing!= null);
    }

    /**
     * Gets the value of the formatErrorAlctTrailerMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT3_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctTrailerMissingFraction() {
        return formatErrorAlctTrailerMissingFraction;
    }

    /**
     * Sets the value of the formatErrorAlctTrailerMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctTrailerMissingFraction(Float value) {
        this.formatErrorAlctTrailerMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctTrailerMissingFraction() {
        return (this.formatErrorAlctTrailerMissingFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctHeaderMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT4", precision = 20, scale = 10)
    public Long getFormatErrorAlctHeaderMissing() {
        return formatErrorAlctHeaderMissing;
    }

    /**
     * Sets the value of the formatErrorAlctHeaderMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctHeaderMissing(Long value) {
        this.formatErrorAlctHeaderMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctHeaderMissing() {
        return (this.formatErrorAlctHeaderMissing!= null);
    }

    /**
     * Gets the value of the formatErrorAlctHeaderMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT4_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctHeaderMissingFraction() {
        return formatErrorAlctHeaderMissingFraction;
    }

    /**
     * Sets the value of the formatErrorAlctHeaderMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctHeaderMissingFraction(Float value) {
        this.formatErrorAlctHeaderMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctHeaderMissingFraction() {
        return (this.formatErrorAlctHeaderMissingFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctWordCountError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT5", precision = 20, scale = 10)
    public Long getFormatErrorAlctWordCountError() {
        return formatErrorAlctWordCountError;
    }

    /**
     * Sets the value of the formatErrorAlctWordCountError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctWordCountError(Long value) {
        this.formatErrorAlctWordCountError = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctWordCountError() {
        return (this.formatErrorAlctWordCountError!= null);
    }

    /**
     * Gets the value of the formatErrorAlctWordCountErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT5_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctWordCountErrorFraction() {
        return formatErrorAlctWordCountErrorFraction;
    }

    /**
     * Sets the value of the formatErrorAlctWordCountErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctWordCountErrorFraction(Float value) {
        this.formatErrorAlctWordCountErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctWordCountErrorFraction() {
        return (this.formatErrorAlctWordCountErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctCrcError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT6", precision = 20, scale = 10)
    public Long getFormatErrorAlctCrcError() {
        return formatErrorAlctCrcError;
    }

    /**
     * Sets the value of the formatErrorAlctCrcError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctCrcError(Long value) {
        this.formatErrorAlctCrcError = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctCrcError() {
        return (this.formatErrorAlctCrcError!= null);
    }

    /**
     * Gets the value of the formatErrorAlctCrcErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT6_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctCrcErrorFraction() {
        return formatErrorAlctCrcErrorFraction;
    }

    /**
     * Sets the value of the formatErrorAlctCrcErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctCrcErrorFraction(Float value) {
        this.formatErrorAlctCrcErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctCrcErrorFraction() {
        return (this.formatErrorAlctCrcErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorAlctTrailerBitError property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT7", precision = 20, scale = 10)
    public Long getFormatErrorAlctTrailerBitError() {
        return formatErrorAlctTrailerBitError;
    }

    /**
     * Sets the value of the formatErrorAlctTrailerBitError property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorAlctTrailerBitError(Long value) {
        this.formatErrorAlctTrailerBitError = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctTrailerBitError() {
        return (this.formatErrorAlctTrailerBitError!= null);
    }

    /**
     * Gets the value of the formatErrorAlctTrailerBitErrorFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT7_F", precision = 20, scale = 10)
    public Float getFormatErrorAlctTrailerBitErrorFraction() {
        return formatErrorAlctTrailerBitErrorFraction;
    }

    /**
     * Sets the value of the formatErrorAlctTrailerBitErrorFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorAlctTrailerBitErrorFraction(Float value) {
        this.formatErrorAlctTrailerBitErrorFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorAlctTrailerBitErrorFraction() {
        return (this.formatErrorAlctTrailerBitErrorFraction!= null);
    }

    /**
     * Gets the value of the formatErrorTmbTrailerMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT8", precision = 20, scale = 10)
    public Long getFormatErrorTmbTrailerMissing() {
        return formatErrorTmbTrailerMissing;
    }

    /**
     * Sets the value of the formatErrorTmbTrailerMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorTmbTrailerMissing(Long value) {
        this.formatErrorTmbTrailerMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbTrailerMissing() {
        return (this.formatErrorTmbTrailerMissing!= null);
    }

    /**
     * Gets the value of the formatErrorTmbTrailerMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT8_F", precision = 20, scale = 10)
    public Float getFormatErrorTmbTrailerMissingFraction() {
        return formatErrorTmbTrailerMissingFraction;
    }

    /**
     * Sets the value of the formatErrorTmbTrailerMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorTmbTrailerMissingFraction(Float value) {
        this.formatErrorTmbTrailerMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbTrailerMissingFraction() {
        return (this.formatErrorTmbTrailerMissingFraction!= null);
    }

    /**
     * Gets the value of the formatErrorTmbHeaderMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT9", precision = 20, scale = 10)
    public Long getFormatErrorTmbHeaderMissing() {
        return formatErrorTmbHeaderMissing;
    }

    /**
     * Sets the value of the formatErrorTmbHeaderMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFormatErrorTmbHeaderMissing(Long value) {
        this.formatErrorTmbHeaderMissing = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbHeaderMissing() {
        return (this.formatErrorTmbHeaderMissing!= null);
    }

    /**
     * Gets the value of the formatErrorTmbHeaderMissingFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_FORMAT_ERRORS_BIT9_F", precision = 20, scale = 10)
    public Float getFormatErrorTmbHeaderMissingFraction() {
        return formatErrorTmbHeaderMissingFraction;
    }

    /**
     * Sets the value of the formatErrorTmbHeaderMissingFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setFormatErrorTmbHeaderMissingFraction(Float value) {
        this.formatErrorTmbHeaderMissingFraction = value;
    }

    @Transient
    public boolean isSetFormatErrorTmbHeaderMissingFraction() {
        return (this.formatErrorTmbHeaderMissingFraction!= null);
    }

    /**
     * Gets the value of the hotChamber property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_HOT_CHAMBER", precision = 20, scale = 10)
    public Long getHotChamber() {
        return hotChamber;
    }

    /**
     * Sets the value of the hotChamber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHotChamber(Long value) {
        this.hotChamber = value;
    }

    @Transient
    public boolean isSetHotChamber() {
        return (this.hotChamber!= null);
    }

    /**
     * Gets the value of the hotChamberFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_HOT_CHAMBER_F", precision = 20, scale = 10)
    public Float getHotChamberFraction() {
        return hotChamberFraction;
    }

    /**
     * Sets the value of the hotChamberFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setHotChamberFraction(Float value) {
        this.hotChamberFraction = value;
    }

    @Transient
    public boolean isSetHotChamberFraction() {
        return (this.hotChamberFraction!= null);
    }

    /**
     * Gets the value of the lowEfficiencyChamber property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_LOW_EFF_CHAMBER", precision = 20, scale = 10)
    public Long getLowEfficiencyChamber() {
        return lowEfficiencyChamber;
    }

    /**
     * Sets the value of the lowEfficiencyChamber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setLowEfficiencyChamber(Long value) {
        this.lowEfficiencyChamber = value;
    }

    @Transient
    public boolean isSetLowEfficiencyChamber() {
        return (this.lowEfficiencyChamber!= null);
    }

    /**
     * Gets the value of the lowEfficiencyChamberFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_LOW_EFF_CHAMBER_F", precision = 20, scale = 10)
    public Float getLowEfficiencyChamberFraction() {
        return lowEfficiencyChamberFraction;
    }

    /**
     * Sets the value of the lowEfficiencyChamberFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setLowEfficiencyChamberFraction(Float value) {
        this.lowEfficiencyChamberFraction = value;
    }

    @Transient
    public boolean isSetLowEfficiencyChamberFraction() {
        return (this.lowEfficiencyChamberFraction!= null);
    }

    /**
     * Gets the value of the withBwords property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_BWORDS", precision = 20, scale = 10)
    public Long getWithBwords() {
        return withBwords;
    }

    /**
     * Sets the value of the withBwords property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithBwords(Long value) {
        this.withBwords = value;
    }

    @Transient
    public boolean isSetWithBwords() {
        return (this.withBwords!= null);
    }

    /**
     * Gets the value of the withBwordsFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_BWORDS_F", precision = 20, scale = 10)
    public Float getWithBwordsFraction() {
        return withBwordsFraction;
    }

    /**
     * Sets the value of the withBwordsFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithBwordsFraction(Float value) {
        this.withBwordsFraction = value;
    }

    @Transient
    public boolean isSetWithBwordsFraction() {
        return (this.withBwordsFraction!= null);
    }

    /**
     * Gets the value of the withFormatErrors property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_FORMAT_ERRORS", precision = 20, scale = 10)
    public Long getWithFormatErrors() {
        return withFormatErrors;
    }

    /**
     * Sets the value of the withFormatErrors property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithFormatErrors(Long value) {
        this.withFormatErrors = value;
    }

    @Transient
    public boolean isSetWithFormatErrors() {
        return (this.withFormatErrors!= null);
    }

    /**
     * Gets the value of the withFormatErrorsFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_FORMAT_ERRORS_F", precision = 20, scale = 10)
    public Float getWithFormatErrorsFraction() {
        return withFormatErrorsFraction;
    }

    /**
     * Sets the value of the withFormatErrorsFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithFormatErrorsFraction(Float value) {
        this.withFormatErrorsFraction = value;
    }

    @Transient
    public boolean isSetWithFormatErrorsFraction() {
        return (this.withFormatErrorsFraction!= null);
    }

    /**
     * Gets the value of the withInputFifoFull property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_INPUT_FIFO_FULL", precision = 20, scale = 10)
    public Long getWithInputFifoFull() {
        return withInputFifoFull;
    }

    /**
     * Sets the value of the withInputFifoFull property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithInputFifoFull(Long value) {
        this.withInputFifoFull = value;
    }

    @Transient
    public boolean isSetWithInputFifoFull() {
        return (this.withInputFifoFull!= null);
    }

    /**
     * Gets the value of the withInputFifoFullFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_INPUT_FIFO_FULL_F", precision = 20, scale = 10)
    public Float getWithInputFifoFullFraction() {
        return withInputFifoFullFraction;
    }

    /**
     * Sets the value of the withInputFifoFullFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithInputFifoFullFraction(Float value) {
        this.withInputFifoFullFraction = value;
    }

    @Transient
    public boolean isSetWithInputFifoFullFraction() {
        return (this.withInputFifoFullFraction!= null);
    }

    /**
     * Gets the value of the withInputTimeout property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_INPUT_TIMEOUT", precision = 20, scale = 10)
    public Long getWithInputTimeout() {
        return withInputTimeout;
    }

    /**
     * Sets the value of the withInputTimeout property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithInputTimeout(Long value) {
        this.withInputTimeout = value;
    }

    @Transient
    public boolean isSetWithInputTimeout() {
        return (this.withInputTimeout!= null);
    }

    /**
     * Gets the value of the withInputTimeoutFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_INPUT_TIMEOUT_F", precision = 20, scale = 10)
    public Float getWithInputTimeoutFraction() {
        return withInputTimeoutFraction;
    }

    /**
     * Sets the value of the withInputTimeoutFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithInputTimeoutFraction(Float value) {
        this.withInputTimeoutFraction = value;
    }

    @Transient
    public boolean isSetWithInputTimeoutFraction() {
        return (this.withInputTimeoutFraction!= null);
    }

    /**
     * Gets the value of the withL1AOutOfSync property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_L1A_OUT_OF_SYNC", precision = 20, scale = 10)
    public Long getWithL1AOutOfSync() {
        return withL1AOutOfSync;
    }

    /**
     * Sets the value of the withL1AOutOfSync property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithL1AOutOfSync(Long value) {
        this.withL1AOutOfSync = value;
    }

    @Transient
    public boolean isSetWithL1AOutOfSync() {
        return (this.withL1AOutOfSync!= null);
    }

    /**
     * Gets the value of the withL1AOutOfSyncFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITH_L1A_OUT_OF_SYNC_F", precision = 20, scale = 10)
    public Float getWithL1AOutOfSyncFraction() {
        return withL1AOutOfSyncFraction;
    }

    /**
     * Sets the value of the withL1AOutOfSyncFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithL1AOutOfSyncFraction(Float value) {
        this.withL1AOutOfSyncFraction = value;
    }

    @Transient
    public boolean isSetWithL1AOutOfSyncFraction() {
        return (this.withL1AOutOfSyncFraction!= null);
    }

    /**
     * Gets the value of the withoutAlct property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_ALCT", precision = 20, scale = 10)
    public Long getWithoutAlct() {
        return withoutAlct;
    }

    /**
     * Sets the value of the withoutAlct property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithoutAlct(Long value) {
        this.withoutAlct = value;
    }

    @Transient
    public boolean isSetWithoutAlct() {
        return (this.withoutAlct!= null);
    }

    /**
     * Gets the value of the withoutAlctFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_ALCT_F", precision = 20, scale = 10)
    public Float getWithoutAlctFraction() {
        return withoutAlctFraction;
    }

    /**
     * Sets the value of the withoutAlctFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithoutAlctFraction(Float value) {
        this.withoutAlctFraction = value;
    }

    @Transient
    public boolean isSetWithoutAlctFraction() {
        return (this.withoutAlctFraction!= null);
    }

    /**
     * Gets the value of the withoutCfeb property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_CFEB", precision = 20, scale = 10)
    public Long getWithoutCfeb() {
        return withoutCfeb;
    }

    /**
     * Sets the value of the withoutCfeb property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithoutCfeb(Long value) {
        this.withoutCfeb = value;
    }

    @Transient
    public boolean isSetWithoutCfeb() {
        return (this.withoutCfeb!= null);
    }

    /**
     * Gets the value of the withoutCfebFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_CFEB_F", precision = 20, scale = 10)
    public Float getWithoutCfebFraction() {
        return withoutCfebFraction;
    }

    /**
     * Sets the value of the withoutCfebFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithoutCfebFraction(Float value) {
        this.withoutCfebFraction = value;
    }

    @Transient
    public boolean isSetWithoutCfebFraction() {
        return (this.withoutCfebFraction!= null);
    }

    /**
     * Gets the value of the withoutClct property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_CLCT", precision = 20, scale = 10)
    public Long getWithoutClct() {
        return withoutClct;
    }

    /**
     * Sets the value of the withoutClct property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setWithoutClct(Long value) {
        this.withoutClct = value;
    }

    @Transient
    public boolean isSetWithoutClct() {
        return (this.withoutClct!= null);
    }

    /**
     * Gets the value of the withoutClctFraction property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    @Basic
    @Column(name = "FCT_WITHOUT_CLCT_F", precision = 20, scale = 10)
    public Float getWithoutClctFraction() {
        return withoutClctFraction;
    }

    /**
     * Sets the value of the withoutClctFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setWithoutClctFraction(Float value) {
        this.withoutClctFraction = value;
    }

    @Transient
    public boolean isSetWithoutClctFraction() {
        return (this.withoutClctFraction!= null);
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof DqmCscFact)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        super.equals(object, equalsBuilder);
        final DqmCscFact that = ((DqmCscFact) object);
        equalsBuilder.append(this.isOnline(), that.isOnline());
        equalsBuilder.append(this.getFormatErrorDmbTrailerMissing(), that.getFormatErrorDmbTrailerMissing());
        equalsBuilder.append(this.getFormatErrorDmbTrailerMissingFraction(), that.getFormatErrorDmbTrailerMissingFraction());
        equalsBuilder.append(this.getFormatErrorTmbWordCountError(), that.getFormatErrorTmbWordCountError());
        equalsBuilder.append(this.getFormatErrorTmbWordCountErrorFraction(), that.getFormatErrorTmbWordCountErrorFraction());
        equalsBuilder.append(this.getFormatErrorTmbCrcError(), that.getFormatErrorTmbCrcError());
        equalsBuilder.append(this.getFormatErrorTmbCrcErrorFraction(), that.getFormatErrorTmbCrcErrorFraction());
        equalsBuilder.append(this.getFormatErrorCfebWordCountPerSampleError(), that.getFormatErrorCfebWordCountPerSampleError());
        equalsBuilder.append(this.getFormatErrorCfebWordCountPerSampleErrorFraction(), that.getFormatErrorCfebWordCountPerSampleErrorFraction());
        equalsBuilder.append(this.getFormatErrorCfebSampleCountError(), that.getFormatErrorCfebSampleCountError());
        equalsBuilder.append(this.getFormatErrorCfebSampleCountErrorFraction(), that.getFormatErrorCfebSampleCountErrorFraction());
        equalsBuilder.append(this.getFormatErrorCfebCrcError(), that.getFormatErrorCfebCrcError());
        equalsBuilder.append(this.getFormatErrorCfebCrcErrorFraction(), that.getFormatErrorCfebCrcErrorFraction());
        equalsBuilder.append(this.getFormatErrorDduEventSizeLimitError(), that.getFormatErrorDduEventSizeLimitError());
        equalsBuilder.append(this.getFormatErrorDduEventSizeLimitErrorFraction(), that.getFormatErrorDduEventSizeLimitErrorFraction());
        equalsBuilder.append(this.getFormatErrorCWords(), that.getFormatErrorCWords());
        equalsBuilder.append(this.getFormatErrorCWordsFraction(), that.getFormatErrorCWordsFraction());
        equalsBuilder.append(this.getFormatErrorAlctDavError(), that.getFormatErrorAlctDavError());
        equalsBuilder.append(this.getFormatErrorAlctDavErrorFraction(), that.getFormatErrorAlctDavErrorFraction());
        equalsBuilder.append(this.getFormatErrorTmbDavError(), that.getFormatErrorTmbDavError());
        equalsBuilder.append(this.getFormatErrorTmbDavErrorFraction(), that.getFormatErrorTmbDavErrorFraction());
        equalsBuilder.append(this.getFormatErrorCfebDavError(), that.getFormatErrorCfebDavError());
        equalsBuilder.append(this.getFormatErrorCfebDavErrorFraction(), that.getFormatErrorCfebDavErrorFraction());
        equalsBuilder.append(this.getFormatErrorDmbHeaderMissing(), that.getFormatErrorDmbHeaderMissing());
        equalsBuilder.append(this.getFormatErrorDmbHeaderMissingFraction(), that.getFormatErrorDmbHeaderMissingFraction());
        equalsBuilder.append(this.getFormatErrorAlctTrailerMissing(), that.getFormatErrorAlctTrailerMissing());
        equalsBuilder.append(this.getFormatErrorAlctTrailerMissingFraction(), that.getFormatErrorAlctTrailerMissingFraction());
        equalsBuilder.append(this.getFormatErrorAlctHeaderMissing(), that.getFormatErrorAlctHeaderMissing());
        equalsBuilder.append(this.getFormatErrorAlctHeaderMissingFraction(), that.getFormatErrorAlctHeaderMissingFraction());
        equalsBuilder.append(this.getFormatErrorAlctWordCountError(), that.getFormatErrorAlctWordCountError());
        equalsBuilder.append(this.getFormatErrorAlctWordCountErrorFraction(), that.getFormatErrorAlctWordCountErrorFraction());
        equalsBuilder.append(this.getFormatErrorAlctCrcError(), that.getFormatErrorAlctCrcError());
        equalsBuilder.append(this.getFormatErrorAlctCrcErrorFraction(), that.getFormatErrorAlctCrcErrorFraction());
        equalsBuilder.append(this.getFormatErrorAlctTrailerBitError(), that.getFormatErrorAlctTrailerBitError());
        equalsBuilder.append(this.getFormatErrorAlctTrailerBitErrorFraction(), that.getFormatErrorAlctTrailerBitErrorFraction());
        equalsBuilder.append(this.getFormatErrorTmbTrailerMissing(), that.getFormatErrorTmbTrailerMissing());
        equalsBuilder.append(this.getFormatErrorTmbTrailerMissingFraction(), that.getFormatErrorTmbTrailerMissingFraction());
        equalsBuilder.append(this.getFormatErrorTmbHeaderMissing(), that.getFormatErrorTmbHeaderMissing());
        equalsBuilder.append(this.getFormatErrorTmbHeaderMissingFraction(), that.getFormatErrorTmbHeaderMissingFraction());
        equalsBuilder.append(this.getHotChamber(), that.getHotChamber());
        equalsBuilder.append(this.getHotChamberFraction(), that.getHotChamberFraction());
        equalsBuilder.append(this.getLowEfficiencyChamber(), that.getLowEfficiencyChamber());
        equalsBuilder.append(this.getLowEfficiencyChamberFraction(), that.getLowEfficiencyChamberFraction());
        equalsBuilder.append(this.getWithBwords(), that.getWithBwords());
        equalsBuilder.append(this.getWithBwordsFraction(), that.getWithBwordsFraction());
        equalsBuilder.append(this.getWithFormatErrors(), that.getWithFormatErrors());
        equalsBuilder.append(this.getWithFormatErrorsFraction(), that.getWithFormatErrorsFraction());
        equalsBuilder.append(this.getWithInputFifoFull(), that.getWithInputFifoFull());
        equalsBuilder.append(this.getWithInputFifoFullFraction(), that.getWithInputFifoFullFraction());
        equalsBuilder.append(this.getWithInputTimeout(), that.getWithInputTimeout());
        equalsBuilder.append(this.getWithInputTimeoutFraction(), that.getWithInputTimeoutFraction());
        equalsBuilder.append(this.getWithL1AOutOfSync(), that.getWithL1AOutOfSync());
        equalsBuilder.append(this.getWithL1AOutOfSyncFraction(), that.getWithL1AOutOfSyncFraction());
        equalsBuilder.append(this.getWithoutAlct(), that.getWithoutAlct());
        equalsBuilder.append(this.getWithoutAlctFraction(), that.getWithoutAlctFraction());
        equalsBuilder.append(this.getWithoutCfeb(), that.getWithoutCfeb());
        equalsBuilder.append(this.getWithoutCfebFraction(), that.getWithoutCfebFraction());
        equalsBuilder.append(this.getWithoutClct(), that.getWithoutClct());
        equalsBuilder.append(this.getWithoutClctFraction(), that.getWithoutClctFraction());
    }

    public boolean equals(Object object) {
        if (!(object instanceof DqmCscFact)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        super.hashCode(hashCodeBuilder);
        hashCodeBuilder.append(this.isOnline());
        hashCodeBuilder.append(this.getFormatErrorDmbTrailerMissing());
        hashCodeBuilder.append(this.getFormatErrorDmbTrailerMissingFraction());
        hashCodeBuilder.append(this.getFormatErrorTmbWordCountError());
        hashCodeBuilder.append(this.getFormatErrorTmbWordCountErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorTmbCrcError());
        hashCodeBuilder.append(this.getFormatErrorTmbCrcErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorCfebWordCountPerSampleError());
        hashCodeBuilder.append(this.getFormatErrorCfebWordCountPerSampleErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorCfebSampleCountError());
        hashCodeBuilder.append(this.getFormatErrorCfebSampleCountErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorCfebCrcError());
        hashCodeBuilder.append(this.getFormatErrorCfebCrcErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorDduEventSizeLimitError());
        hashCodeBuilder.append(this.getFormatErrorDduEventSizeLimitErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorCWords());
        hashCodeBuilder.append(this.getFormatErrorCWordsFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctDavError());
        hashCodeBuilder.append(this.getFormatErrorAlctDavErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorTmbDavError());
        hashCodeBuilder.append(this.getFormatErrorTmbDavErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorCfebDavError());
        hashCodeBuilder.append(this.getFormatErrorCfebDavErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorDmbHeaderMissing());
        hashCodeBuilder.append(this.getFormatErrorDmbHeaderMissingFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctTrailerMissing());
        hashCodeBuilder.append(this.getFormatErrorAlctTrailerMissingFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctHeaderMissing());
        hashCodeBuilder.append(this.getFormatErrorAlctHeaderMissingFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctWordCountError());
        hashCodeBuilder.append(this.getFormatErrorAlctWordCountErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctCrcError());
        hashCodeBuilder.append(this.getFormatErrorAlctCrcErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorAlctTrailerBitError());
        hashCodeBuilder.append(this.getFormatErrorAlctTrailerBitErrorFraction());
        hashCodeBuilder.append(this.getFormatErrorTmbTrailerMissing());
        hashCodeBuilder.append(this.getFormatErrorTmbTrailerMissingFraction());
        hashCodeBuilder.append(this.getFormatErrorTmbHeaderMissing());
        hashCodeBuilder.append(this.getFormatErrorTmbHeaderMissingFraction());
        hashCodeBuilder.append(this.getHotChamber());
        hashCodeBuilder.append(this.getHotChamberFraction());
        hashCodeBuilder.append(this.getLowEfficiencyChamber());
        hashCodeBuilder.append(this.getLowEfficiencyChamberFraction());
        hashCodeBuilder.append(this.getWithBwords());
        hashCodeBuilder.append(this.getWithBwordsFraction());
        hashCodeBuilder.append(this.getWithFormatErrors());
        hashCodeBuilder.append(this.getWithFormatErrorsFraction());
        hashCodeBuilder.append(this.getWithInputFifoFull());
        hashCodeBuilder.append(this.getWithInputFifoFullFraction());
        hashCodeBuilder.append(this.getWithInputTimeout());
        hashCodeBuilder.append(this.getWithInputTimeoutFraction());
        hashCodeBuilder.append(this.getWithL1AOutOfSync());
        hashCodeBuilder.append(this.getWithL1AOutOfSyncFraction());
        hashCodeBuilder.append(this.getWithoutAlct());
        hashCodeBuilder.append(this.getWithoutAlctFraction());
        hashCodeBuilder.append(this.getWithoutCfeb());
        hashCodeBuilder.append(this.getWithoutCfebFraction());
        hashCodeBuilder.append(this.getWithoutClct());
        hashCodeBuilder.append(this.getWithoutClctFraction());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public void toString(ToStringBuilder toStringBuilder) {
        super.toString(toStringBuilder);
        {
            boolean theOnline;
            theOnline = this.isOnline();
            toStringBuilder.append("online", theOnline);
        }
        {
            Long theFormatErrorDmbTrailerMissing;
            theFormatErrorDmbTrailerMissing = this.getFormatErrorDmbTrailerMissing();
            toStringBuilder.append("formatErrorDmbTrailerMissing", theFormatErrorDmbTrailerMissing);
        }
        {
            Float theFormatErrorDmbTrailerMissingFraction;
            theFormatErrorDmbTrailerMissingFraction = this.getFormatErrorDmbTrailerMissingFraction();
            toStringBuilder.append("formatErrorDmbTrailerMissingFraction", theFormatErrorDmbTrailerMissingFraction);
        }
        {
            Long theFormatErrorTmbWordCountError;
            theFormatErrorTmbWordCountError = this.getFormatErrorTmbWordCountError();
            toStringBuilder.append("formatErrorTmbWordCountError", theFormatErrorTmbWordCountError);
        }
        {
            Float theFormatErrorTmbWordCountErrorFraction;
            theFormatErrorTmbWordCountErrorFraction = this.getFormatErrorTmbWordCountErrorFraction();
            toStringBuilder.append("formatErrorTmbWordCountErrorFraction", theFormatErrorTmbWordCountErrorFraction);
        }
        {
            Long theFormatErrorTmbCrcError;
            theFormatErrorTmbCrcError = this.getFormatErrorTmbCrcError();
            toStringBuilder.append("formatErrorTmbCrcError", theFormatErrorTmbCrcError);
        }
        {
            Float theFormatErrorTmbCrcErrorFraction;
            theFormatErrorTmbCrcErrorFraction = this.getFormatErrorTmbCrcErrorFraction();
            toStringBuilder.append("formatErrorTmbCrcErrorFraction", theFormatErrorTmbCrcErrorFraction);
        }
        {
            Long theFormatErrorCfebWordCountPerSampleError;
            theFormatErrorCfebWordCountPerSampleError = this.getFormatErrorCfebWordCountPerSampleError();
            toStringBuilder.append("formatErrorCfebWordCountPerSampleError", theFormatErrorCfebWordCountPerSampleError);
        }
        {
            Float theFormatErrorCfebWordCountPerSampleErrorFraction;
            theFormatErrorCfebWordCountPerSampleErrorFraction = this.getFormatErrorCfebWordCountPerSampleErrorFraction();
            toStringBuilder.append("formatErrorCfebWordCountPerSampleErrorFraction", theFormatErrorCfebWordCountPerSampleErrorFraction);
        }
        {
            Long theFormatErrorCfebSampleCountError;
            theFormatErrorCfebSampleCountError = this.getFormatErrorCfebSampleCountError();
            toStringBuilder.append("formatErrorCfebSampleCountError", theFormatErrorCfebSampleCountError);
        }
        {
            Float theFormatErrorCfebSampleCountErrorFraction;
            theFormatErrorCfebSampleCountErrorFraction = this.getFormatErrorCfebSampleCountErrorFraction();
            toStringBuilder.append("formatErrorCfebSampleCountErrorFraction", theFormatErrorCfebSampleCountErrorFraction);
        }
        {
            Long theFormatErrorCfebCrcError;
            theFormatErrorCfebCrcError = this.getFormatErrorCfebCrcError();
            toStringBuilder.append("formatErrorCfebCrcError", theFormatErrorCfebCrcError);
        }
        {
            Float theFormatErrorCfebCrcErrorFraction;
            theFormatErrorCfebCrcErrorFraction = this.getFormatErrorCfebCrcErrorFraction();
            toStringBuilder.append("formatErrorCfebCrcErrorFraction", theFormatErrorCfebCrcErrorFraction);
        }
        {
            Long theFormatErrorDduEventSizeLimitError;
            theFormatErrorDduEventSizeLimitError = this.getFormatErrorDduEventSizeLimitError();
            toStringBuilder.append("formatErrorDduEventSizeLimitError", theFormatErrorDduEventSizeLimitError);
        }
        {
            Float theFormatErrorDduEventSizeLimitErrorFraction;
            theFormatErrorDduEventSizeLimitErrorFraction = this.getFormatErrorDduEventSizeLimitErrorFraction();
            toStringBuilder.append("formatErrorDduEventSizeLimitErrorFraction", theFormatErrorDduEventSizeLimitErrorFraction);
        }
        {
            Long theFormatErrorCWords;
            theFormatErrorCWords = this.getFormatErrorCWords();
            toStringBuilder.append("formatErrorCWords", theFormatErrorCWords);
        }
        {
            Float theFormatErrorCWordsFraction;
            theFormatErrorCWordsFraction = this.getFormatErrorCWordsFraction();
            toStringBuilder.append("formatErrorCWordsFraction", theFormatErrorCWordsFraction);
        }
        {
            Long theFormatErrorAlctDavError;
            theFormatErrorAlctDavError = this.getFormatErrorAlctDavError();
            toStringBuilder.append("formatErrorAlctDavError", theFormatErrorAlctDavError);
        }
        {
            Float theFormatErrorAlctDavErrorFraction;
            theFormatErrorAlctDavErrorFraction = this.getFormatErrorAlctDavErrorFraction();
            toStringBuilder.append("formatErrorAlctDavErrorFraction", theFormatErrorAlctDavErrorFraction);
        }
        {
            Long theFormatErrorTmbDavError;
            theFormatErrorTmbDavError = this.getFormatErrorTmbDavError();
            toStringBuilder.append("formatErrorTmbDavError", theFormatErrorTmbDavError);
        }
        {
            Float theFormatErrorTmbDavErrorFraction;
            theFormatErrorTmbDavErrorFraction = this.getFormatErrorTmbDavErrorFraction();
            toStringBuilder.append("formatErrorTmbDavErrorFraction", theFormatErrorTmbDavErrorFraction);
        }
        {
            Long theFormatErrorCfebDavError;
            theFormatErrorCfebDavError = this.getFormatErrorCfebDavError();
            toStringBuilder.append("formatErrorCfebDavError", theFormatErrorCfebDavError);
        }
        {
            Float theFormatErrorCfebDavErrorFraction;
            theFormatErrorCfebDavErrorFraction = this.getFormatErrorCfebDavErrorFraction();
            toStringBuilder.append("formatErrorCfebDavErrorFraction", theFormatErrorCfebDavErrorFraction);
        }
        {
            Long theFormatErrorDmbHeaderMissing;
            theFormatErrorDmbHeaderMissing = this.getFormatErrorDmbHeaderMissing();
            toStringBuilder.append("formatErrorDmbHeaderMissing", theFormatErrorDmbHeaderMissing);
        }
        {
            Float theFormatErrorDmbHeaderMissingFraction;
            theFormatErrorDmbHeaderMissingFraction = this.getFormatErrorDmbHeaderMissingFraction();
            toStringBuilder.append("formatErrorDmbHeaderMissingFraction", theFormatErrorDmbHeaderMissingFraction);
        }
        {
            Long theFormatErrorAlctTrailerMissing;
            theFormatErrorAlctTrailerMissing = this.getFormatErrorAlctTrailerMissing();
            toStringBuilder.append("formatErrorAlctTrailerMissing", theFormatErrorAlctTrailerMissing);
        }
        {
            Float theFormatErrorAlctTrailerMissingFraction;
            theFormatErrorAlctTrailerMissingFraction = this.getFormatErrorAlctTrailerMissingFraction();
            toStringBuilder.append("formatErrorAlctTrailerMissingFraction", theFormatErrorAlctTrailerMissingFraction);
        }
        {
            Long theFormatErrorAlctHeaderMissing;
            theFormatErrorAlctHeaderMissing = this.getFormatErrorAlctHeaderMissing();
            toStringBuilder.append("formatErrorAlctHeaderMissing", theFormatErrorAlctHeaderMissing);
        }
        {
            Float theFormatErrorAlctHeaderMissingFraction;
            theFormatErrorAlctHeaderMissingFraction = this.getFormatErrorAlctHeaderMissingFraction();
            toStringBuilder.append("formatErrorAlctHeaderMissingFraction", theFormatErrorAlctHeaderMissingFraction);
        }
        {
            Long theFormatErrorAlctWordCountError;
            theFormatErrorAlctWordCountError = this.getFormatErrorAlctWordCountError();
            toStringBuilder.append("formatErrorAlctWordCountError", theFormatErrorAlctWordCountError);
        }
        {
            Float theFormatErrorAlctWordCountErrorFraction;
            theFormatErrorAlctWordCountErrorFraction = this.getFormatErrorAlctWordCountErrorFraction();
            toStringBuilder.append("formatErrorAlctWordCountErrorFraction", theFormatErrorAlctWordCountErrorFraction);
        }
        {
            Long theFormatErrorAlctCrcError;
            theFormatErrorAlctCrcError = this.getFormatErrorAlctCrcError();
            toStringBuilder.append("formatErrorAlctCrcError", theFormatErrorAlctCrcError);
        }
        {
            Float theFormatErrorAlctCrcErrorFraction;
            theFormatErrorAlctCrcErrorFraction = this.getFormatErrorAlctCrcErrorFraction();
            toStringBuilder.append("formatErrorAlctCrcErrorFraction", theFormatErrorAlctCrcErrorFraction);
        }
        {
            Long theFormatErrorAlctTrailerBitError;
            theFormatErrorAlctTrailerBitError = this.getFormatErrorAlctTrailerBitError();
            toStringBuilder.append("formatErrorAlctTrailerBitError", theFormatErrorAlctTrailerBitError);
        }
        {
            Float theFormatErrorAlctTrailerBitErrorFraction;
            theFormatErrorAlctTrailerBitErrorFraction = this.getFormatErrorAlctTrailerBitErrorFraction();
            toStringBuilder.append("formatErrorAlctTrailerBitErrorFraction", theFormatErrorAlctTrailerBitErrorFraction);
        }
        {
            Long theFormatErrorTmbTrailerMissing;
            theFormatErrorTmbTrailerMissing = this.getFormatErrorTmbTrailerMissing();
            toStringBuilder.append("formatErrorTmbTrailerMissing", theFormatErrorTmbTrailerMissing);
        }
        {
            Float theFormatErrorTmbTrailerMissingFraction;
            theFormatErrorTmbTrailerMissingFraction = this.getFormatErrorTmbTrailerMissingFraction();
            toStringBuilder.append("formatErrorTmbTrailerMissingFraction", theFormatErrorTmbTrailerMissingFraction);
        }
        {
            Long theFormatErrorTmbHeaderMissing;
            theFormatErrorTmbHeaderMissing = this.getFormatErrorTmbHeaderMissing();
            toStringBuilder.append("formatErrorTmbHeaderMissing", theFormatErrorTmbHeaderMissing);
        }
        {
            Float theFormatErrorTmbHeaderMissingFraction;
            theFormatErrorTmbHeaderMissingFraction = this.getFormatErrorTmbHeaderMissingFraction();
            toStringBuilder.append("formatErrorTmbHeaderMissingFraction", theFormatErrorTmbHeaderMissingFraction);
        }
        {
            Long theHotChamber;
            theHotChamber = this.getHotChamber();
            toStringBuilder.append("hotChamber", theHotChamber);
        }
        {
            Float theHotChamberFraction;
            theHotChamberFraction = this.getHotChamberFraction();
            toStringBuilder.append("hotChamberFraction", theHotChamberFraction);
        }
        {
            Long theLowEfficiencyChamber;
            theLowEfficiencyChamber = this.getLowEfficiencyChamber();
            toStringBuilder.append("lowEfficiencyChamber", theLowEfficiencyChamber);
        }
        {
            Float theLowEfficiencyChamberFraction;
            theLowEfficiencyChamberFraction = this.getLowEfficiencyChamberFraction();
            toStringBuilder.append("lowEfficiencyChamberFraction", theLowEfficiencyChamberFraction);
        }
        {
            Long theWithBwords;
            theWithBwords = this.getWithBwords();
            toStringBuilder.append("withBwords", theWithBwords);
        }
        {
            Float theWithBwordsFraction;
            theWithBwordsFraction = this.getWithBwordsFraction();
            toStringBuilder.append("withBwordsFraction", theWithBwordsFraction);
        }
        {
            Long theWithFormatErrors;
            theWithFormatErrors = this.getWithFormatErrors();
            toStringBuilder.append("withFormatErrors", theWithFormatErrors);
        }
        {
            Float theWithFormatErrorsFraction;
            theWithFormatErrorsFraction = this.getWithFormatErrorsFraction();
            toStringBuilder.append("withFormatErrorsFraction", theWithFormatErrorsFraction);
        }
        {
            Long theWithInputFifoFull;
            theWithInputFifoFull = this.getWithInputFifoFull();
            toStringBuilder.append("withInputFifoFull", theWithInputFifoFull);
        }
        {
            Float theWithInputFifoFullFraction;
            theWithInputFifoFullFraction = this.getWithInputFifoFullFraction();
            toStringBuilder.append("withInputFifoFullFraction", theWithInputFifoFullFraction);
        }
        {
            Long theWithInputTimeout;
            theWithInputTimeout = this.getWithInputTimeout();
            toStringBuilder.append("withInputTimeout", theWithInputTimeout);
        }
        {
            Float theWithInputTimeoutFraction;
            theWithInputTimeoutFraction = this.getWithInputTimeoutFraction();
            toStringBuilder.append("withInputTimeoutFraction", theWithInputTimeoutFraction);
        }
        {
            Long theWithL1AOutOfSync;
            theWithL1AOutOfSync = this.getWithL1AOutOfSync();
            toStringBuilder.append("withL1AOutOfSync", theWithL1AOutOfSync);
        }
        {
            Float theWithL1AOutOfSyncFraction;
            theWithL1AOutOfSyncFraction = this.getWithL1AOutOfSyncFraction();
            toStringBuilder.append("withL1AOutOfSyncFraction", theWithL1AOutOfSyncFraction);
        }
        {
            Long theWithoutAlct;
            theWithoutAlct = this.getWithoutAlct();
            toStringBuilder.append("withoutAlct", theWithoutAlct);
        }
        {
            Float theWithoutAlctFraction;
            theWithoutAlctFraction = this.getWithoutAlctFraction();
            toStringBuilder.append("withoutAlctFraction", theWithoutAlctFraction);
        }
        {
            Long theWithoutCfeb;
            theWithoutCfeb = this.getWithoutCfeb();
            toStringBuilder.append("withoutCfeb", theWithoutCfeb);
        }
        {
            Float theWithoutCfebFraction;
            theWithoutCfebFraction = this.getWithoutCfebFraction();
            toStringBuilder.append("withoutCfebFraction", theWithoutCfebFraction);
        }
        {
            Long theWithoutClct;
            theWithoutClct = this.getWithoutClct();
            toStringBuilder.append("withoutClct", theWithoutClct);
        }
        {
            Float theWithoutClctFraction;
            theWithoutClctFraction = this.getWithoutClctFraction();
            toStringBuilder.append("withoutClctFraction", theWithoutClctFraction);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }
    
//--simple--preserve

    @Override
    public boolean checkComponentClassType(org.cern.cms.csc.dw.model.ontology.ComponentClassType componentClassType) {
        return componentClassType.equals(org.cern.cms.csc.dw.model.ontology.ComponentClassType.CHAMBER);
    }


//--simple--preserve

}
