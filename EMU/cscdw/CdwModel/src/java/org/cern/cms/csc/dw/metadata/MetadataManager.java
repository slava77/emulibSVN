package org.cern.cms.csc.dw.metadata;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.cern.cms.csc.dw.util.ClassUtil;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.persistence.Entity;
import org.cern.cms.csc.dw.model.annotation.FactAnn;
import org.cern.cms.csc.dw.model.base.EntityBase;
import org.cern.cms.csc.dw.model.fact.Fact;

@SuppressWarnings("unchecked")
public class MetadataManager {

    private static final String CLASS_ROOT        = "org.cern.cms.csc";
    private static final String FACTS_RESOURCE    = "/org/cern/cms/csc/dw/metadata/facts.properties";
    private static final String ENTITIES_RESOURCE = "/org/cern/cms/csc/dw/metadata/entities.properties";

    private static Map<Class, FactMd> factClasses = null;

    public MetadataManager() {
        if (factClasses == null) {
            factClasses = new HashMap<Class, FactMd>();
            FileReader fr = null;
            try {
                Properties p = new Properties();
                InputStream in = MetadataManager.class.getResourceAsStream(FACTS_RESOURCE);
                if (in != null) {
                    p.load(in);
                    for (Object key: p.keySet()) {
                        String className = p.getProperty((String) key);
                        Class c = MetadataManager.class.getClassLoader().loadClass(className);
                        factClasses.put(c, new FactMd(c));
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(MetadataManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public final Collection<FactMd> getFactMDs() {
        return Collections.unmodifiableCollection(factClasses.values());
    }

    public final FactMd getFactMd(Class clazz) {
        return factClasses.get(clazz);
    }

    private static boolean hasAsSuperClass(Class clazz, Class clazzSuper) {
        if (clazz.equals(clazzSuper)) return true;
        if (clazz.getSuperclass() == null) return false;
        return hasAsSuperClass(clazz.getSuperclass(), clazzSuper);
    }

    public static void main(String[] args) {

        try {
            
            if (args.length < 1) {
                throw new IllegalArgumentException("Please supply base directory to store property file");
            }

            String baseDir = args[0];
            String factsFile = baseDir + FACTS_RESOURCE;
            String entitiesFile = baseDir + ENTITIES_RESOURCE;

            Properties pFacts = new Properties();
            Properties pEntities = new Properties();

            for (Class c : ClassUtil.packageClassses(CLASS_ROOT, true)) {
                if (hasAsSuperClass(c, EntityBase.class) && 
                    c.isAnnotationPresent(Entity.class) &&
                    !Modifier.isAbstract(c.getModifiers())) {

                    if (c.getSuperclass().equals(Fact.class) && c.isAnnotationPresent(FactAnn.class)) {
                        pFacts.setProperty(c.getSimpleName(), c.getName());
                    }

                    pEntities.setProperty(c.getSimpleName(), c.getName());
                    
                }
            }

            {
                File f = new File(factsFile);
                FileWriter fw = new FileWriter(f);
                pFacts.store(fw, "Fact Classes\nGenerated by " + MetadataManager.class.getName());
            }

            {
                File f = new File(entitiesFile);
                FileWriter fw = new FileWriter(f);
                pEntities.store(fw, "Entity Classes\nGenerated by " + MetadataManager.class.getName());
            }

            System.out.print(MetadataManager.class.getSimpleName());
            System.out.println(": " + String.valueOf(pFacts.size()) + " Fact classes found and saved to " + factsFile);

            System.out.print(MetadataManager.class.getSimpleName());
            System.out.println(": " + String.valueOf(pEntities.size()) + " Entity classes found and saved to " + entitiesFile);

        } catch (IOException ex) {
            Logger.getLogger(MetadataManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
