2013-05-03
Modified to use rpm-installed libraries and to create an rpm.
Build by issuing
  TriDAS/emu/fast_daq/build.sh
    Executable will be TriDAS/emu/fast_daq/csc_display/lib/csc_display
    RPM will be in TriDAS/emu/fast_daq/rpm
When the RPM is installed, run the program by
  /opt/xdaq/bin/csc_display.sh
When the RPM is not installed, just run the program directly:
  TriDAS/emu/fast_daq/csc_display/lib/csc_display


========================================================================
Don't use these anymore, but kept for history:
Old cookbook instructions for setting up csc_display on emume11 with standalone libs
jhaley@cern.ch
========================================================================

ln -s ~cscme11/CMSSW_5_0_0_pre6 ~/CMSSW

cd ~/public/me11/     (or where you installed TriDAS)

echo ".  /opt/cern/root/bin/thisroot.sh" >> setup.sh
echo ". $BUILD_HOME/emu/fast_daq/csc_display/set_env.sh" >> setup.sh

source setup.sh

cd $BUILD_HOME/emu/daq/reader
make Standalone=yes
mv lib/linux/x86_64_slc5/libemudaqreader_sa.a $BUILD_HOME/emu/fast_daq/csc_display/lib/

cd $BUILD_HOME/emu/dqm/cmssw
make

cd $BUILD_HOME/emu/dqm/common
make Standalone=yes
mv lib/linux/x86_64_slc5/libemudqmcommon_sa.a $BUILD_HOME/emu/fast_daq/csc_display/lib/

cd $BUILD_HOME/emu/fast_daq/daq_common
make

mkdir -p ~/bin
cd $BUILD_HOME/emu/fast_daq/csc_display
make install

========================================================================



Old note: if you modify J_Display, you need to regenerate the J_DisplayDict files:
cd $BUILD_HOME/emu/fast_daq/csc_display
rootcint -f src/J_DisplayDict.cc -c include/J_Display.h
==> This is now done in the Makefile


Old instructions:
========================================================================
Support of CMSSW Unpacking in CSC Event Display (tested on SLC5 64-bit)
========================================================================

Pre-requisites:
- CMSSW sources EventFilter/CSCRawToDigi, DataFormats/CSCDigi - either perform checkout from CMSSW repository for most recent version or use included tar-ball
- TriDAS/emu/dqm (cmssw) - to compile CMSSW unpacking sources outside of CMSSW building environment (will need to use libCSCDigi and libCSCRawToDigi libraries)
- TriDAS/emu/daq (reader) - to compile readout library (will need to use libemudaqreader library)

Building:
- unpack tar-ball or checkout CMSSW sources in $HOME directory
- make symbolic link (ex. `ln -s ${HOME}/CMSSW_5_0_0_pre6 ${HOME}/CMSSW`)
- checkout required emu xdaq modules from TriDAS/emu tree
- compile readout library: `cd TriDAS/emu/daq/reader; make Standalone=yes`
  (remove older version of libemudaqreader_sa.a from fast_daq/csc_display/lib
folder)
- compile unpacking library: cd TriDAS/emu/dqm/cmssw; make
- recompile fast_daq/daq_common (set DAQHOME=$(path_to_fast_daq) and DATADIR=$(path_to_data_files_folder) variables)
- recompile fast_daq/csc_display (should place compiled binaries in $HOME/bin)

Notes:
CMSSW unpacking support is implemented by copying of unpacked by CMSSW data structures into existing 'csc_event_type upevt_' structure (defined in daq_common/include/csc_event.h).
Check csc_display/src/unpack-data.cc `int get_next_event_cmssw()` function implementation for example of unpacking
To revert to the old unpacking code modify  csc_display/src/event_display_cb.cc by editing corresponding function calls
---
// istat = get_next_event(buf, first_time); // unpack only if needed (old code)
istat = get_next_event_cmssw(fd->data(), fd->dataLength(), first_time); // unpack only if needed (new code)
---
For further development check daq_common/src/get_next_event.c code for older unpacking code
and look for new unpacking format definition in ${CMSSW}/src/EventFilter/CSCRawToDigi, ${CMSSW}/DataFormats/CSCDigi code
also TriDAS/emu/dqm/cscanalyzer can be used as example of usage of different unpacked by CMSSW data 

===================================================
