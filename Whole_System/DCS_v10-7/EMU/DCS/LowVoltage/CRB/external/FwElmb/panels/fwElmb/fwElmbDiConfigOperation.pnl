V 10
1
LANG:1 23 fwElmbDiConfigOperation
PANEL,-1 -1 487 490 N "_3DFace" 1
"$sDpName"
E E E E E 1 -1 -1 0  0 0
""0  1
E "bool getOPCGroup(string &OPCgroup)
{
// Local Variables
// ---------------
	const string REFERENCE_DELIMETER = \"$\";
	const string OPC_GROUPS = \"_OPCGroup\";
	
	bool bStatus = false;
		
	string sAddrReference;
	
	dyn_string dsAllOPCgroups;
	dyn_string dsReference;
	
// Executable Code
// ---------------
	// Get group name to which this DO config belongs
	dpGet($sDpName + \".enable.read:_address.._reference\", sAddrReference);
	
	// Split the value found in order to obtain the OPC group
	dsReference = strsplit(sAddrReference, REFERENCE_DELIMETER);
	OPCgroup = dsReference[dynlen(dsReference)-1];
	
	// Get a list of all OPC groups defined in this system
	dsAllOPCgroups = dpNames(\"*\", OPC_GROUPS);
		
	// Create the DP name with system of the group the ai config belongs
	OPCgroup = getSystemName() + \"_\" + OPCgroup;
		
	// Check this group actually exists
	if (dynContains(dsAllOPCgroups, OPCgroup) > 0)
		bStatus = true;

	// Return to calling routine
	return (bStatus);
}
" 0
 2
"CBRef" "0"
"EClose" E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 1
"txtTitle"
""
1 55 30 E E E 1 E 1 E N "schwarz" E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 12 338 36
0 2 0 "0s" 0 0 0 64 0 0  12 12 1
2
LANG:1 84 -*-Arial-*-r-normal-*-21-*-100-100-*-*-iso8859-1|-21,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 70 -microsoft windows-arial-medium-r-normal-*-*-160-100-100-*-*-iso8859-1
0 ""
2
LANG:1 34 Elmb Digital Input Operation Panel
LANG:0 11 DP-Funktion
2 28
"txtDebounceTimer"
""
1 10 180 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 182 107 199
0 2 0 "0s" 0 0 0 192 0 0  12 182 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 15 Debounce timer:
30 34
"frmDigInTransmissionType"
""
1 10 400 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
27 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 1.10047846889952 0 1 -1.00478468899522 0 0 E 10 290 220 400
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 31 Digital Input Transmission Type
2 35
"txtEventTimer"
""
1 20 370 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 372 110 389
0 2 0 "0s" 0 0 0 192 0 0  22 372 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 16 Event timer (s):
30 48
"frmMode"
""
1 10 280 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
41 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 0.855018587360595 0 1 1.44981412639405 0 0 E 10 210 280 280
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 37 Global Digital Input Interrupt Enable
2 53
"lblNodeID"
""
1 10 50 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 52 58 68
0 2 0 "0s" 0 0 0 64 0 0  12 52 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 8 Node Id:
2 54
"txtNodeID"
""
1 70 50 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
46 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
// Local Variables
// ---------------
	string sDpName = $sDpName;
	string nodeId;
	
// Executable Code
// ---------------
	// Remove the config part from the DP name to get the ELMB DP name
	strreplace(sDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_DI_CONFIG_NAME, \"\");
	
	// Get the node ID
	dpGet(sDpName + \".id\", nodeId);
	
	// Display the text
	this.text = nodeId;
	
	// Return to calling routine
	return;
}" 0
 E 0 1 1 0 1 E U  0 E 72 52 128 68
0 2 0 "0s" 0 0 0 64 0 0  72 52 1
1
LANG:1 87 -*-Arial-bold-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,697,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
1 485 1 "" 0
0
1 486 1 "" 1
0
1 487 1 "" 2
0
1 488 1 "" 3
0
1 489 1 "" 4
0
1 490 1 "" 5
0
1 491 1 "" 6
0
1 492 1 "" 7
0
1 493 1 "" 8
0
22 29
"cmbDebounceTimer"
""
1 160 180 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 158 178 242 205
0

"main()
{
// Local Variables
// ---------------
	int i;
	int iTemp;
	
	unsigned uDebounceTimer;
	
	string sTemp;
	
	dyn_string dsDebounceTimerValues;

// Executable Code
// ---------------
	// Enter all allowed values into the debounce timer array
	for (i = 0; i <= 255; i++) {
		sprintf(sTemp, \"%d\", i);
		dynAppend(dsDebounceTimerValues, sTemp);
	}
	
	// Enter the values into the combo box
	this.items = dsDebounceTimerValues;
	
	// Return to calling routine
	return;
}
" 0

E
E
 0 0
22 36
"cmbEventTimer"
""
1 120 370 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
29 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 118 368 202 395
0

"main()
{
// Local Variables
// ---------------
	int i;
	int iTemp;
	
	unsigned uEventTimer;
	
	string sTemp;
	
	dyn_string dsEventTimerValues;

// Executable Code
// ---------------
	// Enter all allowed values into the event timer array
	dynAppend(dsEventTimerValues, \"\");
	for (i = 0; i <= 32; i++) {
		sprintf(sTemp, \"%d\", i);
		dynAppend(dsEventTimerValues, sTemp);
	}
	
	// Enter the values into the combo box
	this.items = dsEventTimerValues;
	this.selectedPos = 1;

	// Return to calling routine
	return;
}
" 0

E
E
 0 0
19 37
"radTransmissionType"
""
1 20 310 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
30 0 0 0 0 0
E E E
0
1
LANG:1 113 For normal operation use -After Sync. message- On RTR transmission the data triggered by the event timer rollover

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 18 308 202 362
2
T 
1
LANG:1 24 After Sync. message only

0 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 17 After RTR message

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E "main(int argiButton)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Check which selection has been made
	switch (argiButton) {
		case 0:
			// Make the event timer combo box disabled
			cmbEventTimer.enabled = false;
			txtEventTimer.enabled = false;
			break;
		case 1:
			// Enable the event timer combo box
			cmbEventTimer.enabled = true;
			txtEventTimer.enabled = true;
			break;
	}

	// Return to calling routine
	return;
}" 0

19 49
"glbIrqMode"
""
1 20 230 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 18 228 102 272
2
T 
1
LANG:1 6 Enable

0 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 7 Disable

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
1 484 0 "" 0
0
13 65
"cmdWrite"
""
1 418 410 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
49 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 416 408 482 442

T 
1
LANG:1 5 Write
"main()
{
// Local Variables
// ---------------
  bool bRadGlobalIrq;
	
  int iDebounceTimer = cmbDebounceTimer.text;
  int radGlobalIrq = glbIrqMode.number;
  int iTransmissionTypePos = radTransmissionType.number;
  int iTransmissionType;
  int iEventTimer = -1;
	
  unsigned uState;
  unsigned uPortFInterruptMask;
  unsigned uPortAInterruptMask;
  unsigned uPortAInEnMask;

  string sElmbDpName = $sDpName;
  string sPortFInterruptMask;
  string sPortAInterruptMask;
  string sPortAInEnMask;

  dyn_float df;

  dyn_string ds;

// Executable Code
// ---------------
// Check if values should be saved to EEPROM
  ChildPanelOnCentralReturn(\"vision/MessageInfo3\",
                            \"Question\",
                            makeDynString(\"Save these settings to the EEPROM? \\n(i.e. make default settings)\", \"Yes\", \"No\", \"Cancel\"),
                            df, ds);

  // If cancel clicked, do not set configuration
  if (df[1] == 2)
    return;

  // Disable necessary controls until configuration set
  this.enabled = false;
  cmdRead.enabled = false;
			
  // Remove the config part from the DP name to get the ELMB DP name
  strreplace(sElmbDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_DI_CONFIG_NAME, \"\");
	
  // Get current state of ELMB
  dpGet(sElmbDpName + \".state.value\", uState);

  // Set ELMB pre-operational	
  dpSet(sElmbDpName + \".management\", 128);

  txtMessage.text = \"This will take a few seconds. Please wait...\";

  // 'Request' an update on the values for Port F & A Interrupt, and Port A Input Enable Masks
  setValue(\"tglPortFInterruptMask.txtInputValue\", \"text\", \"\");
  setValue(\"tglPortAInterruptMask.txtInputValue\", \"text\", \"\");
  setValue(\"tglPortAInEnMask.txtInputValue\", \"text\", \"\");

  // iTransmissionType = 2 not set
  if (iTransmissionTypePos == 0)
    iTransmissionType = 1;
  else if (iTransmissionTypePos == 1)
    iTransmissionType = 255;
  else 
    iTransmissionType = 2;
	
  if ((cmbEventTimer.text != \"\") && (radTransmissionType.number == \"1\"))
    iEventTimer = cmbEventTimer.text;
	
  // start saving those parameters that have values
  // mode
  if (radGlobalIrq != 2) {
    // enable is 0 so it's swapped
    bRadGlobalIrq = !radGlobalIrq;
    dpSet($sDpName + \".enable.write\", bRadGlobalIrq);
    delay(0, 50);
  }
	
  // transmission type
  if (iTransmissionType != 2) {
    dpSet($sDpName + \".transmissionType.write\", iTransmissionType);
    delay(0, 50);
  }
	
  // debounce timer
  if (iDebounceTimer) {
    dpSet($sDpName + \".debounceTimer.write\", iDebounceTimer);
    delay(0, 50);
  }

  // event timer
  if (iEventTimer) {
    if ((iEventTimer != -1) && (radTransmissionType.number == \"1\")) {
      dpSet($sDpName + \".eventTimer.write\", iEventTimer * 1000);
      delay(0, 50);
    }
  }
  
  // Port F Interrupt Mask
  getValue(\"tglPortFInterruptMask.txtOutputValue\", \"text\", sPortFInterruptMask);
  if (sPortFInterruptMask != \"Invalid\") {
    uPortFInterruptMask = sPortFInterruptMask;
    dpSet($sDpName + \".portFInterruptMask.write\", uPortFInterruptMask);
    delay(0, 50);
  }
  
  // Port A Interrupt Mask
  getValue(\"tglPortAInterruptMask.txtOutputValue\", \"text\", sPortAInterruptMask);
  if (sPortAInterruptMask != \"Invalid\") {
    uPortAInterruptMask = sPortAInterruptMask;
    dpSet($sDpName + \".portAInterruptMask.write\", uPortAInterruptMask);
    delay(0, 50);
  }
  
  // Port A Input Enable Mask
  getValue(\"tglPortAInEnMask.txtOutputValue\", \"text\", sPortAInEnMask);
  if (sPortAInEnMask != \"Invalid\") {
    uPortAInEnMask = sPortAInEnMask;
    dpSet($sDpName + \".portAInEnMask.write\", uPortAInEnMask);
    delay(0, 50);
  }

  // Save values to EEPROM if requested
  if (df[1] == 1.0) {
    dpSet(sElmbDpName + \".eeprom.save\", ELMB_SAVE_EEPROM);
    delay(0, 50);
  }
	
  // Set the ELMB back to it's original state, but only if it was stopped or operational.
  // Otherwise, leave it as preoperational
  if ((uState == 0x84) || (uState == 0x04))
    dpSet(sElmbDpName + \".management\", 2);
  else if ((uState  == 0x85) || (uState == 0x05))
    dpSet(sElmbDpName + \".management\", 1);
		
  // Indicate success to user
  txtMessage.text = \"Info: DI configuration set\";
	
  // Re-enable controls
  this.enabled = true;
  cmdRead.enabled = true;

  // Return to calling routine
  return;
}" 0
 E E E
13 66
"cmdRead"
""
1 350 410 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
50 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 348 408 414 442

T 
1
LANG:1 4 Read
"main()
{
// Local Variables
// ---------------
  bool bDigIrqEnable;
  bool bActive;
	
  int i;
  int iTemp;
	
  unsigned uState;
  unsigned uDebounceTimer;
  unsigned uTransmissionType;
  unsigned uEventTimer;
  unsigned uPortFInterruptMask;
  unsigned uPortAInterruptMask;
  unsigned uPortAInEnMask;
	
  string sElmbName;
  string sTemp;
  string sMessage;
  
  anytype aValue;
	
  dyn_string dsTemp;
  dyn_string dsExceptionTemp;
  dyn_string dsExceptionInfo;
			
// Executable Code
// ---------------
  // Disable certain controls while the read takes place
  this.enabled = false;
  cmdWrite.enabled = false;
	
  // Give some information to the user
  txtMessage.text = \"Reading Digital Input Settings. Please wait...\";
  fwOpenProgressBar(\"Reading Digital Input Settings\", \"In progress. Please wait...\", 1);

  // Get the parent (ELMB) that this config comes from
  fwDevice_getParent($sDpName, sElmbName, dsExceptionInfo);			
	
  // Get current state of ELMB
  dpGet(sElmbName + \".state.value\", uState);
			
  // Set node to Pre-Operational:
  dpSetWait(sElmbName + \".management\", 128);
  
  // Global digital interrupt enable
  fwElmb_elementSQ($sDpName + \".enable.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    bDigIrqEnable = aValue;
    glbIrqMode.enabled = true;
    if (bDigIrqEnable)
      glbIrqMode.number = 0;
    else
      glbIrqMode.number = 1;
  } else {
    glbIrqMode.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Debounce timer
  fwElmb_elementSQ($sDpName + \".debounceTimer.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    uDebounceTimer = aValue;
    txtDebounceTimer.enabled = true;
    cmbDebounceTimer.enabled = true;
    dsTemp = cmbDebounceTimer.items;
    sprintf(sTemp, \"%d\", uDebounceTimer);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp > 0)
      cmbDebounceTimer.selectedPos = iTemp;
  } else {
    txtDebounceTimer.enabled = false;
    cmbDebounceTimer.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Transmission type
  fwElmb_elementSQ($sDpName + \".transmissionType.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    uTransmissionType = aValue;
    radTransmissionType.enabled = true;
    switch (uTransmissionType) {
      case 1:	// Sync response only
        radTransmissionType.number = 0;
        txtEventTimer.enabled = false;
        cmbEventTimer.enabled = false;
        break;
      case 255:	// Sync response and event timer
        radTransmissionType.number = 1;
        txtEventTimer.enabled = true;
        cmbEventTimer.enabled = true;
    }
  } else {
    radTransmissionType.enabled = false;
    txtEventTimer.enabled = false;
    cmbEventTimer.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Event timer
  fwElmb_elementSQ($sDpName + \".eventTimer.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    uEventTimer = aValue;
    txtEventTimer.enabled = true;
    cmbEventTimer.enabled = true;
    dsTemp = cmbEventTimer.items;
    uEventTimer /= 1000;
    sprintf(sTemp, \"%d\", uEventTimer);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp > 0)
      cmbEventTimer.selectedPos = iTemp;
  } else {
    txtEventTimer.enabled = false;
    cmbEventTimer.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  // Port F interrupt mask. Check if address active first
  dpGet($sDpName + \".portFInterruptMask.read:_address.._active\", bActive);
  if (bActive) {
    fwElmb_elementSQ($sDpName + \".portFInterruptMask.read\", 2, aValue, dsExceptionTemp);
    if (dynlen(dsExceptionTemp) == 0) {
      uPortFInterruptMask = aValue;
      setValue(\"tglPortFInterruptMask.txtInputValue\", \"text\", uPortFInterruptMask);
    } else {
      setValue(\"tglPortFInterruptMask.txtInputValue\", \"text\", \"Invalid\");
      dynAppend(dsExceptionInfo, dsExceptionTemp);
    }
  } else {
    setValue(\"tglPortFInterruptMask.txtInputValue\", \"text\", \"Invalid\");
  }
  
  // Port A interrupt mask. Check if address active first
  dpGet($sDpName + \".portAInterruptMask.read:_address.._active\", bActive);
  if (bActive) {
    fwElmb_elementSQ($sDpName + \".portAInterruptMask.read\", 2, aValue, dsExceptionTemp);
    if (dynlen(dsExceptionTemp) == 0) {
      uPortAInterruptMask = aValue;
      setValue(\"tglPortAInterruptMask.txtInputValue\", \"text\", uPortAInterruptMask);
    } else {
      setValue(\"tglPortAInterruptMask.txtInputValue\", \"text\", \"Invalid\");
      dynAppend(dsExceptionInfo, dsExceptionTemp);
    }
  } else {
    setValue(\"tglPortAInterruptMask.txtInputValue\", \"text\", \"Invalid\");
  }
  
  // Port A input enable mask. Check if address active first
  dpGet($sDpName + \".portAInterruptMask.read:_address.._active\", bActive);
  if (bActive) {
    fwElmb_elementSQ($sDpName + \".portAInEnMask.read\", 2, aValue, dsExceptionTemp);
    if (dynlen(dsExceptionTemp) == 0) {
      uPortAInEnMask = aValue;
      setValue(\"tglPortAInEnMask.txtInputValue\", \"text\", uPortAInEnMask);
    } else {
      setValue(\"tglPortAInEnMask.txtInputValue\", \"text\", \"Invalid\");
      dynAppend(dsExceptionInfo, dsExceptionTemp);
    }
  } else {
    setValue(\"tglPortAInEnMask.txtInputValue\", \"text\", \"Invalid\");
  }
    
  fwElmbUser_updateFirmwareInfo(sElmbName);

  // Set the ELMB back to it's original state, but only if it was stopped or operational.
  // Otherwise, leave it as preoperational
  if ((uState == 0x84) || (uState == 0x04))
    dpSet(sElmbName + \".management\", 2);
  else if ((uState  == 0x85) || (uState == 0x05))
    dpSet(sElmbName + \".management\", 1);

  // Check for errors
  if (dynlen(dsExceptionInfo) > 0) {
    fwCloseProgressBar(\"Problems reading DI settings\");
    txtMessage.text = \"Problems reading DI settings\";
    fwExceptionHandling_display(dsExceptionInfo);
  } else {
    fwCloseProgressBar(\"DI settings successfully read\");
    txtMessage.text = \"DI settings successfully read\";
  }
		
  // Re-enable controls
  this.enabled = true;
  cmdWrite.enabled = true;

  // Return to calling routine
  return;
}
" 0
 E E E
13 67
"cmdClose"
""
1 350 450 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
51 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 348 448 482 482

T 
1
LANG:1 5 Close
"main()
{
	PanelOff(myPanelName());
}
" 0
 E E E
1 494 2 "" 9
0
1 495 2 "" 10
0
1 496 2 "" 11
0
1 497 2 "" 12
0
1 498 2 "" 13
0
1 499 2 "" 14
0
1 500 2 "" 15
0
1 501 2 "" 16
0
1 502 2 "" 17
0
1 503 2 "" 22
0
1 504 2 "" 23
0
1 505 2 "" 24
0
1 506 2 "" 25
0
1 507 2 "" 26
0
1 508 2 "" 27
0
1 509 2 "" 28
0
1 510 2 "" 29
0
1 511 2 "" 30
0
30 442
"frmPortFInterruptMask"
""
1 10 280 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
98 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 0.855018587360595 0 1.01449275362319 241.449814126394 -3.04347826086953 0 E 10 210 280 280
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 21 Port F Interrupt Mask
2 443
"lblPortFInterruptMask"
""
1 260 250 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
100 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 262 252 308 268
0 2 0 "0s" 0 0 0 64 0 0  262 252 1
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 10 Interrupt:
1 512 3 "" 9
0
1 513 3 "" 10
0
1 514 3 "" 11
0
1 515 3 "" 12
0
1 516 3 "" 13
0
1 517 3 "" 14
0
1 518 3 "" 15
0
1 519 3 "" 16
0
1 520 3 "" 17
0
1 521 3 "" 22
0
1 522 3 "" 23
0
1 523 3 "" 24
0
1 524 3 "" 25
0
1 525 3 "" 26
0
1 526 3 "" 27
0
1 527 3 "" 28
0
1 528 3 "" 29
0
1 529 3 "" 30
0
2 462
"lblPortAInterruptMask"
""
1 260 370 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
103 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 262 372 308 388
0 2 0 "0s" 0 0 0 64 0 0  262 372 1
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 10 Interrupt:
1 530 4 "" 9
0
1 531 4 "" 10
0
1 532 4 "" 11
0
1 533 4 "" 12
0
1 534 4 "" 13
0
1 535 4 "" 14
0
1 536 4 "" 15
0
1 537 4 "" 16
0
1 538 4 "" 17
0
1 539 4 "" 22
0
1 540 4 "" 23
0
1 541 4 "" 24
0
1 542 4 "" 25
0
1 543 4 "" 26
0
1 544 4 "" 27
0
1 545 4 "" 28
0
1 546 4 "" 29
0
1 547 4 "" 30
0
30 481
"frmPortAInterruptMask"
""
1 10 280 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
106 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 0.855018587360595 0 1.59420289855072 241.449814126394 -44.7826086956522 0 E 10 210 280 280
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 33 Port A Interrupt/Output Line Mask
2 482
"lblPortAInputEnableMask"
""
1 258 318 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
108 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 260 320 306 336
0 2 0 "0s" 0 0 0 64 0 0  260 320 2
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 9 Input = 0
1
LANG:1 84 -*-Arial-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 10 Output = 1
2 483
"txtMessage"
""
1 10 409.882352941177 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
109 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 0.941176470588235 0 24 1 E 10 410 340 440
0 2 2 "0s" 0 0 0 64 0 0  10 410 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group2"
"objects\\fwGeneral\\fwHelpButton.pnl" 394 10 T 44 1 0 1 59 0
1
"$sPanelRelativePath""fwElmb/fwElmbDiConfigOperation"
3 1 ""
"fwElmb\\objects\\fwElmbVersionsRef.pnl" 280 80 T 47 1 0 1 -40 20
1
"$sDpName""$sDpName"
3 2 "tglPortFInterruptMask"
"fwElmb/objects/fwElmbToggleByteRef.pnl" 252 232 T 96 1 0 1 68 8
1
"$bShowOutput"""
3 3 "tglPortAInterruptMask"
"fwElmb/objects/fwElmbToggleByteRef.pnl" 312 292 T 101 1 0 1 8 68
1
"$bShowOutput"""
3 4 "tglPortAInEnMask"
"fwElmb/objects/fwElmbToggleByteRef.pnl" 252 232 T 104 1 0 1 68 88
1
"$bShowOutput"""
0