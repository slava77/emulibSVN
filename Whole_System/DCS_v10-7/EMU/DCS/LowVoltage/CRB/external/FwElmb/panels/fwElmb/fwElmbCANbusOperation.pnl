V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 694 570 N "_3DFace" 1
"$sDpName"
E E E E E 1 -1 -1 0  0 0
""0  1
E "void pnlBusCommand(int iAction)
{
// Local Variables
// ---------------
	int iLines, i;

	string sDpe = \".management\";

// Executable Code
// ---------------
	// Action the command
	dpSet($sDpName + sDpe, iAction);

	// Get all ELMBs shown
	iLines = tabCANSystem.lineCount;
	
	// Set the status text for each
	for (i = 1; i <= iLines; i++)
		tabCANSystem.cellValueRC(iLines, \"status\") = \"wait...\";

	// Return to calling routine
	return;
}

void pnlNodeCommand(int iAction)
{
// Local Variables
// ---------------
	string sElmbName;
	string sElmbDpName;
	string sDpe = \".management\";
	
	dyn_int diRows;

// Executable Code
// ---------------
	// Get any selected rows
	diRows = tabCANSystem.getSelectedLines;
	if (dynlen(diRows) > 0) {
		// Get the first ELMB in the list
		sElmbDpName = tabCANSystem.cellValueRC(diRows[1], \"elmbDpName\");					
		sElmbName = tabCANSystem.cellValueRC(diRows[1], \"elmbName\");
	
		// Indicate the action that is about to be completed
		switch (iAction) {
			case 129:
				txtLastAction.text = sElmbName + \" reset\";
				break;
			case 1:
				txtLastAction.text = sElmbName + \" started\";
				break;
			case 2:
				txtLastAction.text = sElmbName + \" stopped\";
				break;
		}
		
		txtLastAction.visible = true;
	
		// Action the command
		dpSet(sElmbDpName + sDpe, iAction); 

		// Set the status text for the specific ELMB
		tabCANSystem.selectLineN(diRows[1]);
		tabCANSystem.cellValueRC(diRows[1], \"status\") = \"wait...\";
	} else {
		// Show user what's wrong (and therefore why the action cannot be completed)
		ChildPanelOnCentral(\"vision/MessageInfo1\",
												\"Warning\",
												makeDynString(\"No ELMB node selected\"));
	}
	
	// Return to calling routine
	return;
}
" 0
 2
"CBRef" "0"
"EClose" E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 0
"txtTitle"
""
1 51 41 E E E 1 E 1 E N "schwarz" E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 13 23 308 47
0 2 0 "0s" 0 0 0 64 0 0  13 23 1
2
LANG:1 84 -*-Arial-*-r-normal-*-21-*-100-100-*-*-iso8859-1|-21,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 70 -microsoft windows-arial-medium-r-normal-*-*-160-100-100-*-*-iso8859-1
0 ""
2
LANG:1 27 Elmb CANbus Operation Panel
LANG:0 11 DP-Funktion
30 1
"frmNode"
""
1 400 500 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
1
1
LANG:1 56 Select an ELMB on the table to send a management message

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 400 440 684 500
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 29 Send message to selected node
30 6
"frmBus"
""
1 11 560 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
7 0 0 0 0 0
E E E
1
1
LANG:1 48 Send management messages to all nodes on the bus

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 11 440 300 560
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 36 Send message to all nodes on the bus
2 12
"txtSyncInterval"
""
1 37 496 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 39 498 155 514
0 2 0 "0s" 0 0 0 64 0 0  39 498 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 20 Sync. interval (ms):
2 13
"txtNodeGuardInterval"
""
1 37 526 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 39 528 185 544
0 2 0 "0s" 0 0 0 64 0 0  39 528 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 25 Node guard interval (ms):
1 23 0 "" 0
0
1 24 1 "" 0
0
2 18
"txtLastAction"
""
1 310 500 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 312 502 679 528
0 2 0 "0s" 0 0 0 64 0 0  312 502 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
30 21
"frmShowColumns"
""
1 510 77 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
19 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 510 10 650 80
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 12 Show Columns
25 2
"tabCANSystem"
""
1 -9 30 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main()
{
// Local Variables
// ---------------
	int iRow, iColumn;
	int iReturn;
	
	string sName = this.name;
	string sColumnName;
	string sElmb;
	
	dyn_string dsMenu;

// Executable Code
// ---------------
	// Get the column name that has been clicked
	getValue(sName, \"currentColumn\", sColumnName);
	
	// Check if this column should have a menu
	if (sColumnName == \"elmbName\") {
		// Get the row and then the ELMB
		getValue(sName, \"currentCell\", iRow, iColumn);
		getValue(sName, \"cellValueRC\", iRow, \"elmbDpName\", sElmb);
		
		if ((strlen(sElmb) > 0) && dpExists(sElmb)) {
		
			// Setup and display the menu
			dsMenu = makeDynString(\"PUSH_BUTTON, Show monitor information, 1, 1\");
			if (popupMenu(dsMenu, iReturn) == 0) {
				if (iReturn == 1) {
				
					// Display the correct panel
					ChildPanelOnCentral(\"fwElmb/fwElmbMonitorNodeInformation.pnl\",
															\"Monitor Information\",
															makeDynString(\"$sDpName:\" + sElmb));
				}
			}
		}
	}

	// Return to calling routine
	return;
}" 0
 E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 8 88 686 432
"main()
{
// Local Variables
// ---------------
  int i;
	
  string sBusName;
	
  dyn_string dsTemp;
  dyn_string dsExceptionInfo;
  dyn_string dsElmbs;

// Executable Code
// ---------------
  // Connect to the children of the view
  this.tableMode = TABLE_SELECT_BROWSE;
  this.selectByClick = 1;

  // Get all Elmbs in this Bus
  dsTemp = strsplit($sDpName, fwDevice_HIERARCHY_SEPARATOR);
  sBusName = dsTemp[2];
  dsElmbs = dpNames(dsTemp[1] + fwDevice_HIERARCHY_SEPARATOR + sBusName + \"*\", ELMB_TYPE_NAME);
  this.deleteAllLines();

  // Check if any ELMBs exist	
  if (dynlen(dsElmbs) <= 0) {
    fwException_raise(dsExceptionInfo,
                      \"WARNING\",
                      \"No Elmbs were found on \\\"\" + sBusName + \"\\\"\\nControls locked!\", \"\");
    fwExceptionHandling_display(dsExceptionInfo);

    // Set controls as required				
    cmdBusReset.enabled = false;
    cmdBusStart.enabled = false;
    cmdBusStop.enabled = false;
    cmdNodeReset.enabled = false;
    cmdNodeStart.enabled = false;
    cmdNodeStop.enabled = false;
    txtSyncIntervalValue.enabled = false;
    txtNodeGuardIntervalValue.enabled = false;
    txtLastAction.text = \"Bus empty!\";
    txtLastAction.visible = true;
    tabCANSystem.enabled = false;
				
  } else {
				
    // Set controls to allow for operation
    cmdBusReset.enabled = true;
    cmdBusStart.enabled = true;
    cmdBusStop.enabled = true;
    cmdNodeReset.enabled = true;
    cmdNodeStart.enabled = true;
    cmdNodeStop.enabled = true;
    txtSyncIntervalValue.enabled = true;
    txtNodeGuardIntervalValue.enabled = true;
    txtLastAction.text = \"\";
    txtLastAction.visible = false;
    tabCANSystem.enabled = true;

    // Connect to the information for each ELMB
    for (i = 1; i <= dynlen(dsElmbs); i++) {

      dpConnect(\"cbkUpdateLine\",
                dsElmbs[i] + \".state.value\",
                dsElmbs[i] + \".bootup\",
                dsElmbs[i] + \".bootup:_online.._stime\",
                dsElmbs[i] + \".error\",
                dsElmbs[i] + \".error:_online.._stime\"); 
								
    } // End of 'for' loop through ELMBs
  }
	
  // Return to calling routine
  return;
}

void cbkUpdateLine(string argsState, int argiState,
                   string argsBootup, int argiBootup,
                   string argsBootupStime, string argsBootupTime,
                   string argsError, int argiError,
                   string argsErrorStime, string argsErrorTime)
{
// Local Variables
// ---------------
  int iAiCount;
  int iAiSdoCount;
  int iAoCount;
  int iDiCount;
  int iDoCount;
	
  string sError;
  string sBootup;
  string sStatus;	
  string sElmbName;
  string sElmbDpName;
  string sId;
	
  langString lsComment;
	
  dyn_string dsTemp;
	
// Executable Code
// ---------------
  // Get the name of the Elmb
  sElmbDpName = dpSubStr(argsState, DPSUB_SYS_DP);
  lsComment = dpGetDescription(sElmbDpName + \".\");
	
  // get the number of  Ai channels 
  dsTemp = dpNames(sElmbDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", ELMB_AI_TYPE_NAME);
  iAiCount = dynlen(dsTemp);
	
  // get the number of SDO Ai channels 
  dsTemp = dpNames(sElmbDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", ELMB_AI_SDO_TYPE_NAME);
  iAiSdoCount = dynlen(dsTemp);
			 
  // get the number of Ao channels
  dsTemp = dpNames(sElmbDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", ELMB_AO_TYPE_NAME);
  iAoCount = dynlen(dsTemp);
			
  // get the number of Di channels
  dsTemp = dpNames(sElmbDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", ELMB_DI_TYPE_NAME);
  iDiCount = dynlen(dsTemp);
			   					   
  // get the number of Do channels
  dsTemp = dpNames(sElmbDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", ELMB_DO_TYPE_NAME);
  iDoCount = dynlen(dsTemp);	 
			
  // get Elmb name
  dsTemp = strsplit(sElmbDpName, fwDevice_HIERARCHY_SEPARATOR);
  sElmbName = dsTemp[3];

  // Get the node ID
  dpGet(sElmbDpName + \".id\", sId);
  			  
  // Get the status
  if ((argiState  == 0x84) || (argiState == 0x04))
    sStatus = \"STOPPED\";
  else if ((argiState  == 0xff) || (argiState == 0x7f))
    sStatus = \"PREOP\";
  else if ((argiState  == 0x85) || (argiState == 0x05))
    sStatus = \"OP\";
  else if (argiState  == 0x01)
    sStatus = \"DISCON.\";
  else
    sStatus = \"UNKNOWN\";	
		    
  // Format the text to be displayed
  sprintf(sError, \"0x%02x @ %s\", argiError, argsErrorTime);
  sBootup = argiBootup + \" @ \" + argsBootupTime;

  // Update the relevant line
  tabCANSystem.updateLine(1,
                          \"elmbName\", sElmbName,
                          \"comment\", lsComment,
                          \"elmbId\", sId,
                          \"analogIn\", iAiCount,
                          \"analogInSdo\", iAiSdoCount,
                          \"analogOut\", iAoCount,
                          \"digitalIn\", iDiCount,
                          \"digitalOut\", iDoCount,
                          \"bootup\", sBootup,
                          \"status\", sStatus,
                          \"elmbError\", sError,
                          \"elmbDpName\", sElmbDpName);

  // Return to calling routine
  return;
}" 0
E 1 0 1 12 1 "elmbDpName" 10 0 0 "s" 1
LANG:1 10 elmbDpName
E
1
LANG:1 0 

121 "elmbName" 10 1 0 "s" 1
LANG:1 9 Elmb Name
E
1
LANG:1 0 

124 "comment" 10 0 0 "s" 1
LANG:1 7 Comment
E
1
LANG:1 0 

124 "elmbId" 2 1 0 "s" 1
LANG:1 2 ID
E
1
LANG:1 0 

27 "analogIn" 2 1 0 "s" 1
LANG:1 2 AI
E
1
LANG:1 44 Number of analog input channels of this ELMB

28 "analogInSdo" 6 1 0 "s" 1
LANG:1 6 AI_SDO
E
1
LANG:1 48 Number of SDO analog input channels of this ELMB

60 "analogOut" 2 1 0 "s" 1
LANG:1 2 AO
E
1
LANG:1 45 Number of analog output channels of this ELMB

32 "digitalIn" 2 1 0 "s" 1
LANG:1 2 DI
E
1
LANG:1 45 Number of digital input channels of this ELMB

28 "digitalOut" 2 1 0 "s" 1
LANG:1 2 DO
E
1
LANG:1 46 Number of digital output channels of this ELMB

32 "bootup" 15 1 0 "s" 1
LANG:1 6 Bootup
E
1
LANG:1 42 Bootup counter and time of the last bootup

180 "status" 6 1 0 "s" 1
LANG:1 6 Status
E
1
LANG:1 52 ELMB status (Operational/Stopped/PreOp/Disconnected)

84 "elmbError" 15 1 0 "s" 1
LANG:1 5 Error
E
1
LANG:1 73 ELMB error register and time of the last error message (0 means no error)

180 
26 26 "" 1 1
LANG:1 2 #1
8 30
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 1 1 7
1 0
13 3
"cmdNodeStart"
""
1 411 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 56 Select an ELMB on the table to send a management message

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 409 458 493 492

T 
1
LANG:1 5 Start
"main()
{
	pnlNodeCommand(1);
}
" 0
 E E E
13 4
"cmdNodeStop"
""
1 501 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 56 Select an ELMB on the table to send a management message

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 499 458 583 492

T 
1
LANG:1 4 Stop
"main()
{
	pnlNodeCommand(2);
}" 0
 E E E
13 5
"cmdNodeReset"
""
1 591 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 56 Select an ELMB on the table to send a management message

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 589 458 673 492

T 
1
LANG:1 5 Reset
"main()
{
	pnlNodeCommand(129);
}" 0
 E E E
13 7
"cmdBusStart"
""
1 22 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 20 458 104 492

T 
1
LANG:1 5 Start
"main()
{
	pnlBusCommand(1);
}" 0
 E E E
13 10
"cmdBusStop"
""
1 110 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 108 458 192 492

T 
1
LANG:1 4 Stop
"main()
{
	pnlBusCommand(2);
}" 0
 E E E
13 11
"cmdBusReset"
""
1 200 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 198 458 282 492

T 
1
LANG:1 5 Reset
"main()
{
	pnlBusCommand(129);
}" 0
 E E E
14 16
"txtSyncIntervalValue"
""
1 197 496 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 195 494 259 521
3 "0s" 0 0 0 0 0 -1  E "main()
{
// Local Variables
// ---------------
	int iSyncInterval;
	
// Executable Code
// ---------------
	// Get the current value of the sync interval
	dpGet($sDpName + \".syncInterval\", iSyncInterval);
	
	// Display the value in the text field
	txtSyncIntervalValue.text = iSyncInterval;

	// Return to calling routine
	return;
}" 0
 "main()
{
// Local Variables
// ---------------
	int iSyncInterval;
	
// Executable Code
// ---------------
	// Get the value entered into the text field
	iSyncInterval = txtSyncIntervalValue.text;
	
	dpSet($sDpName + \".syncInterval\", iSyncInterval);

	// Return to calling routine
	return;
}" 0

14 17
"txtNodeGuardIntervalValue"
""
1 197 526 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 195 524 259 551
3 "0s" 0 0 0 0 0 -1  E "main()
{
// Local Variables
// ---------------
	int iNodeGuardInterval;
	
// Executable Code
// ---------------
	// Get the current value of the node guard interval
	dpGet($sDpName + \".nodeGuardInterval\", iNodeGuardInterval);
	
	// Display the value in the text field
	txtNodeGuardIntervalValue.text = iNodeGuardInterval;

	// Return to calling routine
	return;

}" 0
 "main()
{
// Local Variables
// ---------------
	int iNodeGuardInterval;
	
// Executable Code
// ---------------
	// Get the value entered into the text field
	iNodeGuardInterval = txtNodeGuardIntervalValue.text;
	
	dpSet($sDpName + \".nodeGuardInterval\", iNodeGuardInterval);

	// Return to calling routine
	return;
}" 0

13 19
"cmdClose"
""
1 590 530 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 588 528 682 562

T 
1
LANG:1 5 Close
"main()
{
	PanelOff(myPanelName());
}" 0
 E E E
1 25 2 "" 0
0
20 22
"chkShowDescription"
""
1 520 30 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 518 28 642 72
2
T 
1
LANG:1 9 Elmb Name

1 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 7 Comment

0 
1
LANG:1 0 
E E
0 0 0 0 0
2
E E
E E
E"main(int button, bool state)
{
	switch (button) {
		case 0:	// ELMB name
			if (state)
				tabCANSystem.namedColumnVisibility(\"elmbName\", true);
			else
				tabCANSystem.namedColumnVisibility(\"elmbName\", false);
			break;
		case 1:	// Comment
			if (state)
				tabCANSystem.namedColumnVisibility(\"comment\", true);
			else
				tabCANSystem.namedColumnVisibility(\"comment\", false);
			break;
	}
}" 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group3"
"gedi\\EP_enter.ref" 330 460 T 13 1 0 1 -63 36
0
3 1 "Group4"
"gedi\\EP_enter.ref" 330 490 T 14 1 0 1 -63 36
0
3 2 "Group4"
"objects\\fwGeneral\\fwHelpButton.pnl" 638 10 T 19 1 0 1 20 0
1
"$sPanelRelativePath""fwElmb/fwElmbCANbusOperation"
0