V 11
1
LANG:1 8 (NoName)
PANEL,-1 -1 367 188 N "_3DFace" 2
"$sDpName"
"$sPower"
E E E E E 1 -1 -1 0  125 95
""0  1
E "void pnlDisplayAlertDetails()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	ChildPanelOnCentral(\"CMS_CSCfw_LV_CRB/fwElmbPSU/fwElmbPSUSumAlertDetails.pnl\",
											\"Alert Details\",
											makeDynString(\"$sDpName:\" + $sDpName + \".\" + $sPower));

	// Return to calling routine
	return;
}

void pnlDisplayValues(bool argbShow = true)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	if (argbShow) {
		txtCurrent.visible = true;
		txtVolts.visible = true;
	} else {
		txtCurrent.visible = false;
		txtVolts.visible = false;
	}

	// Return to calling routine
	return;
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
7 0
"ledPowerAndAlert"
""
1 125 60 E E E 1 E 1 E N "_WindowText" E N "FwStateOKNotPhysics" E E
 "main()
{
// Local Variables
// ---------------
	bool bAlert = true;
	bool bShowValues;
	bool bShowMilliAmps;
	
	int iReturn;
	int iFormat;
	
	string sText;
	string sAlertDetailsText;
	
	dyn_string dsMenu;

// Executable Code
// ---------------
	if (bAlert) {
		sAlertDetailsText = \"PUSH_BUTTON, Show alert details..., 1, 1\";
	} else {
		sAlertDetailsText = \"PUSH_BUTTON, Show alert details..., 1, 0\";
	}
	
	// Get the current display format settings
	dpGet($sDpName + \".\" + $sPower + \".showValues\", iFormat);
	if ((iFormat & EPSU_SHOW_VALUES) == 0)
		bShowValues = false;
	else
		bShowValues = true;
	if ((iFormat & EPSU_SHOW_MILLIAMPS) == 0)
		bShowMilliAmps = false;
	else
		bShowMilliAmps = true;

	// Set the menu as necessary
	if (bShowValues) {
		if (bShowMilliAmps) {
			dsMenu = makeDynString(	sAlertDetailsText,
															\"PUSH_BUTTON, Hide voltages/currents, 2, 1\",
															\"PUSH_BUTTON, Show Amps, 3, 1\");
		} else {
			dsMenu = makeDynString(	sAlertDetailsText,
															\"PUSH_BUTTON, Hide voltages/currents, 2, 1\",
															\"PUSH_BUTTON, Show milliAmps, 3, 1\");
		}
	} else {
		dsMenu = makeDynString(	sAlertDetailsText,
														\"PUSH_BUTTON, Show voltages/currents, 2, 1\");
	}

	// Display the popup menu
	if (popupMenu(dsMenu, iReturn) == 0) {
	
		// Action the required selection
		switch (iReturn) {
			case 1:
				pnlDisplayAlertDetails();
				break;
			case 2:
				if (bShowValues) {
					if (bShowMilliAmps) {
						iFormat = EPSU_SHOW_MILLIAMPS;
					} else {
						iFormat = 0x00;
					}
				} else {
					if (bShowMilliAmps) {
						iFormat = EPSU_SHOW_VALUES | EPSU_SHOW_MILLIAMPS;
					} else {
						iFormat = EPSU_SHOW_VALUES;
					}
				}
				break;
			case 3:
				if (bShowValues && bShowMilliAmps) {
					iFormat = EPSU_SHOW_VALUES;
				} else {
					iFormat = EPSU_SHOW_VALUES | EPSU_SHOW_MILLIAMPS;
				}
				break;
		}
		
		dpSet($sDpName + \".\" + $sPower + \".showValues\", iFormat);
	}

	// Return to calling routine
	return;
}" 0
 E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"bool NEW_SWITCHING=true;

main()
{
// Local Variables
// ---------------
	int iFormat;
	
	string sPowerDpe;
	string sVoltDpe;
	string sCurrentDpe;

// Executable Code
// ---------------
	// Set the title text
	lblTitleText.text = $sPower;
	
	// Get the DPE of the element to connect to
	dpGet($sDpName + \".power\", sPowerDpe,
				$sDpName + \".\" + $sPower + \".current\", sCurrentDpe,
				$sDpName + \".\" + $sPower + \".volts\", sVoltDpe,
				$sDpName + \".\" + $sPower + \".showValues\", iFormat);
	
 if(NEW_SWITCHING)sPowerDpe+=\".value\"; 
  
	// Connect to the required elements
  dpConnect(\"cbkPowerSettings\",
  					sPowerDpe,
            $sDpName + \".\" + $sPower + \":_alert_hdl.._act_state_color\",
            $sDpName + \".\" + $sPower + \":_alert_hdl.._act_state_text\",
            $sDpName + \".\" + $sPower + \":_alert_hdl.._active\");	
	dpConnect(\"cbkVolts\", sVoltDpe);
	dpConnect(\"cbkCurrent\", sCurrentDpe, $sDpName + \".\" + $sPower + \".showValues\");
	dpConnect(\"cbkShowValues\", $sDpName + \".\" + $sPower + \".showValues\");
	
	// Return to calling routine
	return;
}

void cbkPowerSettings(string sPowerDpe, int iPower,
											string sAlertColourDpe, string sColour,
											string sAlertTextDpe, string sText,
											string sAlertActiveDpe, string bActive)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Check if the power is on or off
	if ((iPower == EPSU_POWER_ON_VALUE) && !bActive) {
		// Power is on, but alerts aren't active
		this.backCol = \"FwStateAttention1\";
		this.toolTipText = $sPower + \" Power status unknown\";
	} else if ((iPower == EPSU_POWER_ON_VALUE) && bActive) {
		// Power is on, show any alert information
		if (strlen(sColour) == 0)
			this.backCol = \"FwStateOKPhysics\";
		else
			this.backCol = sColour;
		if (strlen(sText) == 0)
			this.toolTipText = $sPower + \" Power OK\";
		else
			this.toolTipText = sText;
	} else {
		// Power is off, ignore any alerts (which should be deactivated anyway!)
		this.backCol = \"FwStateOKNotPhysics\";
		this.toolTipText = $sPower + \" Power OFF\";
	}

	// Return to calling routine
	return;
}

void cbkVolts(string argsDpe, float fValue)
{
// Local Variables
// ---------------
	string sValue;

// Executable Code
// ---------------
	// Format the value
	sprintf(sValue, \"%1.2f V\", fValue);
	
	// Display the value
	txtVolts.text = sValue;

	// Return to calling routine
	return;
}

void cbkCurrent(string argsDpe, float fValue,
								string argsShowFormat, int iFormat)
{
// Local Variables
// ---------------
	string sValue;

// Executable Code
// ---------------
	// Format the value
	if ((iFormat & EPSU_SHOW_MILLIAMPS) == 0)
		sprintf(sValue, \"%1.2f A\", fValue);
	else
		sprintf(sValue, \"%1.1f mA\", fValue * 1000.0);
		
	// Display the value
	txtCurrent.text = sValue;

	// Return to calling routine
	return;
}

void cbkShowValues(string argsShowFormat, int iFormat)
{
// Local Variables
// ---------------
	string sValue;

// Executable Code
// ---------------
	// Show or hide values as required
	if ((iFormat & EPSU_SHOW_VALUES) == 0) {
		pnlDisplayValues(false);
	} else {
		pnlDisplayValues();
	}

	// Return to calling routine
	return;
}
" 0
 E 0 1 1 0 1 E U  1 E 125 60 5 5
2 1
"lblTitleText"
""
1 70 50 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 52 118 68
0 2 0 "0s" 0 0 0 66 0 0  72 52 1
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 1
LANG:1 0 
2 2
"txtVolts"
""
1 70 70 E E E 1 E 0 E N "_WindowText" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 72 178 88
0 2 0 "0s" 0 0 0 65 0 0  72 72 1
1
LANG:1 26 Arial,-1,11,5,40,0,0,0,0,0
0 1
LANG:1 0 
2 4
"txtCurrent"
""
1 70 90 E E E 1 E 0 E N "_WindowText" E N "_Transparent" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 39 Click to toggle between values or title

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 72 92 178 108
0 2 0 "0s" 0 0 0 65 0 0  72 92 1
1
LANG:1 26 Arial,-1,11,5,40,0,0,0,0,0
0 1
LANG:1 0 
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0
