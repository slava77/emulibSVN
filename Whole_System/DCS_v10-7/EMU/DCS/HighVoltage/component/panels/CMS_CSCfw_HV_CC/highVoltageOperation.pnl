V 11
1
LANG:1 0 
PANEL,-1 -1 861 842 N "_3DFace" 0
"main()
{
  
  // ==== access control ====
  if (isFunctionDefined(\"fwAccessControl_setupPanel\")) {
    initAcConstants();
    dyn_string ex;
    fwAccessControl_setupPanel(\"accessPrivilegesChangedCB\", ex);
    if (emu_checkException(ex)) { return; }
  }
  //=========================  
  
  dyn_string ex;
//  deviceParams = emuui_parseParameterString($deviceParams, ex);
  deviceParams = emuui_parseParameterString(\"side=P;station=2;ring=2;chamberNumber=10\", ex);
  if (emu_checkException(ex)) { return; }
  
  // HV status colors and meaning
  hvStatusColors = emuui_getMapping(\"hvStatusColors\", ex);
  if (emu_checkException(ex)) { return; }
  hvStatusTexts = emuui_getMapping(\"hvChannelStatusMeaning\", ex);
  if (emu_checkException(ex)) { return; }
  hvModuleStatusTexts = emuui_getMapping(\"hvModuleStatusMeaning\", ex);
  if (emu_checkException(ex)) { return; }
  
  // Module status
  string moduleStatusDp = emuui_getDpName(\"HV_moduleStatus\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // disabled channels
  string offChannelsDp = emuui_getDpName(\"HV_off_channels\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // module type (if 0 - indicates an LV or signal cable problem)
  string moduleTypeDp = emuui_getDpName(\"HV_moduleType\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // all channels
  dyn_string channelDps;
  emuui_chamberGetHvChannelDps(deviceParams, channelDps, channelsOffset, ex);
  if (emu_checkException(ex)) { return; }
  for (int i=1; i <= dynlen(channelDps); i++) {
    tableChannels.appendLine(\"chn\", i);
  }

  // all channels details DPs
  dyn_string channelDetailsDps;
  int offsetNotUsed;
  emuui_chamberGetHvChannelDetailsDps(deviceParams, channelDetailsDps, offsetNotUsed, ex);
  if (emu_checkException(ex)) { return; }
  
  // find out the \"disconnected devices\" DP to be able to show the \"no communication\" warning
  if (dynlen(channelDps) > 1) {
    deviceParams[\"sysName\"] = emuui_getSystemName(channelDps[1]);
  }
  string disconnectedDevicesDp = emuui_getDpName(\"disconnected_devices\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // get the FSM node for the HV of this chamber (this will be used in \"no communication\" warning update
  hvFsmNode = emuui_getFsmNode(\"chamber_high_voltage\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  // check if the node is disabled, if so - then paint everything in gray and set allGrayMode to true
  string domain = hvFsmNode;
  string object = _fwCU_getNodeObj(domain);
  string duMode = fwFsmUi_getDUMode(domain, object);
  if (duMode == \"Disabled\") {
    allGrayMode = true;
  }

  // get master channel status DP
  mapping masterDeviceParams;
  string masterIdDp = emuui_getDpName(\"HV_moduleToMasterId\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterHostIdDp = emuui_getDpName(\"HV_moduleToMasterHostId\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterHvCardDp = emuui_getDpName(\"HV_moduleToMasterHvCard\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterBusAddressDp = emuui_getDpName(\"HV_moduleToMasterBusAddress\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string masterChannelDp = emuui_getDpName(\"HV_moduleToMasterChannel\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  
  dpGet(masterIdDp, masterDeviceParams[\"ID\"],
        masterHostIdDp, masterDeviceParams[\"hostId\"],
        masterHvCardDp, masterDeviceParams[\"hvCard\"],
        masterBusAddressDp, masterDeviceParams[\"busAddress\"],
        masterChannelDp, masterDeviceParams[\"channelNumber\"]);
  masterDeviceParams[\"channelNumber\"] += 1;
  string masterChannelStatusDp = emuui_getDpName(\"HV_masterChannelStatus\", masterDeviceParams, ex);
  if (emu_checkException(ex)) { return; }
  lblMasterInfo.text = \"ID=\" + masterDeviceParams[\"ID\"] + \", ch.=\" + masterDeviceParams[\"channelNumber\"];
    
  // init gui and connect everything
  initConsts();
  initGui(dynlen(channelDps), ex);
  if (emu_checkException(ex)) { return; }

  // make up the data DPs
  dyn_dyn_string dataDps;
  for (int ch=1; ch <= dynlen(channelDps); ch++) {
    dataDps[ch] = makeDynString();
    for (int dpeIdx=1; dpeIdx <= dynlen(dataDpeNames); dpeIdx++) {
      dynAppend(dataDps[ch], channelDps[ch] + \".\" + dataDpeNames[dpeIdx]);
    }
  }
  
  // make up the detailed data DPs
  dyn_dyn_string dataDetailsDps;
  for (int ch=1; ch <= dynlen(channelDetailsDps); ch++) {
    dataDetailsDps[ch] = makeDynString();
    for (int dpeIdx=1; dpeIdx <= dynlen(packDataDpeNames); dpeIdx++) {
      dynAppend(dataDetailsDps[ch], channelDetailsDps[ch] + \".\" + packDataDpeNames[dpeIdx]);
    }
  }
  
  // make up the status & state DPs
  dyn_string stateDps;
  for (int i=1; i <= dynlen(channelDps); i++) {
    dynAppend(statusDps, channelDps[i] + \".status\");
    dynAppend(stateDps, channelDps[i] + \".state\");
  }
  
  // disconnected devices DP
  dpConnect(\"updateDisconnectedWarningCB\", true, disconnectedDevicesDp);
  // data & detailed data
  for (int i=1; i <= dynlen(dataDps); i++) {
    dpConnect(\"updateChannelDataCB\", true, dataDps[i]);
  }
  for (int i=1; i <= dynlen(dataDetailsDps); i++) {
    dpConnect(\"updateChannelDataCB\", true, dataDetailsDps[i]);
  }
  // channel status & state
  dpConnect(\"updateStatusCB\", true, statusDps);
  dpConnect(\"updateStateCB\", true, stateDps);
  // disabled channels
  if (!allGrayMode) {
    dpConnect(\"updateDisabledChannelsCB\", true, offChannelsDp);
  }
  // module status
  dpConnect(\"updateModuleStatusCB\", true, moduleStatusDp);
  // master channel status
  dpConnect(\"updateMasterChannelStatusCB\", true, masterChannelStatusDp);
  // module type - used to detect LV or cabling issues
  dpConnect(\"updateModuleTypeCB\", true, moduleTypeDp);
}

void initGui(int channelCount, dyn_string &ex) {
  lblTitle.text = lblTitle.text + emuui_getChamberName(deviceParams);
  emuui_fillTable(tableChannels.name, \"loading..\", \"\", false, makeDynInt(0));
  emuui_tableCompact(tableChannels.name);
  tableChannels.deleteSelection();
  
  // set the module info
  string hvCoordDp = emuui_getDpName(\"HV_coord\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  string coordsCombined;
  dpGet(hvCoordDp, coordsCombined);
  dyn_string coords = strsplit(coordsCombined, \";\");
  if (dynlen(coords) == 0) {
    emu_addError(\"Could not get HV module coordinates. This is a sign that one of DCS computers is unreachable (perhaps OFF).\", ex);
    return;
  } else if (dynlen(coords) < 4) {
    emu_addError(\"HV module coordinates are incomplete. DP = \" + hvCoordDp + \". Returned coordinates = \" + coordsCombined, ex);
    return;
  }
  lblModuleInfo.text = \"host=\" + coords[1] + \"; slot=\" + coords[2] + \"; addr=\" + coords[3] + \"; part=\" + coords[4] + \",\";
  
  if (allGrayMode) {
    //paint everything in gray
    lblModuleStatus.backCol = \"FwEquipmentDisabled\";
    lblMasterChannelStatus.backCol = \"FwEquipmentDisabled\";
    for (int i=0; i < tableChannels.lineCount(); i++) {
      for (int j=0; j < tableChannels.columnCount(); j++) {
        tableChannels.cellBackColRC(i, tableChannels.columnToName(j), \"FwEquipmentDisabled\");
      }
    }
  }
}

void initConsts() {
  dynAppend(dataDpeNames, \"vmon\");
  dynAppend(dataDpeNames, \"imon\");
  dynAppend(packDataDpeNames, \"vset\");
  dynAppend(packDataDpeNames, \"vcur\");
  dynAppend(packDataDpeNames, \"ramp_up\");
  dynAppend(packDataDpeNames, \"ramp_down\");
  dynAppend(packDataDpeNames, \"vmax\");
  dynAppend(packDataDpeNames, \"imax\");
  dynAppend(packDataDpeNames, \"vtrip\");
  dynAppend(packDataDpeNames, \"itrip\");
  dynAppend(packDataDpeNames, \"trip_cnt\");
  dynAppend(packDataDpeNames, \"trip_delay\");
  dynAppend(packDataDpeNames, \"relay\");
  dynAppend(packDataDpeNames, \"fuse\");
}

/** initialize constants required for access control - basically just fill in the arrays of control and expert control button names. */
void initAcConstants() {
  controlButtons = makeDynString(\"btnChannelForceOn\", \"btnChannelDisableEnable\",     // force on and enable/disable channel
                                 \"btnModuleOFF\", \"btnModuleON\", \"btnDisableEnable\"); //  on/off whole board, disable/enable whole board
  expertControlButtons = makeDynString();
}" 0
 "main()
{
  emuui_destroyReferences(references);
}" 0
 E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"CMS_CSC_common/emu_accessControl.ctl\"
#uses \"CMS_CSC_common/emu_alert.ctl\"

//some panel-wide constants
mapping deviceParams;
dyn_string dataDpeNames;
dyn_string packDataDpeNames;
dyn_string statusDps;
mapping hvStatusColors;
mapping hvStatusTexts;
mapping hvModuleStatusTexts;
int channelsOffset = 0; // offset in module channels that are used by this chamber (e.g. small chambers use channels 1-18 or 19-36 so offset is either 0 or 18 here)
dyn_int currentStatuses;
dyn_int disabledChannels;
string hvFsmNode;
dyn_string references;
bool allGrayMode; // this flag is true when the whole LV FSM node is disabled - then back color of the tables is always gray
bool noCommunication;
int syncSemaphore; // used in synchronized blocks to do a panel-wide synchronization on certain blocks (mainly involving dpSeting important DPs)

int selectedChannel = -1;

/** for access control - arrays of control and expert control buttons which should be under access control */
dyn_string controlButtons;
dyn_string expertControlButtons;

/** This function is called whenever the user privileges change and just passes that to emu_enableDisableControl() which takes care of enabling/disabling buttons. */
void accessPrivilegesChangedCB(string dummy1, string dummy2) {
  emu_enableDisableControl(controlButtons, true, \"lblNoControl\", expertControlButtons, true);
}


/** Callback function for showing new data for a channel. */
void updateChannelDataCB(dyn_string dpList, dyn_anytype data) {
  lblLastUpdate.text = emuui_getLastUpdateTime(dpList[1]);
  
  if (noCommunication) { return; } // don't update the table - let the \"???\" stay there
  
  for (int i=1; i <= dynlen(dpList); i++) {
    string column;
    dyn_int chNums;
    dyn_anytype unpackedData;
    
    unpackData(dpList[i], data[i], column, chNums, unpackedData);
    
    for (int chNumIdx=1; chNumIdx <= dynlen(chNums); chNumIdx++) {
      int chNum = chNums[chNumIdx] - 1; // make it 0-based for table row addressing (in dpname channel indices are 1-based).
      tableChannels.cellValueRC(chNum, column, unpackedData[chNumIdx]);
    }    
  }
}

/** 
  *  Unpacks HV data - returns data title (or table column name), channel numbers that the data is corresponding to and the data itself.
  *  This one can be used for any kind of HV channel data (including this pack_data DPEs, which hold data for two channels in one DPE).
  */
void unpackData(string dp, int inputData, string &column, dyn_int &chNums, dyn_int &unpackedData) {
  dp = dpSubStr(dp, DPSUB_DP_EL);
  dyn_string dpSplit = strsplit(dp, \".\");
  column = dpSplit[dynlen(dpSplit)]; // take the last part of the DP
  
  if (strpos(dp, \"pack_data\") >= 0) { // packed data - holds data for two channels in one DPE....
    int chNum = substr(dpSplit[dynlen(dpSplit) - 1], 1); // take the part that's before the last one (which is channel number in a form like v12, v14..) and remove the v at the front.
    // add the offset (also divided by 2)
    chNum -= channelsOffset / 2;
    // convert from the packed data DP indexing (crazy..) to actual channel index, which is 2*chNum - 1 & 2*chNum
    chNums = makeDynInt(2 * chNum - 1, 2 * chNum);
    
    int data1 = (inputData >> 16) & 0x0FFFF;
    int data2 = inputData & 0x0FFFF;
    unpackedData = makeDynInt(data1, data2);
  } else { // normal data
    int chNum = substr(dpSplit[dynlen(dpSplit) - 1], 1); // take the part that's before the last one (which is channel number in a form like v12, v14..) and remove the v at the front.
    chNum -= channelsOffset;
    chNums = makeDynInt(chNum);
    unpackedData = makeDynAnytype(inputData);
  }
}

/** Updates channel status (also paints the rows with appropriate color). */
void updateStatusCB(dyn_string dpList, dyn_int statuses) {
  if (noCommunication) { return; } // don't update the table - let the \"???\" and grey color stay there
  
  currentStatuses = statuses;
  for (int i=1; i <= dynlen(statuses); i++) {
    string statusText = hvStatusTexts[(string)statuses[i]];
    string statusColor = hvStatusColors[statusText];
    if (!dynContains(disabledChannels, i) && !allGrayMode) { // if this channel is disabled - do not update it's color - let it stay gray
      emuui_tableRowBackColor(tableChannels.name, i - 1, statusColor);
    }
    tableChannels.cellValueRC(i - 1, \"status\", statusText);
  }
}

/** Updates channel state. */
void updateStateCB(dyn_string dpList, dyn_int states) {
  if (noCommunication) { return; } // don't update the table - let the \"???\" and grey color stay there
  
  for (int i=1; i <= dynlen(states); i++) {
    string stateText = hvStatusTexts[(string)states[i]];
    tableChannels.cellValueRC(i - 1, \"state\", stateText);
  }
}

/** Callback function which updates disabled channels (greys them out in a table and forms a string telling you which channels are disabled and puts it to lblDisabledChannels.text). */
void updateDisabledChannelsCB(string dpName, dyn_string disabledChannelsParam) {
  disabledChannels = disabledChannelsParam;
  for (int i=1; i <= dynlen(disabledChannels); i++) {
    disabledChannels[i] -= channelsOffset;
  }
  if (dynlen(disabledChannels) == 0) {
    lblDisabledChannels.text = \"none\";
  }
  
  if (dynlen(disabledChannels) > 0) {
    string channelsStr;
    int count = dynlen(disabledChannels);
    for (int i=1; i <= count; i++) {
      int channelNum = disabledChannels[i];
      // construct a label text
      channelsStr += \"#\" + channelNum;
      if (i != count) { // not the last one
        channelsStr += \", \";
      }
      // paint the table cell background
      emuui_tableRowBackColor(tableChannels.name, channelNum - 1, \"FwEquipmentDisabled\");
    }
    lblDisabledChannels.text = channelsStr;
  }
  
  // update the colors (e.g. if a channel got unmasked - it should change it's color to something else than grey)
  updateStatusCB(makeDynString(), currentStatuses);
}

/** if disconnectedDevices contains hvFsmNode then \"no communication\" warning is shown, otherwise it's hidden. */
void updateDisconnectedWarningCB(string dpName, string disconnectedDevices) {
  noCommunication = (strpos(disconnectedDevices, hvFsmNode) >= 0);
  if (noCommunication) {
    warnNoHvCommunication.visible = true;
  } else {
    warnNoHvCommunication.visible = false;
  }
  
  // no communication - display ??? for all values
  if (noCommunication) {
    emuui_questionOutTable(tableChannels.name(), true, makeDynInt(0));
  }
}

/** If module type comes 0 - this is an indication of LV or signal cable problem - the warning will be shown. */
void updateModuleTypeCB(string dpName, int type) {
  bool lvProblem = (type == 0);
  if (lvProblem) {
    warnLV.visible = true;
  } else {
    warnLV.visible = false;
  }
}

/** Updates module status. */
void updateModuleStatusCB(string dpName, int status) {
  string statusText = hvModuleStatusTexts[(string)status];
  string statusColor = hvStatusColors[statusText];
  
  lblModuleStatus.text = statusText;
  if (!allGrayMode) {
    lblModuleStatus.backCol = statusColor;
  }
}

/** Updates master channel status. */
void updateMasterChannelStatusCB(string dpName, int status) {
  string statusText = hvStatusTexts[(string)status];
  string statusColor = hvStatusColors[statusText];
  
  lblMasterChannelStatus.text = statusText;
  if (!allGrayMode) {
    lblMasterChannelStatus.backCol = statusColor;
  }
}

void channelSelectionChanged(int channelNum) {
  selectedChannel = channelNum;
  if (channelNum == -1) {
    lblSelectedChannel.text = \"none\";
  } else {
    lblSelectedChannel.text = channelNum;
  }
  
  bool enableControl = (channelNum != -1);
  btnChannelDisableEnable.enabled = enableControl;
  btnChannelForceOn.enabled = enableControl;
  
  if (dynContains(disabledChannels, channelNum)) {
    btnChannelDisableEnable.text = \"Enable\";
  } else {
    btnChannelDisableEnable.text = \"Disable\";
  }
}



// ====================================== !!! TODO: MOST OF THIS SHOULD BE MOVED TO SOME KIND OF HV LIBRARY ===============================
// HV communication stuff

/** Enables / disables alarms for a given HV channel.
    Device params should at least include the params necessary to describe a chamber (side, station, ring, chamberNumber) 
      and a channel number at the distribution board called \"distBoardChannelNumber\" (note that this channel number is the channel number at the distribution board, which is not necessarily the same as a channel number in a chamber (for small chambers))*/
alert_reconfig(mapping deviceParams, bool exclude, dyn_string exceptionInfo){

  bool configExists;
  dyn_string alertTexts;
  dyn_string ilist, ilist_new;
  string alertPanel;
  dyn_string alertPanelParameters;
  string alertHelp;
  bool isActive;

  string moduleDp = emuui_getDpName(\"HV_module\", deviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
                    
  fwAlertConfig_getSummary(moduleDp, configExists, alertTexts, ilist,
                          alertPanel, alertPanelParameters, alertHelp,
                          isActive, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }

  string channelDp = emuui_getDpName(\"HV_channel\", deviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  int idx = dynContains(ilist, channelDp + \".status\");
  
  if (exclude) {
    if(idx > 0) {
      dynRemove(ilist, idx); 
    }
    box_command(\"state\", 0);
  }
  else {
    if (idx > 0) {
      dynAppend(ilist, channelDp + \".status\");
    }
    box_command(\"state\", 1);
  }
  
  emuAlert_createSummary(moduleDp, makeDynString(\"\", \"\"), ilist,      
               						 \"\", makeDynString(), \"\", exceptionInfo);
//   fwAlertConfig_createSummary(moduleDp, makeDynString(\"\", \"\"), ilist,
//                               \"\", makeDynString(), \"\", exceptionInfo);
   if (emu_checkException(exceptionInfo)) { return; }
}

box_module_command(string box, int com){

  int chn, value;
  string host, subcommand, chn_text;
  dyn_string coords=split_set;

   getValue(box,\"text\",value);

  host=coords[1];
  subcommand=\"HVCMD;\"+coords[2]+\";\"+coords[3]+\";\"+0+\";\"+com+\";\"+value+\";\"+\"-1\";

  dpSetWait(mudcsAddSystem(\"HV_1_COM\"+\".command\",project_system),host+\"|\"+subcommand);

  COMMAND_FLAG=1;

}


// to be moved to an HV library
public global const int EMU_HV_COMMAND_OFF = 0;
public global const int EMU_HV_COMMAND_ON = 1;

/**
  * Sends a command for a given channel.
  * @param hvModuleDeviceParams device params describing which chamber that would be.
  * @param command command (see constants EMU_HV_COMMAND_*)
  * @param value (optional) value for the command (e.g. voltage setpoint)
  * @param channelNumber (optional) channel number that the command is for (1-based).
  *          255 means that the command is addressed to all the channels on the board.
  *          Default = 255.
  */
void emuHv_sendChannelCommand(dyn_string &exceptionInfo, mapping chamberDeviceParams, int command, int channelNumber = 255, int commandValue = 0) {
  string coordsDp = emuui_getDpName(\"HV_coord\", chamberDeviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  
  int channelOffset = emuui_chamberGetHvChannelsOffset(chamberDeviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  int channelCount = emuui_chamberGetHvChannelCount(chamberDeviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  
  if (channelNumber != 255) { // one channel
    // get the channel offset in the distribution board
    channelNumber--; // make it 0 based
    channelNumber += channelOffset;
  } else { // all channels for that chamber
    if (channelCount < 30) { // small chamber
      if (channelOffset == 0) {
        channelNumber = 253; // all channels in the first part of the distribution board
      } else {
        channelNumber = 254; // all channels in the second part of the distribution board
      }
    }
  }

  string coordDp = emuui_getDpName(\"HV_coord\", deviceParams, exceptionInfo);
  if (emu_checkException(exceptionInfo)) { return; }
  string coords;
  dpGet(coordDp, coords);



  
  string host = coords[1];
  string subcommand = \"HVCMD;\" + coords[2] + \";\" + coords[3] + \";\" + channelNumber + \";\" + command + \";\" + commandValue + \";\" + \"-1\"; //e.g.: 500|HVCMD;6;3;29;1;0;-1 or 500|HVCMD;5;8;10;0;0;-1

//  dpSetWait(mudcsAddSystem(\"HV_1_COM\"+\".command\",project_system),host+\"|\"+subcommand);

return;  
  
  if(command == 7){
    dpSetWait(DpNameFsm+\".last_vset\",value); 
  
  int master_id, master_chan, master_index;
  dyn_string coord_master;

  // master channel vset is set
   dpSetWait(DpNameFsm+\".status\",2);
   mudcsGetMasterForChamber(mudcsAddSystem(DpNameFsm), master_id, 
                           master_chan, master_index, coord_master);
      subcommand=\"HVCMD;\"+coord_master[2]+\";\"+coord_master[3]+\";\"+master_chan+\";\"+7+\";\"+value+\";\"+\"-1\";
      dpSetWait(mudcsAddSystem(\"HV_1_COM\"+\".command\"),coord_master[1]+\"|\"+subcommand);
 
     
  }
  //mudcsDebug(project_system);  
  COMMAND_FLAG=1;

  //....
}

//===========================================================
//===================================================

box_command(string box, int com){

  int chn, value;
  string host, subcommand, chn_text;
  dyn_string coords=split_set;

  getValue(\"chn\",\"text\",chn_text);

  if(chn_text != \"all\" && chn_text != \"ALL\" && chn_text != \"*\" 
     && chn_text != \"\" ){
   getValue(\"chn\",\"text\",chn);
   chn=chn+channel_numeration_shift;
  }
  else chn=255;

   getValue(box,\"text\",value);


  if(chn != \"255\") chn=chn-1;
  else if(split_set[4]==\"1\")chn=253;
  else if(split_set[4]==\"2\")chn=254;

      host=coords[1];
      subcommand=\"HVCMD;\"+coords[2]+\";\"+coords[3]+\";\"+chn+\";\"+com+\";\"+value+\";\"+\"-1\"; //e.g.: 500|HVCMD;6;3;29;1;0;-1 or 500|HVCMD;5;8;10;0;0;-1

    dpSetWait(mudcsAddSystem(\"HV_1_COM\"+\".command\",project_system),host+\"|\"+subcommand);

    if(com == 7){
      dpSetWait(DpNameFsm+\".last_vset\",value); 
  
    int master_id, master_chan, master_index;
    dyn_string coord_master;

    // master channel vset is set
     dpSetWait(DpNameFsm+\".status\",2);
     mudcsGetMasterForChamber(mudcsAddSystem(DpNameFsm), master_id, 
                             master_chan, master_index, coord_master);
        subcommand=\"HVCMD;\"+coord_master[2]+\";\"+coord_master[3]+\";\"+master_chan+\";\"+7+\";\"+value+\";\"+\"-1\";
        dpSetWait(mudcsAddSystem(\"HV_1_COM\"+\".command\"),coord_master[1]+\"|\"+subcommand);
 
     
    }
    //mudcsDebug(project_system);  
    COMMAND_FLAG=1;

}" 0
 2
"CBRef" "1"
"EClose" "main()
{
  emuui_destroyReferences(references);
  PanelOff();
}" 0

""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
2 4
"lblTitle"
""
1 300 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 300 10 405 30
0 2 2 "0s" 0 0 0 192 0 0  300 10 1
1
LANG:1 26 Arial,12,-1,5,75,0,0,0,0,0
0 1
LANG:1 14 High Voltage, 
2 7
"lblForDisabledChannels"
""
1 30 640 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 30 640 137 656
0 2 2 "0s" 0 0 0 192 0 0  30 640 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 18 Disabled channels:
2 8
"lblDisabledChannels"
""
1 140 640 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
  this.text = \"\";
}" 0
 E 0 1 1 2 1 E U  1 E 140 640 184 656
0 2 2 "0s" 0 0 0 192 0 0  140 640 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 list here
2 10
"warnNoHvCommunication"
""
1 450 800 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 450 800 810 814
1 2 2 "0s" 0 0 0 65 0 0  450 800 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 36 No Communication with this HV module
2 12
"warnLV"
""
1 450 780 E E E 1 E 0 E N "black" E N "FwStateAttention3" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 450 780 810 794
1 2 2 "0s" 0 0 0 65 0 0  450 780 1
1
LANG:1 25 Arial,9,-1,5,75,0,0,0,0,0
0 1
LANG:1 56 High Voltage LV or Signal Cable problem - call HV expert
2 13
"lblLastUpdate"
""
1 730 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 730 10 789 26
0 2 2 "0s" 0 0 0 192 0 0  730 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 timestamp
2 14
"PRIMITIVE_TEXT6"
""
1 660 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 660 10 728 26
0 2 2 "0s" 0 0 0 192 0 0  660 10 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 12 Last update:
2 18
"PRIMITIVE_TEXT7"
""
1 430 710 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 710 511 726
0 2 2 "0s" 0 0 0 192 0 0  430 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 Module Status:
2 19
"PRIMITIVE_TEXT8"
""
1 610 710 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 610 710 738 726
0 2 2 "0s" 0 0 0 192 0 0  610 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 22 Master Channel Status:
2 22
"lblModuleStatus"
""
1 520 710 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 520 710 580 724
1 2 2 "0s" 0 0 0 65 0 0  520 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 LOADING...
2 26
"lblMasterChannelStatus"
""
1 750 710 E E E 1 E 1 E N "_WindowText" E N "FwStateOKPhysics" E E
 E E
39 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 750 710 810 724
1 2 2 "0s" 0 0 0 65 0 0  750 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 10 LOADING...
2 27
"lblForModuleInfo"
""
1 430 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
40 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 430 740 499 756
0 2 2 "0s" 0 0 0 192 0 0  430 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 13 Module info: 
2 28
"lblForMasterInfo"
""
1 700 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 700 740 740 756
0 2 2 "0s" 0 0 0 192 0 0  700 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Master:
2 29
"lblModuleInfo"
""
1 500 740 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 500 740 681 756
0 2 2 "0s" 0 0 0 192 0 0  500 740 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 33 host=###; slot=#; addr=#; part=#,
2 30
"lblMasterInfo"
""
1 1790.52102318739 2642 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 0.964285714285714 0 1 460.357142857143 580 1 E 290 160 358 176
0 2 2 "0s" 0 0 0 192 0 0  290 160 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 13 ID ##, ch. ##
30 32
"FRAME1"
""
1 10 33 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
45 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 2.545454545454545 0 2.219512195121952 -15.45454545454545 -43.24390243902442 0 E 10 33 341 321
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Channels
25 34
"tableChannels"
""
1 27.96437659033079 -43.11475409836066 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
47 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0  28 58 832 629
"main()
{
  this.tableMode = TABLE_SELECT_LINE;
  this.selectByClick = TABLE_SELECT_LINE;
}" 0
"main(int row, string column, string value)
{
  dyn_int selection = this.getSelectedLines;
  if (dynlen(selection) == 0) {
    channelSelectionChanged(-1);
  } else {
    channelSelectionChanged(selection[1] + 1); // row number = channel number - 1
  }
}" 0
 1 0 1 17 18 "chn" 2 1 0 "s" 1
LANG:1 3 ch#
E
1
LANG:1 0 

35 "vmon" 3 1 0 "s" 1
LANG:1 4 vmon
E
1
LANG:1 0 

46 "imon" 3 1 0 "s" 1
LANG:1 4 imon
E
1
LANG:1 0 

46 "vset" 3 1 0 "s" 1
LANG:1 4 vset
E
1
LANG:1 0 

46 "vcur" 3 1 0 "s" 1
LANG:1 4 vcur
E
1
LANG:1 0 

46 "ramp_up" 3 1 0 "s" 1
LANG:1 5 rmpUp
E
1
LANG:1 0 

46 "ramp_down" 3 1 0 "s" 1
LANG:1 5 rmpDn
E
1
LANG:1 0 

46 "vmax" 3 1 0 "s" 1
LANG:1 4 vmax
E
1
LANG:1 0 

46 "imax" 2 1 0 "s" 1
LANG:1 4 imax
E
1
LANG:1 0 

36 "vtrip" 3 1 0 "s" 1
LANG:1 5 vTrip
E
1
LANG:1 0 

46 "itrip" 4 1 0 "s" 1
LANG:1 9 iTrip(uA)
E
1
LANG:1 0 

57 "trip_cnt" 3 1 0 "s" 1
LANG:1 6 tripCn
E
1
LANG:1 0 

46 "trip_delay" 3 1 0 "s" 1
LANG:1 6 tripDl
E
1
LANG:1 0 

46 "relay" 2 1 0 "s" 1
LANG:1 5 relay
E
1
LANG:1 0 

43 "fuse" 2 1 0 "s" 1
LANG:1 4 fuse
E
1
LANG:1 0 

43 "state" 3 1 0 "s" 1
LANG:1 5 state
E
1
LANG:1 0 

47 "status" 4 1 0 "s" 1
LANG:1 6 status
E
1
LANG:1 0 

58 
18 18 "3" 1 1
LANG:1 2 #1
"?" 1 1
LANG:1 2 #2
"4" 1 1
LANG:1 2 #3
"5" 1 1
LANG:1 2 #4
"6" 1 1
LANG:1 2 #5
"7" 1 1
LANG:1 2 #6
"8" 1 1
LANG:1 2 #7
"9" 1 1
LANG:1 2 #8
"10" 1 1
LANG:1 2 #9
"11" 1 1
LANG:1 3 #10
"12" 1 1
LANG:1 3 #11
"13" 1 1
LANG:1 3 #12
"14" 1 1
LANG:1 3 #13
"15" 1 1
LANG:1 3 #14
"16" 1 1
LANG:1 3 #15
"17" 1 1
LANG:1 3 #16
"18" 1 1
LANG:1 3 #17
"19" 1 1
LANG:1 3 #18
20 164
1
LANG:1 34 Times [Adobe],-1,14,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
2 37
"PRIMITIVE_TEXT11"
""
1 30 710 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
50 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 30 710 128 726
0 2 2 "0s" 0 0 0 192 0 0  30 710 1
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Selected channel:
2 41
"lblSelectedChannel"
""
1 130 708 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
54 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 130 708 166 727
0 2 2 "0s" 0 0 0 192 0 0  130 708 1
1
LANG:1 26 Arial,11,-1,5,75,0,0,0,0,0
0 1
LANG:1 4 none
13 42
"btnChannelForceOn"
""
1 30 740 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
55 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  28 738 172 772

T 
1
LANG:1 8 Force ON
E E E E
13 43
"btnChannelDisableEnable"
""
1 30 780 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
56 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  28 778 172 812

T 
1
LANG:1 7 Disable
"main()
{
  if (selectedChannel == -1) { return; } // should not happen (since the button should be disabled in that case), but just in case
  
  string offChannelsDp = emuui_getDpName(\"HV_off_channels\", deviceParams, ex);
  if (emu_checkException(ex)) { return; }
  dyn_int offChannels;
  
  synchronized (syncSemaphore) {
    if (this.text == \"Disable\") {
      dpGet(offChannelsDp, offChannels);
      if (!dynContains(offChannels, selectedChannel + channelsOffset)) {
        dynAppend(offChannels, selectedChannel + channelsOffset);
      }
      dpSet(offChannelsDp, offChannels);
      alert_reconfig(chn_text, true);
    } else if (this.text == \"Enable\") {
      dpGet(offChannelsDp, offChannels);
      int idx = dynContains(offChannels, selectedChannel + channelsOffset);
      if (idx > 0) {
        dynRemove(offChannels, idx);
      }    
      dpSet(offChannelsDp, offChannels);
      alert_reconfig(chn_text, false);
    }  
  }
}" 0
 E E E
30 44
"FRAME2"
""
1 590 763 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
57 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.9 0 1.282051282051282 -521 -298.2051282051283 0 E 590 763 791 881
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 15 Channel Control
30 45
"FRAME3"
""
1 260 33 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
58 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 2.2 0 2.631578947368421 -162.0000000000001 593.1578947368421 0 E 260 33 461 91
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 8 Overview
30 46
"FRAME4"
""
1 590 763 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
59 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.9 0 1.282051282051282 -321 -298.2051282051283 0 E 590 763 791 881
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0 1
LANG:1 14 Module Control
13 48
"btnModuleOFF"
""
1 230 710 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
61 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 708 372 742

T 
1
LANG:1 10 Switch OFF
E E E E
13 49
"btnModuleON"
""
1 230 750 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
62 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 748 372 782

T 
1
LANG:1 9 Switch ON
E E E E
2 50
"lblNoControl"
""
1 558 322 E E E 1 E 1 E N "_3DText" E N "FwStateAttention1" E E
 E E
63 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 0 0 1 E U  1 E 30 760 375 777
1 2 2 "0s" 0 0 0 65 0 0  30 760 1
1
LANG:1 38 Helvetica [Adobe],-1,14,5,50,0,0,0,0,0
0 1
LANG:1 32 You don't have control privilege
13 51
"btnDisableEnable"
""
1 230 800 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
64 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,9,-1,5,50,0,0,0,0,0
0  228 798 372 822

T 
1
LANG:1 7 Disable
"main()
{
  if (selectedChannel == -1) { return; } // should not happen (since the button should be disabled in that case), but just in case
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
