V 10
1
LANG:1 23 fwElmbAiConfigOperation
PANEL,-1 -1 430 490 N "_3DFace" 1
"$sDpName"
E E E E E 1 -1 -1 0  0 0
""0  1
E E 2
"CBRef" "0"
"EClose" E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 1
"txtTitle"
""
1 44 30 E E E 1 E 1 E N "schwarz" E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 12 268 36
0 2 0 "0s" 0 0 0 64 0 0  12 12 1
2
LANG:1 84 -*-Arial-*-r-normal-*-21-*-100-100-*-*-iso8859-1|-21,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 70 -microsoft windows-arial-medium-r-normal-*-*-160-100-100-*-*-iso8859-1
0 ""
2
LANG:1 24 Elmb ADC Operation Panel
LANG:0 11 DP-Funktion
2 8
"txtRate"
""
1 20 190 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 192 88 208
0 2 0 "0s" 0 0 0 64 0 0  22 192 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 10 Rate (Hz):
2 9
"txtRange"
""
1 20 220 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 222 84 238
0 2 0 "0s" 0 0 0 64 0 0  22 222 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 10 Range (V):
30 10
"frmMode"
""
1 310 260 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
7 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 310 190 410 260
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 4 Mode
2 15
"txtHighestChannelNum"
""
1 20 250 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 252 166 268
0 2 0 "0s" 0 0 0 64 0 0  22 252 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 23 Highest channel number:
30 17
"frmAdcTransmissionType"
""
1 10 400 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 290 220 400
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 30 Analog Input Transmission Type
2 18
"txtEventTimer"
""
1 20 370 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 22 372 110 389
0 2 0 "0s" 0 0 0 192 0 0  22 372 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 16 Event timer (s):
30 24
"frmADCResetAndCalibrate"
""
1 230 400 E E E 1 E 0 E N "_3DText" E N "_Transparent" E E
 E E
19 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 230 290 420 400
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 19 Reset and Calibrate
2 30
"lblNodeID"
""
1 10 50 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 52 58 68
0 2 0 "0s" 0 0 0 64 0 0  12 52 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 8 Node Id:
2 36
"txtNodeID"
""
1 70 50 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
29 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
// Local Variables
// ---------------
	string sDpName = $sDpName;
	string nodeId;
	
// Executable Code
// ---------------
	// Remove the config part from the DP name to get the ELMB DP name
	strreplace(sDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_AI_CONFIG_NAME, \"\");
	
	// Get the node ID
	dpGet(sDpName + \".id\", nodeId);
	
	// Display the text
	this.text = nodeId;
	
	// Return to calling routine
	return;
}" 0
 E 0 1 1 0 1 E U  0 E 72 52 128 68
0 2 0 "0s" 0 0 0 64 0 0  72 52 1
1
LANG:1 87 -*-Arial-bold-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,697,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
2 39
"txtMessage"
""
1 10 410 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
30 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 412 278 438
0 2 0 "0s" 0 0 0 64 0 0  12 412 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 0 
30 47
"frmADCSettings"
""
1 10 280 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
38 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 170 420 280
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 12 ADC Settings
1 49 2 "" 0
0
1 50 2 "" 1
0
1 51 2 "" 2
0
1 52 2 "" 3
0
1 53 2 "" 4
0
1 54 2 "" 5
0
1 55 2 "" 6
0
1 56 2 "" 7
0
1 57 2 "" 8
0
22 4
"cmbRate"
""
1 180 190 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 178 188 292 215
0

"main()
{
// Local Variables
// ---------------
  int i;
	
  string sTemp;
	
  dyn_float dfRates;
	
  dyn_string dsRates;

// Executable Code
// ---------------
  // Set up the rates that are allowed
  dfRates = makeDynFloat(15.0, 30.0, 61.6, 84.5, 101.1, 1.88, 3.76, 7.51);
  dynSortAsc(dfRates);
  dynClear(dsRates);
		
  // Loop through all rates, formatting the text
  dynAppend(dsRates, \"\");
  for (i = 1; i <= dynlen(dfRates); i++) {
    sprintf(sTemp, \"%1.2f\", dfRates[i]);
    dynAppend(dsRates, sTemp);
  }
		
  // Set the valid rates into the combo box
  this.items = dsRates;
  this.selectedPos = 1;

  // Return to calling routine
  return;
}
" 0

E
E
 0 0
22 6
"cmbRange"
""
1 180 220 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 178 218 292 245
0

"main()
{
// Local Variables
// ---------------
  int i;
	
  string sTemp;
	
  dyn_float dfRanges;
	
  dyn_string dsRanges;

// Executable Code
// ---------------
  // Set up the ranges that are allowed
  dfRanges = makeDynFloat(0.1, 0.055, 0.025, 1.0, 5.0, 2.5);
  dynClear(dsRanges);
		
  // Loop through all ranges, formatting the text
  dynAppend(dsRanges, \"\");
  for (i = 1; i <= dynlen(dfRanges); i++) {
    sprintf(sTemp, \"%1.3f\", dfRanges[i]);
    dynAppend(dsRanges, sTemp);
  }
  dynSortAsc(dsRanges);	

  // Set the valid ranges into the combo box
  this.items = dsRanges;
  this.selectedPos = 1;
	
  // Return to calling routine
  return;
}

" 0

E
E
 0 0
19 7
"radMode"
""
1 320 210 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 318 208 402 252
2
T 
1
LANG:1 8 Unipolar

0 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 7 Bipolar

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
"main()
{
	// Ensure that none of the radio buttons are selected, by setting the value
	// to one that doesn't exist
	this.number = 2;
}" 0
 E
22 16
"cmbHighestChannelNum"
""
1 180 250 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 58 This will override the value calculated by the application

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 178 248 242 275
0

"main()
{
// Local Variables
// ---------------
	int i;
	
	string sTemp;
	
	dyn_string dsChannels;

// Executable Code
// ---------------
	// Create list of available values
	dynAppend(dsChannels, \"\");
	for (i = 0; i <= 64; i++) {
		sprintf(sTemp, \"%d\", i);
		dynAppend(dsChannels, sTemp);
	}
		
	// Enter values into combo box
	this.items = dsChannels;
	this.selectedPos = 1;
	
	// Return to calling routine
	return;
}
" 0

E
E
 0 0
22 19
"cmbEventTimer"
""
1 120 370 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 118 368 202 395
0

"main()
{
// Local Variables
// ---------------
	int i;
	
	string sTemp;
	
	dyn_string dsEventTimerValues;

// Executable Code
// ---------------
	// Enter all allowed values into the event timer array
	dynAppend(dsEventTimerValues, \"\");
	for (i = 0; i <= 32; i++) {
		sprintf(sTemp, \"%d\", i);
		dynAppend(dsEventTimerValues, sTemp);
	}
	
	// Enter the values into the combo box
	this.items = dsEventTimerValues;
	this.selectedPos = 1;

	// Return to calling routine
	return;
}
" 0

E
E
 0 0
19 20
"radTransmissionType"
""
1 20 310 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 113 For normal operation use -After Sync. message- On RTR transmission the data triggered by the event timer rollover

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 18 308 202 362
2
T 
1
LANG:1 24 After Sync. message only

0 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 17 After RTR message

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E "main(int argiButton)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Check which selection has been made
	switch (argiButton) {
		case 0:
			// Make the event timer combo box disabled
			cmbEventTimer.enabled = false;
			txtEventTimer.enabled = false;
			break;
		case 1:
			// Enable the event timer combo box
			cmbEventTimer.enabled = true;
			txtEventTimer.enabled = true;
			break;
	}

	// Return to calling routine
	return;
}" 0

13 25
"cmdResetAndCalibrateNow"
""
1 240 310 E E E 0 E 0 E N "_ButtonText" E N "_Button" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 238 308 412 342

T 
1
LANG:1 23 Reset and Calibrate now
E E E E
13 26
"cmdForEachChannelScan"
""
1 240 360 E E E 0 E 0 E N "_ButtonText" E N "_Button" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 238 358 412 392

T 
1
LANG:1 24 Before each channel scan
E E E E
13 27
"cmdWrite"
""
1 358 410 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 356 408 422 442

T 
1
LANG:1 5 Write
"main()
{
// Local Variables
// ---------------
	int iMode;
	int radModePos = radMode.number;
	int iHighestChannelNum = cmbHighestChannelNum.text;
	int iTransmissionTypePos = radTransmissionType.number;
	int iTransmissionType;
	int iEventTimer = -1;
	int iRate;
	int iRange;
	int i;
	
	unsigned uState;

	float fRate = cmbRate.text;
	float fRange = cmbRange.text;

	string sElmbDpName = $sDpName;

	dyn_float df;

	dyn_string dsTemp;
	dyn_string ds;


// Executable Code
// ---------------
	// Check if values should be saved to EEPROM
	ChildPanelOnCentralReturn(\"vision/MessageInfo3\",
														\"Question\",
														makeDynString(\"Save these settings to the EEPROM? \\n(i.e. make default settings)\", \"Yes\", \"No\", \"Cancel\"),
														df, ds);

	// If cancel clicked, do not set configuration
	if (df[1] == 2)
		return;

	// Disable necessary controls until configuration set
	this.enabled = false;
	cmdRead.enabled = false;
			
	// Remove the config part from the DP name to get the ELMB DP name
	strreplace(sElmbDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_AI_CONFIG_NAME, \"\");
	
	// Get current state of ELMB
	dpGet(sElmbDpName + \".state.value\", uState);

	// Set ELMB pre-operational	
	dpSet(sElmbDpName + \".management\", 128);

	txtMessage.text = \"This will take a few seconds. Please wait...\";

	// iMode == 2 means do not set
	if (radModePos == 0)
		iMode = 1;
	else if (radModePos == 1)
		iMode = 0;
	else 
		iMode = 2;

	// iTransmissionType == 2 means do not set
	if (iTransmissionTypePos == 0)
		iTransmissionType = 1;
	else if (iTransmissionTypePos == 1)
		iTransmissionType = 255;
	else 
		iTransmissionType = 2;
	
	if ((cmbEventTimer.text != \"\") && (radTransmissionType.number == \"1\"))
		iEventTimer = cmbEventTimer.text;
	
	// start saving those parameters that have values
	// mode
	if (iMode != 2) {
		dpSet($sDpName + \".mode.write\", iMode);
		delay(0,50);
	}
	
	// range
	switch(fRange) {
		case 0.100:
			iRange = 0;
			break;
		case 0.055:
			iRange = 1;
			break;
		case 0.025:
			iRange = 2;
			break;
		case 1.000:
			iRange = 3;
			break;
		case 5.000:
			iRange = 4;
			break;
		case 2.500:
		iRange = 5;
			break;
		default:
			iRange = -1;
			break;
	}
	
	if ((iRange >= 0) && (iRange <= 5)) {
		dpSet($sDpName + \".range.byte.write\", iRange);
		delay(0,50);
	}
	
	// rate
	switch (fRate) {
		case 15.00:
			iRate = 0;
			break;
		case 30.00:
			iRate = 1;
			break;
		case 61.60:
			iRate = 2;
			break;
		case 84.50:
			iRate = 3;
			break;
		case 101.10:
			iRate = 4;
			break;
		case 1.88:
			iRate = 5;
			break;
		case 3.76:
			iRate = 6;
			break;
		case 7.51:
			iRate = 7;
			break;
		default:
			iRate = -1;
			break;
	}	
	
	if ((iRate >= 0) && (iRate <= 7)) {
		dpSet($sDpName + \".rate.byte.write\", iRate);
		delay(0,50);			
	}
	
	// transmission type
	if (iTransmissionType != 2) {
		dpSet($sDpName + \".transmissionType.write\", iTransmissionType);
		delay(0,50);
	}
	
	// maxchannels
	if (iHighestChannelNum) {
		dpSet($sDpName + \".chNumber.write\", iHighestChannelNum);
		delay(0,50);
	}
	
	// event timer
	if (iEventTimer) {
		if ((iEventTimer != -1) && (radTransmissionType.number == \"1\")) {
			dpSet($sDpName + \".eventTimer.write\", iEventTimer);
			delay(0,50);
		}
	}

	if (df[1] == 1.0) {
		dpSet(sElmbDpName + \".eeprom.save\", ELMB_SAVE_EEPROM);
		delay(0, 50);
	}
	
	// Set the ELMB back to it's original state, but only if it was stopped or operational.
	// Otherwise, leave it as preoperational
	if ((uState == 0x84) || (uState == 0x04))
		dpSet(sElmbDpName + \".management\", 2);
	else if ((uState  == 0x85) || (uState == 0x05))
		dpSet(sElmbDpName + \".management\", 1);
		
	// Indicate success to user
	txtMessage.text = \"Info: ADC configuration set\";
	
	// Re-enable controls
	this.enabled = true;
	cmdRead.enabled = true;

	// Return to calling routine
	return;
}" 0
 E E E
13 28
"cmdRead"
""
1 290 410 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 288 408 354 442

T 
1
LANG:1 4 Read
"main()
{
// Local Variables
// ---------------
  bool bMode;
  bool bReading;
	
  int i;
  int iChannelMax;
  int iTemp;
	
  unsigned uState;
  unsigned uTransmissionType;
  unsigned uEventTimer;
	
  float fRange;
  float fRate;
	
  string sElmbName;
  string sTemp;
  string sTemp2;
  string sMessage;
  
  anytype aValue;
	
  dyn_string dsTemp;
  dyn_string dsExceptionTemp;
  dyn_string dsExceptionInfo;
			
// Executable Code
// ---------------
  // Disable certain controls while the read takes place
  this.enabled = false;
  cmdWrite.enabled = false;
	
  // Give some information to the user
  txtMessage.text = \"This may take up to 10 seconds. Please wait...\";
  fwOpenProgressBar(\"Reading ADC Settings\", \"In progress. Please wait...\", 1);
			
  // Get the parent (ELMB) that this config comes from
  fwDevice_getParent($sDpName, sElmbName, dsExceptionInfo);			
	
  // Get current state of ELMB
  dpGet(sElmbName + \".state.value\", uState);
			
  // Set node to Pre-Operational:
  dpSetWait(sElmbName + \".management\", 128);
  
  // Input range
  fwElmb_elementSQ($sDpName + \".range.byte.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    dpGet($sDpName + \".range.volt\", fRange);
    cmbRange.enabled = true;
    txtRange.enabled = true;
    dsTemp = cmbRange.items;
    sprintf(sTemp, \"%1.3f\", fRange);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp > 0)
      cmbRange.selectedPos = iTemp;
  } else {
    cmbRange.enabled = false;
    txtRange.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Conversion rate
  fwElmb_elementSQ($sDpName + \".rate.byte.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    dpGet($sDpName + \".rate.hz\", fRate);
    cmbRate.enabled = true;
    txtRate.enabled = true;
    dsTemp = cmbRate.items;
    sprintf(sTemp, \"%1.2f\", fRate);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp > 0)
      cmbRate.selectedPos = iTemp;
  } else {
    cmbRate.enabled = false;
    txtRate.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Mode
  fwElmb_elementSQ($sDpName + \".mode.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    bMode = aValue;
    radMode.enabled = true;
    switch (bMode) {
      case 0:
        radMode.number = 1;
        break;
      case 1:
        radMode.number = 0;
        break;
    }
  } else {
    radMode.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Max Channel
  fwElmb_elementSQ($sDpName + \".chNumber.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    iChannelMax = aValue;
    cmbHighestChannelNum.enabled = true;
    txtHighestChannelNum.enabled = true;
    dsTemp = cmbHighestChannelNum.items;
    sprintf(sTemp, \"%d\", iChannelMax);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp > 0)
      cmbHighestChannelNum.selectedPos = iTemp;
    else if (iTemp == 0)
      cmbHighestChannelNum.selectedPos = 1;
  } else {
    cmbHighestChannelNum.enabled = false;
    txtHighestChannelNum.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  // Transmission type and event timer
  fwElmb_elementSQ($sDpName + \".transmissionType.read\", 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    uTransmissionType = aValue;
    switch (uTransmissionType) {
      case 1: // Sync response only
        radTransmissionType.number = 0;
        txtEventTimer.enabled = false;
        cmbEventTimer.enabled = false;
        break;
      case 255: // Sync response and event timer
        fwElmb_elementSQ($sDpName + \".eventTimer.read\", 2, aValue, dsExceptionTemp);
        if (dynlen(dsExceptionTemp) == 0) {
          uEventTimer = aValue;
          dsTemp = cmbEventTimer.items;
          sprintf(sTemp, \"%d\", uEventTimer);
          iTemp = dynContains(dsTemp, sTemp);
          if (iTemp > 0)
            cmbEventTimer.selectedPos = iTemp;
          radTransmissionType.number = 1;
          txtEventTimer.enabled = true;
          cmbEventTimer.enabled = true;
        } else {
          radTransmissionType.enabled = false;
          txtEventTimer.enabled = false;
          cmbEventTimer.enabled = false;
          dynAppend(dsExceptionInfo, dsExceptionTemp);
        }
        break;
    }
  } else {
    radTransmissionType.enabled = false;
    txtEventTimer.enabled = false;
    cmbEventTimer.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }
  
  fwElmbUser_updateFirmwareInfo(sElmbName);

  // Set the ELMB back to it's original state, but only if it was stopped or operational.
  // Otherwise, leave it as preoperational
  if ((uState == 0x84) || (uState == 0x04))
    dpSet(sElmbName + \".management\", 2);
  else if ((uState  == 0x85) || (uState == 0x05))
    dpSet(sElmbName + \".management\", 1);

  // Check for errors
  if (dynlen(dsExceptionInfo) > 0) {
    fwCloseProgressBar(\"Problems reading ADC settings\");
    txtMessage.text = \"Problems reading ADC settings\";
    fwExceptionHandling_display(dsExceptionInfo);
  } else {
    txtMessage.text = \"ADC settings successfully read\";
    fwCloseProgressBar(\"ADC settings successfully read\");
  }
		
  // Re-enable controls
  this.enabled = true;
  cmdWrite.enabled = true;

  // Return to calling routine
  return;
}
" 0
 E E E
13 41
"cmdClose"
""
1 290 450 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 288 448 422 482

T 
1
LANG:1 5 Close
"main()
{
	PanelOff(myPanelName());
}" 0
 E E E
1 48 0 "" 0
0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group2"
"objects\\fwGeneral\\fwHelpButton.pnl" 614 10 T 33 1 0 1 -220 0
1
"$sPanelRelativePath""fwElmb/fwElmbAiConfigOperation"
3 2 ""
"fwElmb\\objects\\fwElmbVersionsRef.pnl" 240 90 T 40 1 0 1 -60 10
1
"$sDpName""$sDpName"
0