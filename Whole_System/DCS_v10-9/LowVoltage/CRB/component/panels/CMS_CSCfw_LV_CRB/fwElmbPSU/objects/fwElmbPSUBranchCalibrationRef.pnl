V 10
1
LANG:1 26 fwElmbPSUBranchCalibration
PANEL,736 518 420 348 N "_3DFace" 3
"$sDpName"
"$sIorV"
"$sPower"
EEE E E 1 -1 -1 0  90 50
"" 0 1
E"void pnlPopulateTable()
{
// Local Variables
// ---------------
	int i;
	int iMsgConvType;
	int iBranch;
	
	float fA, fB;
	
	string sA, sB;
	string sHasCalibration;
	string sType;
	string sDp;
	string sDescription;
	string sTitle;
	
	dyn_string dsDescriptions;// = makeDynString(\"CAN Current\", \"CAN Voltage\", \"AD Current\", \"AD Voltage\");
	dyn_string dsDps;// = makeDynString(\"\", \"\", \"\", \"\");
	dyn_string dsBranches;

// Executable Code
// ---------------
	// Get which DPT has been given
	sType = dpTypeName($sDpName);
	
	// Get correct information for population
	if (sType == EPSU_BRANCH_DPT_NAME) {
		// Get the information about this branch
		dpGet($sDpName + \".id\", iBranch,
					$sDpName + \".CAN.current\", dsDps[1],
					$sDpName + \".CAN.volts\", dsDps[2],
					$sDpName + \".AD.current\", dsDps[3],
					$sDpName + \".AD.volts\", dsDps[4]);
		dsDescriptions = makeDynString(\"CAN Current\", \"CAN Voltage\", \"AD Current\", \"AD Voltage\");
		sprintf(sTitle, \"Branch %02d\", iBranch);
	} else if (sType == EPSU_CRATE_DPT_NAME) {
		dsBranches = dpNames($sDpName + fwDevice_HIERARCHY_SEPARATOR + \"*\", EPSU_BRANCH_DPT_NAME);
		
		// Loop through all the branches, obtaining the required information
		for (i = 1; i <= dynlen(dsBranches); i++) {
			dpGet(dsBranches[i] + \".\" + $sPower + \".\" + $sIorV, sDp,
						dsBranches[i] + \".id\", iBranch);
			sprintf(sDescription, \"Branch %02d\", iBranch);
			dynAppend(dsDescriptions, sDescription);
			dynAppend(dsDps, sDp);
		}
		sTitle = $sPower + \" \" + $sIorV;
	} else {
		return;
	}
	
	// Set the title
	txtTitle.text = sTitle;
				
	// Enter the information into the table
	for (i = 1; i <= dynlen(dsDps); i++) {
		// Get the type
		dpGet(dsDps[i] + \":_msg_conv.._type\", iMsgConvType);
		if (iMsgConvType == DPCONFIG_NONE) {
			sHasCalibration = \"None\";
			sA = \"-\";
			sB = \"-\";
		} else {
			// Get the rest of the information
			dpGet(dsDps[i] + \":_msg_conv.1._type\", iMsgConvType,
						dsDps[i] + \":_msg_conv.1._poly_a\", fA,
						dsDps[i] + \":_msg_conv.1._poly_b\", fB);
								
			// Check type of conversion
			if (iMsgConvType == DPDETAIL_CONV_POLY) {
								
				// Set the text to display
				sHasCalibration = \"Yes\";
				sprintf(sA, \"%1.4f\", fA);
				sprintf(sB, \"%1.4f\", fB);
			}
		}
	
		// Add the information to the table
		tabCalibration.updateLine(1,
															\"dpe\", dsDps[i],
															\"description\", dsDescriptions[i],
															\"hasCalibration\", sHasCalibration,
															\"offset\", sA,
															\"gain\", sB);
	}
	
	// Return to calling routine
	return;
}

void pnlUpdateCalibrationValues()
{
// Local Variables
// ---------------
	int i;
	int iLineCount;
	
	string sHasCalibration;
	string sA, sB;
	
	float fA, fB;
	
	dyn_anytype daLine;

// Executable Code
// ---------------
	// Get the number of lines
	iLineCount = tabCalibration.lineCount;
	
	// Loop through all entries, updating the configuration as needed
	for (i = 0; i < iLineCount; i++) {
		daLine = tabCalibration.getLineN(i);
		
		// Check whether any action needs to be taken
		if (daLine[3] == \"Remove\") {
			dpSetWait(daLine[1] + \":_msg_conv.._type\", DPCONFIG_NONE);
			sHasCalibration = \"None\";
			sA = \"-\";
			sB = \"-\";
		} else if (daLine[3] == \"Yes\") {
			fA = daLine[4];
			fB = daLine[5];
			dpSetWait(daLine[1] + \":_msg_conv.._type\", DPCONFIG_CONVERSION_RAW_TO_ENG_MAIN,
								daLine[1] + \":_msg_conv.1._type\", DPDETAIL_CONV_POLY,
								daLine[1] + \":_msg_conv.1._poly_grade\", 1,
								daLine[1] + \":_msg_conv.1._poly_a\", fA,
								daLine[1] + \":_msg_conv.1._poly_b\", fB,
								daLine[1] + \":_msg_conv.1._poly_c\", 0.0,
								daLine[1] + \":_msg_conv.1._poly_d\", 0.0);
			sHasCalibration = \"Yes\";
			sprintf(sA, \"%1.4f\", fA);
			sprintf(sB, \"%1.4f\", fB);
		} else {
			sHasCalibration = daLine[3];
			sA = daLine[4];
			sB = daLine[5];
		}
		
		// Update the table to show the changes
		tabCalibration.updateLine(1,
															\"dpe\", daLine[1],
															\"hasCalibration\", sHasCalibration,
															\"offset\", sA,
															\"gain\", sB);
	}

	// Return to calling routine
	return;
}" 0
 2
"CBRef""1"
"EClose"E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 6
"txtTitle"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
5 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 12 368 38
0 2 0 "s" 0 0 0 64 0 0  12 12
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-160-100-100-*-*-iso8859-1|-19,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 0 
25 0
"tabCalibration"
""
1 10 50 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
8 48 412 302
"main()
{
// Local Variables
// ---------------
/*
	int i;
	int iMsgConvType;
	
	float fA, fB;
	
	string sA, sB;
	string sHasCalibration;
	
	dyn_string dsDescriptions = makeDynString(\"CAN Current\", \"CAN Voltage\", \"AD Current\", \"AD Voltage\");
	dyn_string dsDps = makeDynString(\"\", \"\", \"\", \"\");
*/
// Executable Code
// ---------------
	pnlPopulateTable();
	
	/*
	// Get the information about this branch
	dpGet($sDpName + \".CAN.current\", dsDps[1],
				$sDpName + \".CAN.volts\", dsDps[2],
				$sDpName + \".AD.current\", dsDps[3],
				$sDpName + \".AD.volts\", dsDps[4]);
				
	// Enter the information into the table
	for (i = 1; i <= dynlen(dsDps); i++) {
		// Get the type
		dpGet(dsDps[i] + \":_msg_conv.._type\", iMsgConvType);
		if (iMsgConvType == DPCONFIG_NONE) {
			sHasCalibration = \"None\";
			sA = \"-\";
			sB = \"-\";
		} else {
			// Get the rest of the information
			dpGet(dsDps[i] + \":_msg_conv.1._type\", iMsgConvType,
						dsDps[i] + \":_msg_conv.1._poly_a\", fA,
						dsDps[i] + \":_msg_conv.1._poly_b\", fB);
								
			// Check type of conversion
			if (iMsgConvType == DPDETAIL_CONV_POLY) {
								
				// Set the text to display
				sHasCalibration = \"Yes\";
				sprintf(sA, \"%1.4f\", fA);
				sprintf(sB, \"%1.4f\", fB);
			}
		}
	
		// Add the information to the table
		tabCalibration.updateLine(1,
															\"dpe\", dsDps[i],
															\"description\", dsDescriptions[i],
															\"hasCalibration\", sHasCalibration,
															\"offset\", sA,
															\"gain\", sB);
	}
	*/
	
	// Return to calling routine
	return;
}" 0
 "main(int row, string column, string value)
{
// Local Variables
// ---------------
	int iMsgConvType;
	
	float fA, fB;
	
	string sDpe;
	string sA = \"0.0000\";
	string sB = \"1.0000\";
	string sHasCalibration = \"Yes\";

// Executable Code
// ---------------
	// Check the name of column where the user clicked
	if (column == \"hasCalibration\") {
	
		// Get the DPE
		getValue(\"\", \"cellValueRC\", row, \"dpe\", sDpe);
		
		// Get whether it has any message conversion defined (this is needed in most cases)
		dpGet(sDpe + \":_msg_conv.._type\", iMsgConvType);

		// Check the value of the cell
		if (value == \"Yes\") {
			if (iMsgConvType == DPCONFIG_NONE) {
				sHasCalibration = \"None\";
				sA = \"-\";
				sB = \"-\";
			} else {
				sHasCalibration = \"Remove\";
				sA = \"X\";
				sB = \"X\";
			}
		} else if (value == \"Remove\") {
			if (iMsgConvType != DPCONFIG_NONE) {
				dpGet(sDpe + \":_msg_conv.1._type\", iMsgConvType,
							sDpe + \":_msg_conv.1._poly_a\", fA,
							sDpe + \":_msg_conv.1._poly_b\", fB);
								
				// Check type of conversion
				if (iMsgConvType == DPDETAIL_CONV_POLY) {
					sHasCalibration = \"Yes\";
					sprintf(sA, \"%1.4f\", fA);
					sprintf(sB, \"%1.4f\", fB);
				}
			}
		}
	
		// Add the information to the table
		tabCalibration.updateLine(1,
															\"dpe\", sDpe,
															\"hasCalibration\", sHasCalibration,
															\"offset\", sA,
															\"gain\", sB);

	/*															
	} else if ((column == \"offset\") || (column == \"gain\")) {
		getValue(\"\", \"cellValueRC\", row, \"hasCalibration\", sHasCalibration);
		if (sHasCalibration == \"Yes\") {
			setValue(\"\", \"namedColumnEditable\", column, true);
		} else {
			setValue(\"\", \"namedColumnEditable\", column, false);
		}
	*/
	}

	// Return to calling routine
	return;
}" 0
 1 0 1 5 1 "dpe" 0 0 0 "s" 1
LANG:1 3 dpe
E1
LANG:1 0 
 150 "description" 0 1 0 "s" 1
LANG:1 11 Description
E1
LANG:1 0 
 180 "hasCalibration" 0 1 0 "s" 1
LANG:1 12 Calibration?
E1
LANG:1 0 
 70 "offset" 0 1 -1 "s" 1
LANG:1 10 Offset (A)
E1
LANG:1 0 
 65 "gain" 0 1 -1 "s" 1
LANG:1 9 Gain (Bx)
E1
LANG:1 0 
 60 24 24 "" 1 1
LANG:1 2 #1
8 30 1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 1 3 0
1 0
13 1
"cmdOK"
""
1 180 310 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
178 308 252 337
T 
1
LANG:1 2 OK
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Call function to update all calibration values
	pnlUpdateCalibrationValues();

	// Close the panel
	PanelOff();
}" 0
 E E E
13 3
"cmdApply"
""
1 260 310 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
3 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
258 308 332 337
T 
1
LANG:1 5 Apply
"main()
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Call function to update all calibration values
	pnlUpdateCalibrationValues();

	// Return to calling routine
	return;
}" 0
 E E E
13 4
"cmdCancel"
""
1 340 310 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
4 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
338 308 412 337
T 
1
LANG:1 6 Cancel
"main()
{
	PanelOff();
}" 0
 E E E
1 7 0 "" 0
0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group2"
"objects\\fwGeneral\\fwHelpButton.pnl" 394 10 T 6 1 0 1  -10 0  
1
"$sPanelRelativePath""fwElmbPSU/objects/fwElmbPSUBranchCalibrationRef"
0